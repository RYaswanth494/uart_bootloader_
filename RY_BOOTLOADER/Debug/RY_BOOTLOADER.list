
RY_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000087c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000988  08000988  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000988  08000988  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000988  08000988  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000988  08000988  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000988  08000988  00001988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800098c  0800098c  0000198c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000990  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000994  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000994  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000299d  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad1  00000000  00000000  000049ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  000054a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000244  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a20  00000000  00000000  00005a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f89  00000000  00000000  0001b43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cb80  00000000  00000000  0001f3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bf45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a54  00000000  00000000  0009bf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0009c9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000970 	.word	0x08000970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000970 	.word	0x08000970

0800014c <RY_FLASH_Unlock>:
#define RY_FLASH_AR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x14))
#define RY_FLASH_OBR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x1C))
#define RY_FLASH_WRPR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x20))


static void RY_FLASH_Unlock(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 if (RY_FLASH_CR & RY_FLASH_CR_LOCK) {
 8000150:	4b07      	ldr	r3, [pc, #28]	@ (8000170 <RY_FLASH_Unlock+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000158:	2b00      	cmp	r3, #0
 800015a:	d005      	beq.n	8000168 <RY_FLASH_Unlock+0x1c>
 RY_FLASH_KEYR = RY_FLASH_KEY1;
 800015c:	4b05      	ldr	r3, [pc, #20]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <RY_FLASH_Unlock+0x2c>)
 8000160:	601a      	str	r2, [r3, #0]
 RY_FLASH_KEYR = RY_FLASH_KEY2;
 8000162:	4b04      	ldr	r3, [pc, #16]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <RY_FLASH_Unlock+0x30>)
 8000166:	601a      	str	r2, [r3, #0]
 }
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40022010 	.word	0x40022010
 8000174:	40022004 	.word	0x40022004
 8000178:	45670123 	.word	0x45670123
 800017c:	cdef89ab 	.word	0xcdef89ab

08000180 <RY_FLASH_Lock>:
static void RY_FLASH_Lock(void) {
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
 RY_FLASH_CR |= RY_FLASH_CR_LOCK;
 8000184:	4b04      	ldr	r3, [pc, #16]	@ (8000198 <RY_FLASH_Lock+0x18>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a03      	ldr	r2, [pc, #12]	@ (8000198 <RY_FLASH_Lock+0x18>)
 800018a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	40022010 	.word	0x40022010

0800019c <RY_FLASH_WaitForLastOperation>:
static RY_FLASH_Status RY_FLASH_WaitForLastOperation(void) {
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 uint32_t timeout = RY_FLASH_TIMEOUT;
 80001a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000210 <RY_FLASH_WaitForLastOperation+0x74>)
 80001a4:	607b      	str	r3, [r7, #4]
 while ((RY_FLASH_SR & RY_FLASH_SR_BSY) && --timeout);
 80001a6:	bf00      	nop
 80001a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d005      	beq.n	80001c0 <RY_FLASH_WaitForLastOperation+0x24>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3b01      	subs	r3, #1
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d1f3      	bne.n	80001a8 <RY_FLASH_WaitForLastOperation+0xc>
 if (timeout == 0) return RY_FLASH_ERR_TIMEOUT;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d101      	bne.n	80001ca <RY_FLASH_WaitForLastOperation+0x2e>
 80001c6:	2302      	movs	r3, #2
 80001c8:	e01c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_WRPRTERR) return RY_FLASH_ERR_WRPRT;
 80001ca:	4b12      	ldr	r3, [pc, #72]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f003 0310 	and.w	r3, r3, #16
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <RY_FLASH_WaitForLastOperation+0x3e>
 80001d6:	2306      	movs	r3, #6
 80001d8:	e014      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_PGERR) return RY_FLASH_ERR_PG;
 80001da:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0304 	and.w	r3, r3, #4
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <RY_FLASH_WaitForLastOperation+0x4e>
 80001e6:	2305      	movs	r3, #5
 80001e8:	e00c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_EOP) RY_FLASH_SR |= RY_FLASH_SR_EOP;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f003 0320 	and.w	r3, r3, #32
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <RY_FLASH_WaitForLastOperation+0x66>
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	6013      	str	r3, [r2, #0]
 return RY_FLASH_OK;
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000186a0 	.word	0x000186a0
 8000214:	4002200c 	.word	0x4002200c

08000218 <RY_FLASH_ErasePage>:
RY_FLASH_Status RY_FLASH_ErasePage(uint32_t address) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 if (address < APP_START_ADDR || address >= APP_END_ADDR || address % RY_FLASH_PAGE_SIZE != 0)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <RY_FLASH_ErasePage+0x7c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d308      	bcc.n	800023a <RY_FLASH_ErasePage+0x22>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a1b      	ldr	r2, [pc, #108]	@ (8000298 <RY_FLASH_ErasePage+0x80>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d804      	bhi.n	800023a <RY_FLASH_ErasePage+0x22>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <RY_FLASH_ErasePage+0x26>
 return RY_FLASH_ERR_ADDR;
 800023a:	2303      	movs	r3, #3
 800023c:	e026      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 RY_FLASH_Unlock();
 800023e:	f7ff ff85 	bl	800014c <RY_FLASH_Unlock>
 RY_FLASH_Status status = RY_FLASH_WaitForLastOperation();
 8000242:	f7ff ffab 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000246:	4603      	mov	r3, r0
 8000248:	73fb      	strb	r3, [r7, #15]
 if (status != RY_FLASH_OK) return status;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <RY_FLASH_ErasePage+0x3c>
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	e01b      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 RY_FLASH_CR |= RY_FLASH_CR_PER;
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a10      	ldr	r2, [pc, #64]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6013      	str	r3, [r2, #0]
 RY_FLASH_AR = address;
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <RY_FLASH_ErasePage+0x88>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6013      	str	r3, [r2, #0]
 RY_FLASH_CR |= RY_FLASH_CR_STRT;
 8000266:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6013      	str	r3, [r2, #0]
 status = RY_FLASH_WaitForLastOperation();
 8000272:	f7ff ff93 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000276:	4603      	mov	r3, r0
 8000278:	73fb      	strb	r3, [r7, #15]
 RY_FLASH_CR &= ~RY_FLASH_CR_PER;
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000280:	f023 0302 	bic.w	r3, r3, #2
 8000284:	6013      	str	r3, [r2, #0]
 RY_FLASH_Lock();
 8000286:	f7ff ff7b 	bl	8000180 <RY_FLASH_Lock>
 return status;
 800028a:	7bfb      	ldrb	r3, [r7, #15]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08004000 	.word	0x08004000
 8000298:	0801ffff 	.word	0x0801ffff
 800029c:	40022010 	.word	0x40022010
 80002a0:	40022014 	.word	0x40022014

080002a4 <RY_FLASH_ProgramHalfWord>:
static RY_FLASH_Status RY_FLASH_ProgramHalfWord(uint32_t address, uint16_t data) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	807b      	strh	r3, [r7, #2]
 if ((address % 2) != 0 || address < APP_START_ADDR || address >= APP_END_ADDR)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d107      	bne.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000328 <RY_FLASH_ProgramHalfWord+0x84>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d303      	bcc.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a19      	ldr	r2, [pc, #100]	@ (800032c <RY_FLASH_ProgramHalfWord+0x88>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d901      	bls.n	80002ce <RY_FLASH_ProgramHalfWord+0x2a>
 return RY_FLASH_ERR_ALIGN;
 80002ca:	2304      	movs	r3, #4
 80002cc:	e028      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 RY_FLASH_Unlock();
 80002ce:	f7ff ff3d 	bl	800014c <RY_FLASH_Unlock>
 RY_FLASH_Status status = RY_FLASH_WaitForLastOperation();
 80002d2:	f7ff ff63 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002d6:	4603      	mov	r3, r0
 80002d8:	73fb      	strb	r3, [r7, #15]
 if (status != RY_FLASH_OK) return status;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <RY_FLASH_ProgramHalfWord+0x40>
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	e01d      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 RY_FLASH_CR |= RY_FLASH_CR_PG;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
 *(volatile uint16_t*)address = data;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	887a      	ldrh	r2, [r7, #2]
 80002f4:	801a      	strh	r2, [r3, #0]
 status = RY_FLASH_WaitForLastOperation();
 80002f6:	f7ff ff51 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
 RY_FLASH_CR &= ~RY_FLASH_CR_PG;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0b      	ldr	r2, [pc, #44]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
 RY_FLASH_Lock();
 800030a:	f7ff ff39 	bl	8000180 <RY_FLASH_Lock>
 if (*(volatile uint16_t*)address != data) return RY_FLASH_ERR_VERIFY;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	887a      	ldrh	r2, [r7, #2]
 8000316:	429a      	cmp	r2, r3
 8000318:	d001      	beq.n	800031e <RY_FLASH_ProgramHalfWord+0x7a>
 800031a:	2307      	movs	r3, #7
 800031c:	e000      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 return status;
 800031e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	08004000 	.word	0x08004000
 800032c:	0801ffff 	.word	0x0801ffff
 8000330:	40022010 	.word	0x40022010

08000334 <RY_FLASH_ProgramBuffer>:
RY_FLASH_Status RY_FLASH_ProgramBuffer(uint32_t address, const uint8_t *data, uint32_t length) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 if ((address % 2) != 0 || address < APP_START_ADDR || (address + length) > APP_END_ADDR)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4a23      	ldr	r2, [pc, #140]	@ (80003dc <RY_FLASH_ProgramBuffer+0xa8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d305      	bcc.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <RY_FLASH_ProgramBuffer+0xac>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d901      	bls.n	8000362 <RY_FLASH_ProgramBuffer+0x2e>
 return RY_FLASH_ERR_ALIGN;
 800035e:	2304      	movs	r3, #4
 8000360:	e038      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 for (uint32_t i = 0; i < length; i += 2) {
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e030      	b.n	80003ca <RY_FLASH_ProgramBuffer+0x96>
 uint16_t halfword;
 if (i + 1 < length) {
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d910      	bls.n	8000394 <RY_FLASH_ProgramBuffer+0x60>
 halfword = data[i] | (data[i + 1] << 8);
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b21a      	sxth	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	68b9      	ldr	r1, [r7, #8]
 8000382:	440b      	add	r3, r1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b21b      	sxth	r3, r3
 8000388:	021b      	lsls	r3, r3, #8
 800038a:	b21b      	sxth	r3, r3
 800038c:	4313      	orrs	r3, r2
 800038e:	b21b      	sxth	r3, r3
 8000390:	827b      	strh	r3, [r7, #18]
 8000392:	e008      	b.n	80003a6 <RY_FLASH_ProgramBuffer+0x72>
 } else {
 halfword = data[i] | (0xFF << 8); // Pad last byte
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b21b      	sxth	r3, r3
 800039e:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	827b      	strh	r3, [r7, #18]
 }
 RY_FLASH_Status status = RY_FLASH_ProgramHalfWord(address + i, halfword);
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	4413      	add	r3, r2
 80003ac:	8a7a      	ldrh	r2, [r7, #18]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff77 	bl	80002a4 <RY_FLASH_ProgramHalfWord>
 80003b6:	4603      	mov	r3, r0
 80003b8:	747b      	strb	r3, [r7, #17]
 if (status != RY_FLASH_OK) return status;
 80003ba:	7c7b      	ldrb	r3, [r7, #17]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <RY_FLASH_ProgramBuffer+0x90>
 80003c0:	7c7b      	ldrb	r3, [r7, #17]
 80003c2:	e007      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 for (uint32_t i = 0; i < length; i += 2) {
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3302      	adds	r3, #2
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3ca      	bcc.n	8000368 <RY_FLASH_ProgramBuffer+0x34>
 }
 return RY_FLASH_OK;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	08004000 	.word	0x08004000
 80003e0:	08020000 	.word	0x08020000

080003e4 <RY_FLASH_EraseAppRegion>:
RY_FLASH_Status RY_FLASH_EraseAppRegion(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += RY_FLASH_PAGE_SIZE) {
 80003ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <RY_FLASH_EraseAppRegion+0x3c>)
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e00d      	b.n	800040c <RY_FLASH_EraseAppRegion+0x28>
 RY_FLASH_Status status = RY_FLASH_ErasePage(addr);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff11 	bl	8000218 <RY_FLASH_ErasePage>
 80003f6:	4603      	mov	r3, r0
 80003f8:	70fb      	strb	r3, [r7, #3]
 if (status != RY_FLASH_OK) return status;
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <RY_FLASH_EraseAppRegion+0x20>
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	e008      	b.n	8000416 <RY_FLASH_EraseAppRegion+0x32>
 for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += RY_FLASH_PAGE_SIZE) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a05      	ldr	r2, [pc, #20]	@ (8000424 <RY_FLASH_EraseAppRegion+0x40>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d9ed      	bls.n	80003f0 <RY_FLASH_EraseAppRegion+0xc>
 }
 return RY_FLASH_OK;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	08004000 	.word	0x08004000
 8000424:	0801ffff 	.word	0x0801ffff

08000428 <LED_INIT>:
// RCC registers
#define RCC_APB2ENR     (*(volatile uint32_t *)(RCC_BASE + 0x18))
// GPIOB registers
#define GPIOB_CRL       (*(volatile uint32_t *)(GPIOB_BASE + 0x00))
#define GPIOB_ODR       (*(volatile uint32_t *)(GPIOB_BASE + 0x0C))
void LED_INIT(){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    RCC_APB2ENR |= (1 << 3); // IOPBEN
 800042c:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <LED_INIT+0x30>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <LED_INIT+0x30>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6013      	str	r3, [r2, #0]
	 GPIOB_CRL &= ~(0xF << (2 * 4));
 8000438:	4b08      	ldr	r3, [pc, #32]	@ (800045c <LED_INIT+0x34>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a07      	ldr	r2, [pc, #28]	@ (800045c <LED_INIT+0x34>)
 800043e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000442:	6013      	str	r3, [r2, #0]
	    GPIOB_CRL |=  (0x2 << 8);     // MODE2 = 10 (Output 2 MHz), CNF2 = 00 (General purpose output push-pull)
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <LED_INIT+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <LED_INIT+0x34>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021018 	.word	0x40021018
 800045c:	40010c00 	.word	0x40010c00

08000460 <TOGGLE_LED>:
void TOGGLE_LED(){
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
    GPIOB_ODR ^=(1 << 2); ;
 8000464:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <TOGGLE_LED+0x18>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a03      	ldr	r2, [pc, #12]	@ (8000478 <TOGGLE_LED+0x18>)
 800046a:	f083 0304 	eor.w	r3, r3, #4
 800046e:	6013      	str	r3, [r2, #0]
	}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40010c0c 	.word	0x40010c0c

0800047c <RCC_SYSTEM_CLOCK_HSE>:
/*********************************************************************************
 *                                                                                *
 *              FUNCTION_NAME:RCC_RY_SYSTEM_CLOCK_HSE[3-25MHZ]                                *
 *                                                                                *
 * ********************************************************************************/
void RCC_SYSTEM_CLOCK_HSE(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    // 1. Enable HSE
    RCC_RY->CRbits.HSEON = 1;
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 8000482:	6813      	ldr	r3, [r2, #0]
 8000484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000488:	6013      	str	r3, [r2, #0]
    while (!RCC_RY->CRbits.HSERDY);   // Wait for HSE ready
 800048a:	bf00      	nop
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f8      	beq.n	800048c <RCC_SYSTEM_CLOCK_HSE+0x10>
    // 2. Set RY_FLASH latency = 0 wait states (≤24MHz)
    //RY_FLASH_ACR &= ~0x7;
    //RY_FLASH_ACR |= 0x0;

    // 3. Select HSE as system clock
    RCC_RY->CFGRbits.SW = 0b01;       // SYSCLK = HSE
 800049a:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800049c:	6853      	ldr	r3, [r2, #4]
 800049e:	2101      	movs	r1, #1
 80004a0:	f361 0301 	bfi	r3, r1, #0, #2
 80004a4:	6053      	str	r3, [r2, #4]
    while (RCC_RY->CFGRbits.SWS != 0b01);  // Wait till HSE used
 80004a6:	bf00      	nop
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d1f8      	bne.n	80004a8 <RCC_SYSTEM_CLOCK_HSE+0x2c>
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <SetBaudRate>:
    	rx_buffer[rx_head] = data; rx_head = next;
    }
}

/* ==== Function Implementations ==== */
 UART_Status_t SetBaudRate(uint32_t baudrate) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    if (baudrate == 0) return UART_ERROR;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d101      	bne.n	80004d6 <SetBaudRate+0x12>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e01d      	b.n	8000512 <SetBaudRate+0x4e>
    uint32_t pclk = 8000000;
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <SetBaudRate+0x58>)
 80004d8:	60fb      	str	r3, [r7, #12]
    uint32_t RY_USARTdiv = (pclk + (baudrate / 2)) / baudrate;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	085a      	lsrs	r2, r3, #1
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	441a      	add	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e8:	60bb      	str	r3, [r7, #8]
    RY_USART1->BRR.BITS.DIV_Mantissa = (RY_USARTdiv >> 4) & 0xFFF;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	091b      	lsrs	r3, r3, #4
 80004ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000520 <SetBaudRate+0x5c>)
 80004f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004f4:	b299      	uxth	r1, r3
 80004f6:	6893      	ldr	r3, [r2, #8]
 80004f8:	f361 130f 	bfi	r3, r1, #4, #12
 80004fc:	6093      	str	r3, [r2, #8]
    RY_USART1->BRR.BITS.DIV_Fraction = RY_USARTdiv & 0xF;
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <SetBaudRate+0x5c>)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 030f 	and.w	r3, r3, #15
 8000506:	b2d9      	uxtb	r1, r3
 8000508:	6893      	ldr	r3, [r2, #8]
 800050a:	f361 0303 	bfi	r3, r1, #0, #4
 800050e:	6093      	str	r3, [r2, #8]
    return UART_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	007a1200 	.word	0x007a1200
 8000520:	40013800 	.word	0x40013800

08000524 <Init>:
 UART_Status_t Init(uint32_t baudrate) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    RCC_APB2ENR |= RCC_IOPAEN | RCC_RY_USART1EN;
 800052c:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <Init+0x7c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <Init+0x7c>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6013      	str	r3, [r2, #0]

    // PA9 = TX: AF Push-Pull
    GPIOA_CRH &= ~(0xF << 4);
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <Init+0x80>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a18      	ldr	r2, [pc, #96]	@ (80005a4 <Init+0x80>)
 8000542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000546:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |=  (0xB << 4); // MODE9=11, CNF9=10
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <Init+0x80>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <Init+0x80>)
 800054e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000552:	6013      	str	r3, [r2, #0]

    // PA10 = RX: Input Floating
    GPIOA_CRH &= ~(0xF << 8);
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <Init+0x80>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <Init+0x80>)
 800055a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800055e:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |=  (0x4 << 8); // MODE10=00, CNF10=01
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <Init+0x80>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <Init+0x80>)
 8000566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800056a:	6013      	str	r3, [r2, #0]

    RY_USART1->CR1.ALL = 0;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <Init+0x84>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
    SetBaudRate(baudrate);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffa6 	bl	80004c4 <SetBaudRate>
    RY_USART1->CR1.BITS.RE = 1;
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <Init+0x84>)
 800057a:	68d3      	ldr	r3, [r2, #12]
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	60d3      	str	r3, [r2, #12]
    RY_USART1->CR1.BITS.TE = 1;
 8000582:	4a09      	ldr	r2, [pc, #36]	@ (80005a8 <Init+0x84>)
 8000584:	68d3      	ldr	r3, [r2, #12]
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	60d3      	str	r3, [r2, #12]
    RY_USART1->CR1.BITS.UE = 1;
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <Init+0x84>)
 800058e:	68d3      	ldr	r3, [r2, #12]
 8000590:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000594:	60d3      	str	r3, [r2, #12]

    return UART_OK;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021018 	.word	0x40021018
 80005a4:	40010804 	.word	0x40010804
 80005a8:	40013800 	.word	0x40013800

080005ac <SendByte>:
UART_Status_t SendByte(uint8_t byte) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    while (!RY_USART1->SR.BITS.TXE);
 80005b6:	bf00      	nop
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <SendByte+0x38>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <SendByte+0xc>
    RY_USART1->DR.BITS.DR = byte;
 80005c6:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <SendByte+0x38>)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005ce:	b299      	uxth	r1, r3
 80005d0:	6853      	ldr	r3, [r2, #4]
 80005d2:	f361 0308 	bfi	r3, r1, #0, #9
 80005d6:	6053      	str	r3, [r2, #4]
    return UART_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40013800 	.word	0x40013800

080005e8 <uart_recv>:
 UART_Status_t ReceiveByte(uint8_t *byte) {
    while (!RY_USART1->SR.BITS.RXNE);
    *byte = RY_USART1->DR.BITS.DR & 0xFF;
    return UART_OK;
}
 uint8_t uart_recv() {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
    while (!RY_USART1->SR.BITS.RXNE);
 80005ee:	bf00      	nop
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <uart_recv+0x30>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f8      	beq.n	80005f0 <uart_recv+0x8>
    uint8_t byte = RY_USART1->DR.BITS.DR & 0xFF;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <uart_recv+0x30>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000606:	b29b      	uxth	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
    return byte;
 800060a:	79fb      	ldrb	r3, [r7, #7]
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40013800 	.word	0x40013800

0800061c <jump_to_application>:
#include"UART_DECLARATIONS.h"
#include "stm32f1xx.h"  // Or "core_cm3.h" if using raw CMSIS
#define APP_ADDRESS 0x08004000
#define SCB_VTOR (*(volatile uint32_t*)0xE000ED08)
#define DELAY_VALUE_ADDR   0x0801FC00
void jump_to_application(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
    // 1. Read the MSP and Reset Handler from application vector table
    uint32_t app_stack = *(volatile uint32_t*)(APP_ADDRESS);
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <jump_to_application+0x34>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	60fb      	str	r3, [r7, #12]
    uint32_t app_reset = *(volatile uint32_t*)(APP_ADDRESS + 4);
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <jump_to_application+0x38>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60bb      	str	r3, [r7, #8]

    // 2. Set the Vector Table base
    SCB->VTOR = APP_ADDRESS;
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <jump_to_application+0x3c>)
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <jump_to_application+0x34>)
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f383 8808 	msr	MSP, r3
}
 800063e:	bf00      	nop

    // 3. Set the Main Stack Pointer
    __set_MSP(app_stack);

    // 4. Jump to the application's Reset Handler
    void (*app_entry)(void) = (void*)app_reset;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	607b      	str	r3, [r7, #4]
    app_entry();
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4798      	blx	r3
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08004000 	.word	0x08004000
 8000654:	08004004 	.word	0x08004004
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <main>:
#define CMD_SIZE   0x10
#define CMD_BEGIN  0x01
#define CMD_DATA   0x02
#define CMD_END    0x03
volatile uint32_t firmware_size = 0;
int main(){
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b0c5      	sub	sp, #276	@ 0x114
 8000660:	af00      	add	r7, sp, #0
	RCC_SYSTEM_CLOCK_HSE();
 8000662:	f7ff ff0b 	bl	800047c <RCC_SYSTEM_CLOCK_HSE>
	//RCC_SYSTEM_CLOCK_HSEPLL_72MHZ();
	LED_INIT();
 8000666:	f7ff fedf 	bl	8000428 <LED_INIT>
			for(int i=0;i<8;i++){
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000670:	e014      	b.n	800069c <main+0x40>
				TOGGLE_LED();
 8000672:	f7ff fef5 	bl	8000460 <TOGGLE_LED>
				for(int j=0;j<100000;j++);
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800067c:	e004      	b.n	8000688 <main+0x2c>
 800067e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000682:	3301      	adds	r3, #1
 8000684:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000688:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800068c:	4a58      	ldr	r2, [pc, #352]	@ (80007f0 <main+0x194>)
 800068e:	4293      	cmp	r3, r2
 8000690:	ddf5      	ble.n	800067e <main+0x22>
			for(int i=0;i<8;i++){
 8000692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000696:	3301      	adds	r3, #1
 8000698:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800069c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	dde6      	ble.n	8000672 <main+0x16>
			}
	Init(BAUD_RATE);
 80006a4:	f44f 5034 	mov.w	r0, #11520	@ 0x2d00
 80006a8:	f7ff ff3c 	bl	8000524 <Init>
	//uart1_init();
  //  SYSTEM_CLOCK_TEST();
	while(1){
        uint8_t cmd = uart_recv();
 80006ac:	f7ff ff9c 	bl	80005e8 <uart_recv>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

        if (cmd == CMD_HELLO) {
 80006b6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80006ba:	2b55      	cmp	r3, #85	@ 0x55
 80006bc:	d103      	bne.n	80006c6 <main+0x6a>
        	SendByte(CMD_ACK);
 80006be:	20aa      	movs	r0, #170	@ 0xaa
 80006c0:	f7ff ff74 	bl	80005ac <SendByte>
 80006c4:	e7f2      	b.n	80006ac <main+0x50>
        }

        else if (cmd == CMD_SIZE) {
 80006c6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d133      	bne.n	8000736 <main+0xda>
            firmware_size = uart_recv();          // MSB
 80006ce:	f7ff ff8b 	bl	80005e8 <uart_recv>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b47      	ldr	r3, [pc, #284]	@ (80007f4 <main+0x198>)
 80006d8:	601a      	str	r2, [r3, #0]
            firmware_size <<= 8; firmware_size |= uart_recv();
 80006da:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <main+0x198>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	4a44      	ldr	r2, [pc, #272]	@ (80007f4 <main+0x198>)
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	f7ff ff80 	bl	80005e8 <uart_recv>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <main+0x198>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	4a40      	ldr	r2, [pc, #256]	@ (80007f4 <main+0x198>)
 80006f4:	6013      	str	r3, [r2, #0]
            firmware_size <<= 8; firmware_size |= uart_recv();
 80006f6:	4b3f      	ldr	r3, [pc, #252]	@ (80007f4 <main+0x198>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	4a3d      	ldr	r2, [pc, #244]	@ (80007f4 <main+0x198>)
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	f7ff ff72 	bl	80005e8 <uart_recv>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b3a      	ldr	r3, [pc, #232]	@ (80007f4 <main+0x198>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4313      	orrs	r3, r2
 800070e:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <main+0x198>)
 8000710:	6013      	str	r3, [r2, #0]
            firmware_size <<= 8; firmware_size |= uart_recv();
 8000712:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <main+0x198>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	4a36      	ldr	r2, [pc, #216]	@ (80007f4 <main+0x198>)
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	f7ff ff64 	bl	80005e8 <uart_recv>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <main+0x198>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4313      	orrs	r3, r2
 800072a:	4a32      	ldr	r2, [pc, #200]	@ (80007f4 <main+0x198>)
 800072c:	6013      	str	r3, [r2, #0]
            SendByte(CMD_ACK);
 800072e:	20aa      	movs	r0, #170	@ 0xaa
 8000730:	f7ff ff3c 	bl	80005ac <SendByte>
 8000734:	e7ba      	b.n	80006ac <main+0x50>
        }

        else if (cmd == CMD_BEGIN) {
 8000736:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800073a:	2b01      	cmp	r3, #1
 800073c:	d105      	bne.n	800074a <main+0xee>
        	RY_FLASH_EraseAppRegion();
 800073e:	f7ff fe51 	bl	80003e4 <RY_FLASH_EraseAppRegion>
            SendByte(CMD_ACK);
 8000742:	20aa      	movs	r0, #170	@ 0xaa
 8000744:	f7ff ff32 	bl	80005ac <SendByte>
 8000748:	e7b0      	b.n	80006ac <main+0x50>
        }

        else if (cmd == CMD_DATA) {
 800074a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800074e:	2b02      	cmp	r3, #2
 8000750:	d13e      	bne.n	80007d0 <main+0x174>
            uint16_t addr = uart_recv() << 8;
 8000752:	f7ff ff49 	bl	80005e8 <uart_recv>
 8000756:	4603      	mov	r3, r0
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
            addr |= uart_recv();
 800075e:	f7ff ff43 	bl	80005e8 <uart_recv>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 800076a:	4313      	orrs	r3, r2
 800076c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
            uint8_t len = uart_recv();
 8000770:	f7ff ff3a 	bl	80005e8 <uart_recv>
 8000774:	4603      	mov	r3, r0
 8000776:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

            uint8_t buffer[256];
            for (uint8_t i = 0; i < len; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000780:	e00f      	b.n	80007a2 <main+0x146>
                buffer[i] = uart_recv();
 8000782:	f897 4107 	ldrb.w	r4, [r7, #263]	@ 0x107
 8000786:	f7ff ff2f 	bl	80005e8 <uart_recv>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000792:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000796:	551a      	strb	r2, [r3, r4]
            for (uint8_t i = 0; i < len; i++) {
 8000798:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800079c:	3301      	adds	r3, #1
 800079e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80007a2:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 80007a6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3e9      	bcc.n	8000782 <main+0x126>
            }

            RY_FLASH_ProgramBuffer(APP_ADDRESS + addr, buffer, len);
 80007ae:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 80007b2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80007b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80007ba:	4618      	mov	r0, r3
 80007bc:	f897 2103 	ldrb.w	r2, [r7, #259]	@ 0x103
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	f7ff fdb6 	bl	8000334 <RY_FLASH_ProgramBuffer>
            SendByte(CMD_ACK);
 80007c8:	20aa      	movs	r0, #170	@ 0xaa
 80007ca:	f7ff feef 	bl	80005ac <SendByte>
 80007ce:	e76d      	b.n	80006ac <main+0x50>
        }

        else if (cmd == CMD_END) {
 80007d0:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	f47f af69 	bne.w	80006ac <main+0x50>
        	SendByte(CMD_ACK);
 80007da:	20aa      	movs	r0, #170	@ 0xaa
 80007dc:	f7ff fee6 	bl	80005ac <SendByte>
            HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e4:	f000 f87c 	bl	80008e0 <HAL_Delay>
            jump_to_application();  // jump to app at 0x08004000
 80007e8:	f7ff ff18 	bl	800061c <jump_to_application>
	while(1){
 80007ec:	e75e      	b.n	80006ac <main+0x50>
 80007ee:	bf00      	nop
 80007f0:	0001869f 	.word	0x0001869f
 80007f4:	20000020 	.word	0x20000020

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f82e 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff fff8 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000862:	490c      	ldr	r1, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000864:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000878:	4c09      	ldr	r4, [pc, #36]	@ (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 f84f 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fee7 	bl	800065c <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000898:	08000990 	.word	0x08000990
  ldr r2, =_sbss
 800089c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008a0:	20000028 	.word	0x20000028

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	@ (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000024 	.word	0x20000024

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	@ (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000024 	.word	0x20000024

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff0 	bl	80008cc <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffe0 	bl	80008cc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	2600      	movs	r6, #0
 800092c:	4d0c      	ldr	r5, [pc, #48]	@ (8000960 <__libc_init_array+0x38>)
 800092e:	4c0d      	ldr	r4, [pc, #52]	@ (8000964 <__libc_init_array+0x3c>)
 8000930:	1b64      	subs	r4, r4, r5
 8000932:	10a4      	asrs	r4, r4, #2
 8000934:	42a6      	cmp	r6, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	f000 f81a 	bl	8000970 <_init>
 800093c:	2600      	movs	r6, #0
 800093e:	4d0a      	ldr	r5, [pc, #40]	@ (8000968 <__libc_init_array+0x40>)
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <__libc_init_array+0x44>)
 8000942:	1b64      	subs	r4, r4, r5
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	42a6      	cmp	r6, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000950:	4798      	blx	r3
 8000952:	3601      	adds	r6, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f855 3b04 	ldr.w	r3, [r5], #4
 800095a:	4798      	blx	r3
 800095c:	3601      	adds	r6, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	08000988 	.word	0x08000988
 8000964:	08000988 	.word	0x08000988
 8000968:	08000988 	.word	0x08000988
 800096c:	0800098c 	.word	0x0800098c

08000970 <_init>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr

0800097c <_fini>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr
