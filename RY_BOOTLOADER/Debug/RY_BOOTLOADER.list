
RY_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cc4  08000cc4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cc4  08000cc4  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000cc4  08000cc4  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000cc4  08000cc4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc4  08000cc4  00001cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cc8  08000cc8  00001cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000ccc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000cd8  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000cd8  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005980  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb2  00000000  00000000  000079b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00008968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d0  00000000  00000000  00008d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8c  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000524e  00000000  00000000  0001fac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080786  00000000  00000000  00024d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d44  00000000  00000000  000a54dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a6220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000cac 	.word	0x08000cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000cac 	.word	0x08000cac

0800014c <RY_FLASH_Unlock>:
#define RY_FLASH_AR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x14))
#define RY_FLASH_OBR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x1C))
#define RY_FLASH_WRPR (*(volatile uint32_t *)(RY_FLASH_BASE + 0x20))


static void RY_FLASH_Unlock(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 if (RY_FLASH_CR & RY_FLASH_CR_LOCK) {
 8000150:	4b07      	ldr	r3, [pc, #28]	@ (8000170 <RY_FLASH_Unlock+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000158:	2b00      	cmp	r3, #0
 800015a:	d005      	beq.n	8000168 <RY_FLASH_Unlock+0x1c>
 RY_FLASH_KEYR = RY_FLASH_KEY1;
 800015c:	4b05      	ldr	r3, [pc, #20]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <RY_FLASH_Unlock+0x2c>)
 8000160:	601a      	str	r2, [r3, #0]
 RY_FLASH_KEYR = RY_FLASH_KEY2;
 8000162:	4b04      	ldr	r3, [pc, #16]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <RY_FLASH_Unlock+0x30>)
 8000166:	601a      	str	r2, [r3, #0]
 }
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40022010 	.word	0x40022010
 8000174:	40022004 	.word	0x40022004
 8000178:	45670123 	.word	0x45670123
 800017c:	cdef89ab 	.word	0xcdef89ab

08000180 <RY_FLASH_Lock>:
static void RY_FLASH_Lock(void) {
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
 RY_FLASH_CR |= RY_FLASH_CR_LOCK;
 8000184:	4b04      	ldr	r3, [pc, #16]	@ (8000198 <RY_FLASH_Lock+0x18>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a03      	ldr	r2, [pc, #12]	@ (8000198 <RY_FLASH_Lock+0x18>)
 800018a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	40022010 	.word	0x40022010

0800019c <RY_FLASH_WaitForLastOperation>:
static RY_FLASH_Status RY_FLASH_WaitForLastOperation(void) {
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 uint32_t timeout = RY_FLASH_TIMEOUT;
 80001a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000210 <RY_FLASH_WaitForLastOperation+0x74>)
 80001a4:	607b      	str	r3, [r7, #4]
 while ((RY_FLASH_SR & RY_FLASH_SR_BSY) && --timeout);
 80001a6:	bf00      	nop
 80001a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d005      	beq.n	80001c0 <RY_FLASH_WaitForLastOperation+0x24>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3b01      	subs	r3, #1
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d1f3      	bne.n	80001a8 <RY_FLASH_WaitForLastOperation+0xc>
 if (timeout == 0) return RY_FLASH_ERR_TIMEOUT;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d101      	bne.n	80001ca <RY_FLASH_WaitForLastOperation+0x2e>
 80001c6:	2302      	movs	r3, #2
 80001c8:	e01c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_WRPRTERR) return RY_FLASH_ERR_WRPRT;
 80001ca:	4b12      	ldr	r3, [pc, #72]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f003 0310 	and.w	r3, r3, #16
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <RY_FLASH_WaitForLastOperation+0x3e>
 80001d6:	2306      	movs	r3, #6
 80001d8:	e014      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_PGERR) return RY_FLASH_ERR_PG;
 80001da:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0304 	and.w	r3, r3, #4
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <RY_FLASH_WaitForLastOperation+0x4e>
 80001e6:	2305      	movs	r3, #5
 80001e8:	e00c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 if (RY_FLASH_SR & RY_FLASH_SR_EOP) RY_FLASH_SR |= RY_FLASH_SR_EOP;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f003 0320 	and.w	r3, r3, #32
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <RY_FLASH_WaitForLastOperation+0x66>
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	6013      	str	r3, [r2, #0]
 return RY_FLASH_OK;
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000186a0 	.word	0x000186a0
 8000214:	4002200c 	.word	0x4002200c

08000218 <RY_FLASH_ErasePage>:
RY_FLASH_Status RY_FLASH_ErasePage(uint32_t address) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 if (address < APP_START_ADDR || address >= APP_END_ADDR || address % RY_FLASH_PAGE_SIZE != 0)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <RY_FLASH_ErasePage+0x7c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d308      	bcc.n	800023a <RY_FLASH_ErasePage+0x22>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a1b      	ldr	r2, [pc, #108]	@ (8000298 <RY_FLASH_ErasePage+0x80>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d804      	bhi.n	800023a <RY_FLASH_ErasePage+0x22>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <RY_FLASH_ErasePage+0x26>
 return RY_FLASH_ERR_ADDR;
 800023a:	2303      	movs	r3, #3
 800023c:	e026      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 RY_FLASH_Unlock();
 800023e:	f7ff ff85 	bl	800014c <RY_FLASH_Unlock>
 RY_FLASH_Status status = RY_FLASH_WaitForLastOperation();
 8000242:	f7ff ffab 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000246:	4603      	mov	r3, r0
 8000248:	73fb      	strb	r3, [r7, #15]
 if (status != RY_FLASH_OK) return status;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <RY_FLASH_ErasePage+0x3c>
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	e01b      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 RY_FLASH_CR |= RY_FLASH_CR_PER;
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a10      	ldr	r2, [pc, #64]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6013      	str	r3, [r2, #0]
 RY_FLASH_AR = address;
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <RY_FLASH_ErasePage+0x88>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6013      	str	r3, [r2, #0]
 RY_FLASH_CR |= RY_FLASH_CR_STRT;
 8000266:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6013      	str	r3, [r2, #0]
 status = RY_FLASH_WaitForLastOperation();
 8000272:	f7ff ff93 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000276:	4603      	mov	r3, r0
 8000278:	73fb      	strb	r3, [r7, #15]
 RY_FLASH_CR &= ~RY_FLASH_CR_PER;
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000280:	f023 0302 	bic.w	r3, r3, #2
 8000284:	6013      	str	r3, [r2, #0]
 RY_FLASH_Lock();
 8000286:	f7ff ff7b 	bl	8000180 <RY_FLASH_Lock>
 return status;
 800028a:	7bfb      	ldrb	r3, [r7, #15]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08004000 	.word	0x08004000
 8000298:	0801ffff 	.word	0x0801ffff
 800029c:	40022010 	.word	0x40022010
 80002a0:	40022014 	.word	0x40022014

080002a4 <RY_FLASH_ProgramHalfWord>:
static RY_FLASH_Status RY_FLASH_ProgramHalfWord(uint32_t address, uint16_t data) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	807b      	strh	r3, [r7, #2]
 if ((address % 2) != 0 || address < APP_START_ADDR || address >= APP_END_ADDR)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d107      	bne.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000328 <RY_FLASH_ProgramHalfWord+0x84>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d303      	bcc.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a19      	ldr	r2, [pc, #100]	@ (800032c <RY_FLASH_ProgramHalfWord+0x88>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d901      	bls.n	80002ce <RY_FLASH_ProgramHalfWord+0x2a>
 return RY_FLASH_ERR_ALIGN;
 80002ca:	2304      	movs	r3, #4
 80002cc:	e028      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 RY_FLASH_Unlock();
 80002ce:	f7ff ff3d 	bl	800014c <RY_FLASH_Unlock>
 RY_FLASH_Status status = RY_FLASH_WaitForLastOperation();
 80002d2:	f7ff ff63 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002d6:	4603      	mov	r3, r0
 80002d8:	73fb      	strb	r3, [r7, #15]
 if (status != RY_FLASH_OK) return status;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <RY_FLASH_ProgramHalfWord+0x40>
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	e01d      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 RY_FLASH_CR |= RY_FLASH_CR_PG;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
 *(volatile uint16_t*)address = data;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	887a      	ldrh	r2, [r7, #2]
 80002f4:	801a      	strh	r2, [r3, #0]
 status = RY_FLASH_WaitForLastOperation();
 80002f6:	f7ff ff51 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
 RY_FLASH_CR &= ~RY_FLASH_CR_PG;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0b      	ldr	r2, [pc, #44]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
 RY_FLASH_Lock();
 800030a:	f7ff ff39 	bl	8000180 <RY_FLASH_Lock>
 if (*(volatile uint16_t*)address != data) return RY_FLASH_ERR_VERIFY;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	887a      	ldrh	r2, [r7, #2]
 8000316:	429a      	cmp	r2, r3
 8000318:	d001      	beq.n	800031e <RY_FLASH_ProgramHalfWord+0x7a>
 800031a:	2307      	movs	r3, #7
 800031c:	e000      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 return status;
 800031e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	08004000 	.word	0x08004000
 800032c:	0801ffff 	.word	0x0801ffff
 8000330:	40022010 	.word	0x40022010

08000334 <RY_FLASH_ProgramBuffer>:
RY_FLASH_Status RY_FLASH_ProgramBuffer(uint32_t address, const uint8_t *data, uint32_t length) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 if ((address % 2) != 0 || address < APP_START_ADDR || (address + length) > APP_END_ADDR)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4a23      	ldr	r2, [pc, #140]	@ (80003dc <RY_FLASH_ProgramBuffer+0xa8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d305      	bcc.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <RY_FLASH_ProgramBuffer+0xac>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d901      	bls.n	8000362 <RY_FLASH_ProgramBuffer+0x2e>
 return RY_FLASH_ERR_ALIGN;
 800035e:	2304      	movs	r3, #4
 8000360:	e038      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 for (uint32_t i = 0; i < length; i += 2) {
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e030      	b.n	80003ca <RY_FLASH_ProgramBuffer+0x96>
 uint16_t halfword;
 if (i + 1 < length) {
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d910      	bls.n	8000394 <RY_FLASH_ProgramBuffer+0x60>
 halfword = data[i] | (data[i + 1] << 8);
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b21a      	sxth	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	68b9      	ldr	r1, [r7, #8]
 8000382:	440b      	add	r3, r1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b21b      	sxth	r3, r3
 8000388:	021b      	lsls	r3, r3, #8
 800038a:	b21b      	sxth	r3, r3
 800038c:	4313      	orrs	r3, r2
 800038e:	b21b      	sxth	r3, r3
 8000390:	827b      	strh	r3, [r7, #18]
 8000392:	e008      	b.n	80003a6 <RY_FLASH_ProgramBuffer+0x72>
 } else {
 halfword = data[i] | (0xFF << 8); // Pad last byte
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b21b      	sxth	r3, r3
 800039e:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	827b      	strh	r3, [r7, #18]
 }
 RY_FLASH_Status status = RY_FLASH_ProgramHalfWord(address + i, halfword);
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	4413      	add	r3, r2
 80003ac:	8a7a      	ldrh	r2, [r7, #18]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff77 	bl	80002a4 <RY_FLASH_ProgramHalfWord>
 80003b6:	4603      	mov	r3, r0
 80003b8:	747b      	strb	r3, [r7, #17]
 if (status != RY_FLASH_OK) return status;
 80003ba:	7c7b      	ldrb	r3, [r7, #17]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <RY_FLASH_ProgramBuffer+0x90>
 80003c0:	7c7b      	ldrb	r3, [r7, #17]
 80003c2:	e007      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 for (uint32_t i = 0; i < length; i += 2) {
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3302      	adds	r3, #2
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3ca      	bcc.n	8000368 <RY_FLASH_ProgramBuffer+0x34>
 }
 return RY_FLASH_OK;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	08004000 	.word	0x08004000
 80003e0:	08020000 	.word	0x08020000

080003e4 <RY_FLASH_EraseAppRegion>:
RY_FLASH_Status RY_FLASH_EraseAppRegion(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += RY_FLASH_PAGE_SIZE) {
 80003ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <RY_FLASH_EraseAppRegion+0x3c>)
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e00d      	b.n	800040c <RY_FLASH_EraseAppRegion+0x28>
 RY_FLASH_Status status = RY_FLASH_ErasePage(addr);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff11 	bl	8000218 <RY_FLASH_ErasePage>
 80003f6:	4603      	mov	r3, r0
 80003f8:	70fb      	strb	r3, [r7, #3]
 if (status != RY_FLASH_OK) return status;
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <RY_FLASH_EraseAppRegion+0x20>
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	e008      	b.n	8000416 <RY_FLASH_EraseAppRegion+0x32>
 for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += RY_FLASH_PAGE_SIZE) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a05      	ldr	r2, [pc, #20]	@ (8000424 <RY_FLASH_EraseAppRegion+0x40>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d9ed      	bls.n	80003f0 <RY_FLASH_EraseAppRegion+0xc>
 }
 return RY_FLASH_OK;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	08004000 	.word	0x08004000
 8000424:	0801ffff 	.word	0x0801ffff

08000428 <LED_INIT>:
// RCC registers
#define RCC_APB2ENR     (*(volatile uint32_t *)(RCC_BASE + 0x18))
// GPIOB registers
#define GPIOB_CRL       (*(volatile uint32_t *)(GPIOB_BASE + 0x00))
#define GPIOB_ODR       (*(volatile uint32_t *)(GPIOB_BASE + 0x0C))
void LED_INIT(){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
   // RCC_APB2ENR |= (1 << 3); // IOPBEN
	RY_RCC->APB2ENR.BITS.IOPBEN=1;
 800042c:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <LED_INIT+0x2c>)
 800042e:	6993      	ldr	r3, [r2, #24]
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	6193      	str	r3, [r2, #24]
	//GPIOB->CRL.ALL&=~(0XF<<(2*8));
	RY_GPIOB->CRL.BITS.CNF2=0b00;
 8000436:	4a08      	ldr	r2, [pc, #32]	@ (8000458 <LED_INIT+0x30>)
 8000438:	6813      	ldr	r3, [r2, #0]
 800043a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800043e:	6013      	str	r3, [r2, #0]
	RY_GPIOB->CRL.BITS.MODE2=0b10;
 8000440:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <LED_INIT+0x30>)
 8000442:	6813      	ldr	r3, [r2, #0]
 8000444:	2102      	movs	r1, #2
 8000446:	f361 2309 	bfi	r3, r1, #8, #2
 800044a:	6013      	str	r3, [r2, #0]



	// GPIOB_CRL &= ~(0xF << (2 * 4));
	 //   GPIOB_CRL |=  (0x2 << 8);     // MODE2 = 10 (Output 2 MHz), CNF2 = 00 (General purpose output push-pull)
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010c00 	.word	0x40010c00

0800045c <RCC_SYSTEM_CLOCK_HSE>:
/*********************************************************************************
 *                                                                                *
 *              FUNCTION_NAME:RCC_RY_SYSTEM_CLOCK_HSE[3-25MHZ]                                *
 *                                                                                *
 * ********************************************************************************/
void RCC_SYSTEM_CLOCK_HSE(){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
    // 1. Enable HSE
	RY_RCC->CR.BITS.HSEON = 1;
 8000460:	4a0f      	ldr	r2, [pc, #60]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000468:	6013      	str	r3, [r2, #0]
    while (!RY_RCC->CR.BITS.HSERDY);   // Wait for HSE ready
 800046a:	bf00      	nop
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <RCC_SYSTEM_CLOCK_HSE+0x10>
    // 2. Set RY_FLASH latency = 0 wait states (≤24MHz)
    //RY_FLASH_ACR &= ~0x7;
    //RY_FLASH_ACR |= 0x0;

    // 3. Select HSE as system clock
    RY_RCC->CFGR.BITS.SW = 0b01;       // SYSCLK = HSE
 800047a:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800047c:	6853      	ldr	r3, [r2, #4]
 800047e:	2101      	movs	r1, #1
 8000480:	f361 0301 	bfi	r3, r1, #0, #2
 8000484:	6053      	str	r3, [r2, #4]
    while (RY_RCC->CFGR.BITS.SWS != 0b01);  // Wait till HSE used
 8000486:	bf00      	nop
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b01      	cmp	r3, #1
 8000494:	d1f8      	bne.n	8000488 <RCC_SYSTEM_CLOCK_HSE+0x2c>
}/*
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <SetBaudRate>:
#define RCC_RY_USART1EN (1 << 14)

#define RCC_IOPAEN      (1 << 2)
/* ==== Function Implementations ==== */

 UART_Status_t SetBaudRate(uint32_t baudrate) {
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    if (baudrate == 0) return UART_ERROR;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d101      	bne.n	80004b6 <SetBaudRate+0x12>
 80004b2:	2301      	movs	r3, #1
 80004b4:	e01d      	b.n	80004f2 <SetBaudRate+0x4e>
    uint32_t pclk = 8000000;
 80004b6:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <SetBaudRate+0x58>)
 80004b8:	60fb      	str	r3, [r7, #12]
    uint32_t RY_USARTdiv = (pclk + (baudrate / 2)) / baudrate;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	085a      	lsrs	r2, r3, #1
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	441a      	add	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c8:	60bb      	str	r3, [r7, #8]
    RY_USART1->BRR.BITS.DIV_Mantissa = (RY_USARTdiv >> 4) & 0xFFF;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <SetBaudRate+0x5c>)
 80004d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004d4:	b299      	uxth	r1, r3
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	f361 130f 	bfi	r3, r1, #4, #12
 80004dc:	6093      	str	r3, [r2, #8]
    RY_USART1->BRR.BITS.DIV_Fraction = RY_USARTdiv & 0xF;
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <SetBaudRate+0x5c>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	f003 030f 	and.w	r3, r3, #15
 80004e6:	b2d9      	uxtb	r1, r3
 80004e8:	6893      	ldr	r3, [r2, #8]
 80004ea:	f361 0303 	bfi	r3, r1, #0, #4
 80004ee:	6093      	str	r3, [r2, #8]
    return UART_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	007a1200 	.word	0x007a1200
 8000500:	40013800 	.word	0x40013800

08000504 <UART1_INIT>:
UART_Status_t UART1_INIT(uint32_t baud_rate){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	RY_RCC->APB2ENR.BITS.USART1EN=0;
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <UART1_INIT+0xa8>)
 800050e:	6993      	ldr	r3, [r2, #24]
 8000510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000514:	6193      	str	r3, [r2, #24]
	RY_RCC->APB2ENR.BITS.USART1EN=1;
 8000516:	4a25      	ldr	r2, [pc, #148]	@ (80005ac <UART1_INIT+0xa8>)
 8000518:	6993      	ldr	r3, [r2, #24]
 800051a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800051e:	6193      	str	r3, [r2, #24]
	RY_RCC->APB2ENR.BITS.IOPAEN=0;
 8000520:	4a22      	ldr	r2, [pc, #136]	@ (80005ac <UART1_INIT+0xa8>)
 8000522:	6993      	ldr	r3, [r2, #24]
 8000524:	f023 0304 	bic.w	r3, r3, #4
 8000528:	6193      	str	r3, [r2, #24]
	RY_RCC->APB2ENR.BITS.IOPAEN=1;
 800052a:	4a20      	ldr	r2, [pc, #128]	@ (80005ac <UART1_INIT+0xa8>)
 800052c:	6993      	ldr	r3, [r2, #24]
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
	//GPIOA->CRH.REG&= ~(0xF << 4);
	RY_GPIOA->CRH.BITS.CNF9=0b10;
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <UART1_INIT+0xac>)
 8000536:	6853      	ldr	r3, [r2, #4]
 8000538:	2102      	movs	r1, #2
 800053a:	f361 1387 	bfi	r3, r1, #6, #2
 800053e:	6053      	str	r3, [r2, #4]
	RY_GPIOA->CRH.BITS.MODE9=0b11;
 8000540:	4a1b      	ldr	r2, [pc, #108]	@ (80005b0 <UART1_INIT+0xac>)
 8000542:	6853      	ldr	r3, [r2, #4]
 8000544:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000548:	6053      	str	r3, [r2, #4]
	RY_GPIOA->CRH.BITS.CNF10=0b01;
 800054a:	4a19      	ldr	r2, [pc, #100]	@ (80005b0 <UART1_INIT+0xac>)
 800054c:	6853      	ldr	r3, [r2, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	f361 238b 	bfi	r3, r1, #10, #2
 8000554:	6053      	str	r3, [r2, #4]
	RY_GPIOA->CRH.BITS.MODE10=0b00;
 8000556:	4a16      	ldr	r2, [pc, #88]	@ (80005b0 <UART1_INIT+0xac>)
 8000558:	6853      	ldr	r3, [r2, #4]
 800055a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800055e:	6053      	str	r3, [r2, #4]
	RY_USART1->CR1.BITS.UE=0;
 8000560:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <UART1_INIT+0xb0>)
 8000562:	68d3      	ldr	r3, [r2, #12]
 8000564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000568:	60d3      	str	r3, [r2, #12]
	RY_USART1->CR1.BITS.TE=0;
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <UART1_INIT+0xb0>)
 800056c:	68d3      	ldr	r3, [r2, #12]
 800056e:	f023 0308 	bic.w	r3, r3, #8
 8000572:	60d3      	str	r3, [r2, #12]
	RY_USART1->CR1.BITS.TE=1;
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <UART1_INIT+0xb0>)
 8000576:	68d3      	ldr	r3, [r2, #12]
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	60d3      	str	r3, [r2, #12]
	RY_USART1->CR1.BITS.RE=0;
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <UART1_INIT+0xb0>)
 8000580:	68d3      	ldr	r3, [r2, #12]
 8000582:	f023 0304 	bic.w	r3, r3, #4
 8000586:	60d3      	str	r3, [r2, #12]
	RY_USART1->CR1.BITS.RE=1;
 8000588:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <UART1_INIT+0xb0>)
 800058a:	68d3      	ldr	r3, [r2, #12]
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	60d3      	str	r3, [r2, #12]
	SetBaudRate(baud_rate);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff86 	bl	80004a4 <SetBaudRate>
	RY_USART1->CR1.BITS.UE=1;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <UART1_INIT+0xb0>)
 800059a:	68d3      	ldr	r3, [r2, #12]
 800059c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005a0:	60d3      	str	r3, [r2, #12]
	return UART_OK;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40013800 	.word	0x40013800

080005b8 <SendByte>:
UART_Status_t SendByte(uint8_t byte){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
    while (!RY_USART1->SR.BITS.TXE);
 80005c2:	bf00      	nop
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <SendByte+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f8      	beq.n	80005c4 <SendByte+0xc>
    RY_USART1->DR.BITS.DR = byte;
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <SendByte+0x38>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005da:	b299      	uxth	r1, r3
 80005dc:	6853      	ldr	r3, [r2, #4]
 80005de:	f361 0308 	bfi	r3, r1, #0, #9
 80005e2:	6053      	str	r3, [r2, #4]
    return UART_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40013800 	.word	0x40013800

080005f4 <uart_recv>:
UART_Status_t  ReceiveByte(uint8_t *byte){
    while (!RY_USART1->SR.BITS.RXNE);
    *byte = RY_USART1->DR.BITS.DR & 0xFF;
    return UART_OK;
}
uint8_t uart_recv(){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
    while (!RY_USART1->SR.BITS.RXNE);
 80005fa:	bf00      	nop
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <uart_recv+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f8      	beq.n	80005fc <uart_recv+0x8>
    uint8_t byte = RY_USART1->DR.BITS.DR & 0xFF;
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <uart_recv+0x30>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000612:	b29b      	uxth	r3, r3
 8000614:	71fb      	strb	r3, [r7, #7]
    return byte;
 8000616:	79fb      	ldrb	r3, [r7, #7]
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40013800 	.word	0x40013800

08000628 <SetBaudRate_USART2>:



UART_Status_t SetBaudRate_USART2(uint32_t baudrate) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
   if (baudrate == 0) return UART_ERROR;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <SetBaudRate_USART2+0x12>
 8000636:	2301      	movs	r3, #1
 8000638:	e01d      	b.n	8000676 <SetBaudRate_USART2+0x4e>
   uint32_t pclk = 8000000;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <SetBaudRate_USART2+0x58>)
 800063c:	60fb      	str	r3, [r7, #12]
   uint32_t RY_USARTdiv = (pclk + (baudrate / 2)) / baudrate;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	085a      	lsrs	r2, r3, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	441a      	add	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
   RY_USART2->BRR.BITS.DIV_Mantissa = (RY_USARTdiv >> 4) & 0xFFF;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <SetBaudRate_USART2+0x5c>)
 8000654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000658:	b299      	uxth	r1, r3
 800065a:	6893      	ldr	r3, [r2, #8]
 800065c:	f361 130f 	bfi	r3, r1, #4, #12
 8000660:	6093      	str	r3, [r2, #8]
   RY_USART2->BRR.BITS.DIV_Fraction = RY_USARTdiv & 0xF;
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <SetBaudRate_USART2+0x5c>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	b2d9      	uxtb	r1, r3
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	f361 0303 	bfi	r3, r1, #0, #4
 8000672:	6093      	str	r3, [r2, #8]
   return UART_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	007a1200 	.word	0x007a1200
 8000684:	40004400 	.word	0x40004400

08000688 <UART2_INIT>:
UART_Status_t UART2_INIT(uint32_t baud_rate) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    // Enable USART2 and GPIOA clocks
    RY_RCC->APB1ENR.BITS.USART2EN = 0;
 8000690:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <UART2_INIT+0xa8>)
 8000692:	69d3      	ldr	r3, [r2, #28]
 8000694:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000698:	61d3      	str	r3, [r2, #28]
    RY_RCC->APB1ENR.BITS.USART2EN = 1;
 800069a:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <UART2_INIT+0xa8>)
 800069c:	69d3      	ldr	r3, [r2, #28]
 800069e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a2:	61d3      	str	r3, [r2, #28]
    RY_RCC->APB2ENR.BITS.IOPAEN = 0;
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <UART2_INIT+0xa8>)
 80006a6:	6993      	ldr	r3, [r2, #24]
 80006a8:	f023 0304 	bic.w	r3, r3, #4
 80006ac:	6193      	str	r3, [r2, #24]
    RY_RCC->APB2ENR.BITS.IOPAEN = 1;
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <UART2_INIT+0xa8>)
 80006b0:	6993      	ldr	r3, [r2, #24]
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
    // Configure PA2 (TX) as Alternate function push-pull, 50MHz
    RY_GPIOA->CRL.BITS.CNF2 = 0b10;  // AF Push-Pull
 80006b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <UART2_INIT+0xac>)
 80006ba:	6813      	ldr	r3, [r2, #0]
 80006bc:	2102      	movs	r1, #2
 80006be:	f361 238b 	bfi	r3, r1, #10, #2
 80006c2:	6013      	str	r3, [r2, #0]
    RY_GPIOA->CRL.BITS.MODE2 = 0b11; // Output mode, max speed 50 MHz
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <UART2_INIT+0xac>)
 80006c6:	6813      	ldr	r3, [r2, #0]
 80006c8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80006cc:	6013      	str	r3, [r2, #0]
    // Configure PA3 (RX) as Input floating
    RY_GPIOA->CRL.BITS.CNF3 = 0b01;  // Floating input
 80006ce:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <UART2_INIT+0xac>)
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	2101      	movs	r1, #1
 80006d4:	f361 338f 	bfi	r3, r1, #14, #2
 80006d8:	6013      	str	r3, [r2, #0]
    RY_GPIOA->CRL.BITS.MODE3 = 0b00; // Input mode
 80006da:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <UART2_INIT+0xac>)
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006e2:	6013      	str	r3, [r2, #0]
    // Disable USART2 before configuration
    RY_USART2->CR1.BITS.UE = 0;
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <UART2_INIT+0xb0>)
 80006e6:	68d3      	ldr	r3, [r2, #12]
 80006e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006ec:	60d3      	str	r3, [r2, #12]
    // Enable Transmitter and Receiver
    RY_USART2->CR1.BITS.TE = 0;
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <UART2_INIT+0xb0>)
 80006f0:	68d3      	ldr	r3, [r2, #12]
 80006f2:	f023 0308 	bic.w	r3, r3, #8
 80006f6:	60d3      	str	r3, [r2, #12]
    RY_USART2->CR1.BITS.TE = 1;
 80006f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <UART2_INIT+0xb0>)
 80006fa:	68d3      	ldr	r3, [r2, #12]
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	60d3      	str	r3, [r2, #12]
    RY_USART2->CR1.BITS.RE = 0;
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <UART2_INIT+0xb0>)
 8000704:	68d3      	ldr	r3, [r2, #12]
 8000706:	f023 0304 	bic.w	r3, r3, #4
 800070a:	60d3      	str	r3, [r2, #12]
    RY_USART2->CR1.BITS.RE = 1;
 800070c:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <UART2_INIT+0xb0>)
 800070e:	68d3      	ldr	r3, [r2, #12]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	60d3      	str	r3, [r2, #12]
    // Set baud rate
    SetBaudRate_USART2(baud_rate); // <- You must write this for USART2
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff86 	bl	8000628 <SetBaudRate_USART2>
    // Enable USART2
    RY_USART2->CR1.BITS.UE = 1;
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <UART2_INIT+0xb0>)
 800071e:	68d3      	ldr	r3, [r2, #12]
 8000720:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000724:	60d3      	str	r3, [r2, #12]

    return UART_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	40004400 	.word	0x40004400

0800073c <jump_to_application>:
#include"UART_STRUCTURES.h"
#include "stm32f1xx.h"  // Or "core_cm3.h" if using raw CMSIS
#define APP_ADDRESS 0x08004000
#define SCB_VTOR (*(volatile uint32_t*)0xE000ED08)
#define DELAY_VALUE_ADDR   0x0801FC00
void jump_to_application(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
    // 1. Read the MSP and Reset Handler from application vector table
    uint32_t app_stack = *(volatile uint32_t*)(APP_ADDRESS);
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <jump_to_application+0x34>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
    uint32_t app_reset = *(volatile uint32_t*)(APP_ADDRESS + 4);
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <jump_to_application+0x38>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60bb      	str	r3, [r7, #8]

    // 2. Set the Vector Table base
    SCB->VTOR = APP_ADDRESS;
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <jump_to_application+0x3c>)
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <jump_to_application+0x34>)
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	f383 8808 	msr	MSP, r3
}
 800075e:	bf00      	nop

    // 3. Set the Main Stack Pointer
    __set_MSP(app_stack);

    // 4. Jump to the application's Reset Handler
    void (*app_entry)(void) = (void*)app_reset;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	607b      	str	r3, [r7, #4]
    app_entry();
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4798      	blx	r3
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08004000 	.word	0x08004000
 8000774:	08004004 	.word	0x08004004
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <main>:
#define CMD_SIZE   0x10
#define CMD_BEGIN  0x01
#define CMD_DATA   0x02
#define CMD_END    0x03
volatile uint32_t firmware_size = 0;
int main(){
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b0c7      	sub	sp, #284	@ 0x11c
 8000780:	af00      	add	r7, sp, #0
	RCC_SYSTEM_CLOCK_HSE();
 8000782:	f7ff fe6b 	bl	800045c <RCC_SYSTEM_CLOCK_HSE>
	HAL_Init();
 8000786:	f000 f927 	bl	80009d8 <HAL_Init>
	uint32_t start=HAL_GetTick();
 800078a:	f000 f97d 	bl	8000a88 <HAL_GetTick>
 800078e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	//RCC_SYSTEM_CLOCK_HSEPLL_72MHZ();
	LED_INIT();
 8000792:	f7ff fe49 	bl	8000428 <LED_INIT>
	UART1_INIT(BAUD_RATE);
 8000796:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800079a:	f7ff feb3 	bl	8000504 <UART1_INIT>
	UART2_INIT(BAUD_RATE);
 800079e:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80007a2:	f7ff ff71 	bl	8000688 <UART2_INIT>
	//SendString2("Started............");
	//SendString2("waiting............");
  //  SYSTEM_CLOCK_TEST();
	while(1){
		while(!((HAL_GetTick()-start)>5000)){
 80007a6:	e07c      	b.n	80008a2 <main+0x126>
            if((RY_USART1->SR.BITS.RXNE)){
 80007a8:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <main+0x144>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d075      	beq.n	80008a2 <main+0x126>
       		 uint8_t cmd = uart_recv();
 80007b6:	f7ff ff1d 	bl	80005f4 <uart_recv>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
                  if(cmd == CMD_HELLO) {
 80007c0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80007c4:	2b55      	cmp	r3, #85	@ 0x55
 80007c6:	d103      	bne.n	80007d0 <main+0x54>
               	SendByte(CMD_ACK);
 80007c8:	20aa      	movs	r0, #170	@ 0xaa
 80007ca:	f7ff fef5 	bl	80005b8 <SendByte>
 80007ce:	e068      	b.n	80008a2 <main+0x126>
               }
               else if (cmd == CMD_BEGIN) {
 80007d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d105      	bne.n	80007e4 <main+0x68>
               	RY_FLASH_EraseAppRegion();
 80007d8:	f7ff fe04 	bl	80003e4 <RY_FLASH_EraseAppRegion>
                   SendByte(CMD_ACK);
 80007dc:	20aa      	movs	r0, #170	@ 0xaa
 80007de:	f7ff feeb 	bl	80005b8 <SendByte>
 80007e2:	e05e      	b.n	80008a2 <main+0x126>
               }
               else if (cmd == CMD_DATA) {
 80007e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d151      	bne.n	8000890 <main+0x114>
                   uint32_t addr=0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 24);
 80007f2:	f7ff feff 	bl	80005f4 <uart_recv>
 80007f6:	4603      	mov	r3, r0
 80007f8:	061b      	lsls	r3, r3, #24
 80007fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80007fe:	4313      	orrs	r3, r2
 8000800:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 16);
 8000804:	f7ff fef6 	bl	80005f4 <uart_recv>
 8000808:	4603      	mov	r3, r0
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000810:	4313      	orrs	r3, r2
 8000812:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 8);
 8000816:	f7ff feed 	bl	80005f4 <uart_recv>
 800081a:	4603      	mov	r3, r0
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv());
 8000828:	f7ff fee4 	bl	80005f4 <uart_recv>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000834:	4313      	orrs	r3, r2
 8000836:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   uint8_t len = uart_recv();
 800083a:	f7ff fedb 	bl	80005f4 <uart_recv>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                   uint8_t buffer[256];
                   for (uint8_t i = 0; i < len; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800084a:	e00f      	b.n	800086c <main+0xf0>
                       buffer[i] = uart_recv();
 800084c:	f897 4117 	ldrb.w	r4, [r7, #279]	@ 0x117
 8000850:	f7ff fed0 	bl	80005f4 <uart_recv>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800085c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000860:	551a      	strb	r2, [r3, r4]
                   for (uint8_t i = 0; i < len; i++) {
 8000862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000866:	3301      	adds	r3, #1
 8000868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800086c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000870:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000874:	429a      	cmp	r2, r3
 8000876:	d3e9      	bcc.n	800084c <main+0xd0>
                   }

       			RY_FLASH_ProgramBuffer( addr, buffer, len);
 8000878:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000884:	f7ff fd56 	bl	8000334 <RY_FLASH_ProgramBuffer>
                SendByte(CMD_ACK);
 8000888:	20aa      	movs	r0, #170	@ 0xaa
 800088a:	f7ff fe95 	bl	80005b8 <SendByte>
 800088e:	e008      	b.n	80008a2 <main+0x126>

               }

               else if (cmd == CMD_END) {
 8000890:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000894:	2b03      	cmp	r3, #3
 8000896:	d104      	bne.n	80008a2 <main+0x126>
               	SendByte(CMD_ACK);
 8000898:	20aa      	movs	r0, #170	@ 0xaa
 800089a:	f7ff fe8d 	bl	80005b8 <SendByte>
                jump_to_application();  // jump to app at 0x08004000
 800089e:	f7ff ff4d 	bl	800073c <jump_to_application>
		while(!((HAL_GetTick()-start)>5000)){
 80008a2:	f000 f8f1 	bl	8000a88 <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008b2:	4293      	cmp	r3, r2
 80008b4:	f67f af78 	bls.w	80007a8 <main+0x2c>
               }
            }
		}
        jump_to_application();
 80008b8:	f7ff ff40 	bl	800073c <jump_to_application>
		while(!((HAL_GetTick()-start)>5000)){
 80008bc:	e7f1      	b.n	80008a2 <main+0x126>
 80008be:	bf00      	nop
 80008c0:	40013800 	.word	0x40013800

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f874 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800098c:	f7ff fff8 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000992:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000994:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a09      	ldr	r2, [pc, #36]	@ (80009cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a8:	4c09      	ldr	r4, [pc, #36]	@ (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f000 f955 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fedf 	bl	800077c <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08000ccc 	.word	0x08000ccc
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	2000002c 	.word	0x2000002c

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <HAL_Init+0x28>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <HAL_Init+0x28>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f907 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff ff66 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f911 	bl	8000c4a <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f8e7 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	@ (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a03      	ldr	r2, [pc, #12]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000028 	.word	0x20000028

08000a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	@ (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000028 	.word	0x20000028

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	@ (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff49 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb0 	bl	8000bb8 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2600      	movs	r6, #0
 8000c68:	4d0c      	ldr	r5, [pc, #48]	@ (8000c9c <__libc_init_array+0x38>)
 8000c6a:	4c0d      	ldr	r4, [pc, #52]	@ (8000ca0 <__libc_init_array+0x3c>)
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	f000 f81a 	bl	8000cac <_init>
 8000c78:	2600      	movs	r6, #0
 8000c7a:	4d0a      	ldr	r5, [pc, #40]	@ (8000ca4 <__libc_init_array+0x40>)
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <__libc_init_array+0x44>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08000cc4 	.word	0x08000cc4
 8000ca0:	08000cc4 	.word	0x08000cc4
 8000ca4:	08000cc4 	.word	0x08000cc4
 8000ca8:	08000cc8 	.word	0x08000cc8

08000cac <_init>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	bf00      	nop
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr

08000cb8 <_fini>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr
