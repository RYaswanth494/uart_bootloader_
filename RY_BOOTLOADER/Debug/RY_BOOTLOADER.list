
RY_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c5c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d68  08000d68  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d68  08000d68  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d68  08000d68  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d68  08000d68  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d68  08000d68  00001d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d6c  08000d6c  00001d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000d70  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000d7c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d7c  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059a4  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb2  00000000  00000000  000079d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00008990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d0  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8c  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005272  00000000  00000000  0001faec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807b5  00000000  00000000  00024d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d44  00000000  00000000  000a5558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000d50 	.word	0x08000d50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000d50 	.word	0x08000d50

0800014c <RY_FLASH_Unlock>:
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 8000150:	4b07      	ldr	r3, [pc, #28]	@ (8000170 <RY_FLASH_Unlock+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000158:	2b00      	cmp	r3, #0
 800015a:	d005      	beq.n	8000168 <RY_FLASH_Unlock+0x1c>
 800015c:	4b05      	ldr	r3, [pc, #20]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <RY_FLASH_Unlock+0x2c>)
 8000160:	601a      	str	r2, [r3, #0]
 8000162:	4b04      	ldr	r3, [pc, #16]	@ (8000174 <RY_FLASH_Unlock+0x28>)
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <RY_FLASH_Unlock+0x30>)
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40022010 	.word	0x40022010
 8000174:	40022004 	.word	0x40022004
 8000178:	45670123 	.word	0x45670123
 800017c:	cdef89ab 	.word	0xcdef89ab

08000180 <RY_FLASH_Lock>:
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
 8000184:	4b04      	ldr	r3, [pc, #16]	@ (8000198 <RY_FLASH_Lock+0x18>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a03      	ldr	r2, [pc, #12]	@ (8000198 <RY_FLASH_Lock+0x18>)
 800018a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800018e:	6013      	str	r3, [r2, #0]
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	40022010 	.word	0x40022010

0800019c <RY_FLASH_WaitForLastOperation>:
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000210 <RY_FLASH_WaitForLastOperation+0x74>)
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	bf00      	nop
 80001a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d005      	beq.n	80001c0 <RY_FLASH_WaitForLastOperation+0x24>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3b01      	subs	r3, #1
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d1f3      	bne.n	80001a8 <RY_FLASH_WaitForLastOperation+0xc>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d101      	bne.n	80001ca <RY_FLASH_WaitForLastOperation+0x2e>
 80001c6:	2302      	movs	r3, #2
 80001c8:	e01c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 80001ca:	4b12      	ldr	r3, [pc, #72]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f003 0310 	and.w	r3, r3, #16
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <RY_FLASH_WaitForLastOperation+0x3e>
 80001d6:	2306      	movs	r3, #6
 80001d8:	e014      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 80001da:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0304 	and.w	r3, r3, #4
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <RY_FLASH_WaitForLastOperation+0x4e>
 80001e6:	2305      	movs	r3, #5
 80001e8:	e00c      	b.n	8000204 <RY_FLASH_WaitForLastOperation+0x68>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f003 0320 	and.w	r3, r3, #32
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <RY_FLASH_WaitForLastOperation+0x66>
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <RY_FLASH_WaitForLastOperation+0x78>)
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	4618      	mov	r0, r3
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000186a0 	.word	0x000186a0
 8000214:	4002200c 	.word	0x4002200c

08000218 <RY_FLASH_ErasePage>:
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <RY_FLASH_ErasePage+0x7c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d308      	bcc.n	800023a <RY_FLASH_ErasePage+0x22>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a1b      	ldr	r2, [pc, #108]	@ (8000298 <RY_FLASH_ErasePage+0x80>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d804      	bhi.n	800023a <RY_FLASH_ErasePage+0x22>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <RY_FLASH_ErasePage+0x26>
 800023a:	2303      	movs	r3, #3
 800023c:	e026      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 800023e:	f7ff ff85 	bl	800014c <RY_FLASH_Unlock>
 8000242:	f7ff ffab 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000246:	4603      	mov	r3, r0
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <RY_FLASH_ErasePage+0x3c>
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	e01b      	b.n	800028c <RY_FLASH_ErasePage+0x74>
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a10      	ldr	r2, [pc, #64]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6013      	str	r3, [r2, #0]
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <RY_FLASH_ErasePage+0x88>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6013      	str	r3, [r2, #0]
 8000266:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6013      	str	r3, [r2, #0]
 8000272:	f7ff ff93 	bl	800019c <RY_FLASH_WaitForLastOperation>
 8000276:	4603      	mov	r3, r0
 8000278:	73fb      	strb	r3, [r7, #15]
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <RY_FLASH_ErasePage+0x84>)
 8000280:	f023 0302 	bic.w	r3, r3, #2
 8000284:	6013      	str	r3, [r2, #0]
 8000286:	f7ff ff7b 	bl	8000180 <RY_FLASH_Lock>
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08004000 	.word	0x08004000
 8000298:	0801ffff 	.word	0x0801ffff
 800029c:	40022010 	.word	0x40022010
 80002a0:	40022014 	.word	0x40022014

080002a4 <RY_FLASH_ProgramHalfWord>:
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	807b      	strh	r3, [r7, #2]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d107      	bne.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000328 <RY_FLASH_ProgramHalfWord+0x84>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d303      	bcc.n	80002ca <RY_FLASH_ProgramHalfWord+0x26>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a19      	ldr	r2, [pc, #100]	@ (800032c <RY_FLASH_ProgramHalfWord+0x88>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d901      	bls.n	80002ce <RY_FLASH_ProgramHalfWord+0x2a>
 80002ca:	2304      	movs	r3, #4
 80002cc:	e028      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 80002ce:	f7ff ff3d 	bl	800014c <RY_FLASH_Unlock>
 80002d2:	f7ff ff63 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002d6:	4603      	mov	r3, r0
 80002d8:	73fb      	strb	r3, [r7, #15]
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <RY_FLASH_ProgramHalfWord+0x40>
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	e01d      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	887a      	ldrh	r2, [r7, #2]
 80002f4:	801a      	strh	r2, [r3, #0]
 80002f6:	f7ff ff51 	bl	800019c <RY_FLASH_WaitForLastOperation>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0b      	ldr	r2, [pc, #44]	@ (8000330 <RY_FLASH_ProgramHalfWord+0x8c>)
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
 800030a:	f7ff ff39 	bl	8000180 <RY_FLASH_Lock>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	887a      	ldrh	r2, [r7, #2]
 8000316:	429a      	cmp	r2, r3
 8000318:	d001      	beq.n	800031e <RY_FLASH_ProgramHalfWord+0x7a>
 800031a:	2307      	movs	r3, #7
 800031c:	e000      	b.n	8000320 <RY_FLASH_ProgramHalfWord+0x7c>
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	4618      	mov	r0, r3
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	08004000 	.word	0x08004000
 800032c:	0801ffff 	.word	0x0801ffff
 8000330:	40022010 	.word	0x40022010

08000334 <RY_FLASH_ProgramBuffer>:
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4a23      	ldr	r2, [pc, #140]	@ (80003dc <RY_FLASH_ProgramBuffer+0xa8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d305      	bcc.n	800035e <RY_FLASH_ProgramBuffer+0x2a>
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <RY_FLASH_ProgramBuffer+0xac>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d901      	bls.n	8000362 <RY_FLASH_ProgramBuffer+0x2e>
 800035e:	2304      	movs	r3, #4
 8000360:	e038      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e030      	b.n	80003ca <RY_FLASH_ProgramBuffer+0x96>
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d910      	bls.n	8000394 <RY_FLASH_ProgramBuffer+0x60>
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b21a      	sxth	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	68b9      	ldr	r1, [r7, #8]
 8000382:	440b      	add	r3, r1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b21b      	sxth	r3, r3
 8000388:	021b      	lsls	r3, r3, #8
 800038a:	b21b      	sxth	r3, r3
 800038c:	4313      	orrs	r3, r2
 800038e:	b21b      	sxth	r3, r3
 8000390:	827b      	strh	r3, [r7, #18]
 8000392:	e008      	b.n	80003a6 <RY_FLASH_ProgramBuffer+0x72>
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b21b      	sxth	r3, r3
 800039e:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	827b      	strh	r3, [r7, #18]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	4413      	add	r3, r2
 80003ac:	8a7a      	ldrh	r2, [r7, #18]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff77 	bl	80002a4 <RY_FLASH_ProgramHalfWord>
 80003b6:	4603      	mov	r3, r0
 80003b8:	747b      	strb	r3, [r7, #17]
 80003ba:	7c7b      	ldrb	r3, [r7, #17]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <RY_FLASH_ProgramBuffer+0x90>
 80003c0:	7c7b      	ldrb	r3, [r7, #17]
 80003c2:	e007      	b.n	80003d4 <RY_FLASH_ProgramBuffer+0xa0>
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3302      	adds	r3, #2
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3ca      	bcc.n	8000368 <RY_FLASH_ProgramBuffer+0x34>
 80003d2:	2300      	movs	r3, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	08004000 	.word	0x08004000
 80003e0:	08020000 	.word	0x08020000

080003e4 <RY_FLASH_EraseAppRegion>:
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <RY_FLASH_EraseAppRegion+0x3c>)
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e00d      	b.n	800040c <RY_FLASH_EraseAppRegion+0x28>
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff11 	bl	8000218 <RY_FLASH_ErasePage>
 80003f6:	4603      	mov	r3, r0
 80003f8:	70fb      	strb	r3, [r7, #3]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <RY_FLASH_EraseAppRegion+0x20>
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	e008      	b.n	8000416 <RY_FLASH_EraseAppRegion+0x32>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a05      	ldr	r2, [pc, #20]	@ (8000424 <RY_FLASH_EraseAppRegion+0x40>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d9ed      	bls.n	80003f0 <RY_FLASH_EraseAppRegion+0xc>
 8000414:	2300      	movs	r3, #0
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	08004000 	.word	0x08004000
 8000424:	0801ffff 	.word	0x0801ffff

08000428 <LED_INIT>:
// RCC registers
#define RCC_APB2ENR     (*(volatile uint32_t *)(RCC_BASE + 0x18))
// GPIOB registers
#define GPIOB_CRL       (*(volatile uint32_t *)(GPIOB_BASE + 0x00))
#define GPIOB_ODR       (*(volatile uint32_t *)(GPIOB_BASE + 0x0C))
void LED_INIT(){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
   // RCC_APB2ENR |= (1 << 3); // IOPBEN
	RY_RCC->APB2ENR.BITS.IOPBEN=1;
 800042c:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <LED_INIT+0x2c>)
 800042e:	6993      	ldr	r3, [r2, #24]
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	6193      	str	r3, [r2, #24]
	//GPIOB->CRL.ALL&=~(0XF<<(2*8));
	RY_GPIOB->CRL.BITS.CNF2=0b00;
 8000436:	4a08      	ldr	r2, [pc, #32]	@ (8000458 <LED_INIT+0x30>)
 8000438:	6813      	ldr	r3, [r2, #0]
 800043a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800043e:	6013      	str	r3, [r2, #0]
	RY_GPIOB->CRL.BITS.MODE2=0b10;
 8000440:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <LED_INIT+0x30>)
 8000442:	6813      	ldr	r3, [r2, #0]
 8000444:	2102      	movs	r1, #2
 8000446:	f361 2309 	bfi	r3, r1, #8, #2
 800044a:	6013      	str	r3, [r2, #0]



	// GPIOB_CRL &= ~(0xF << (2 * 4));
	 //   GPIOB_CRL |=  (0x2 << 8);     // MODE2 = 10 (Output 2 MHz), CNF2 = 00 (General purpose output push-pull)
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010c00 	.word	0x40010c00

0800045c <RCC_SYSTEM_CLOCK_HSE>:
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
 8000460:	4a0f      	ldr	r2, [pc, #60]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	bf00      	nop
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <RCC_SYSTEM_CLOCK_HSE+0x10>
 800047a:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800047c:	6853      	ldr	r3, [r2, #4]
 800047e:	2101      	movs	r1, #1
 8000480:	f361 0301 	bfi	r3, r1, #0, #2
 8000484:	6053      	str	r3, [r2, #4]
 8000486:	bf00      	nop
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <RCC_SYSTEM_CLOCK_HSE+0x44>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b01      	cmp	r3, #1
 8000494:	d1f8      	bne.n	8000488 <RCC_SYSTEM_CLOCK_HSE+0x2c>
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <SetBaudRate>:
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d101      	bne.n	80004b6 <SetBaudRate+0x12>
 80004b2:	2301      	movs	r3, #1
 80004b4:	e01d      	b.n	80004f2 <SetBaudRate+0x4e>
 80004b6:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <SetBaudRate+0x58>)
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	085a      	lsrs	r2, r3, #1
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	441a      	add	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <SetBaudRate+0x5c>)
 80004d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004d4:	b299      	uxth	r1, r3
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	f361 130f 	bfi	r3, r1, #4, #12
 80004dc:	6093      	str	r3, [r2, #8]
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <SetBaudRate+0x5c>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	f003 030f 	and.w	r3, r3, #15
 80004e6:	b2d9      	uxtb	r1, r3
 80004e8:	6893      	ldr	r3, [r2, #8]
 80004ea:	f361 0303 	bfi	r3, r1, #0, #4
 80004ee:	6093      	str	r3, [r2, #8]
 80004f0:	2300      	movs	r3, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	007a1200 	.word	0x007a1200
 8000500:	40013800 	.word	0x40013800

08000504 <UART1_INIT>:
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <UART1_INIT+0xa8>)
 800050e:	6993      	ldr	r3, [r2, #24]
 8000510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4a25      	ldr	r2, [pc, #148]	@ (80005ac <UART1_INIT+0xa8>)
 8000518:	6993      	ldr	r3, [r2, #24]
 800051a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4a22      	ldr	r2, [pc, #136]	@ (80005ac <UART1_INIT+0xa8>)
 8000522:	6993      	ldr	r3, [r2, #24]
 8000524:	f023 0304 	bic.w	r3, r3, #4
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4a20      	ldr	r2, [pc, #128]	@ (80005ac <UART1_INIT+0xa8>)
 800052c:	6993      	ldr	r3, [r2, #24]
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <UART1_INIT+0xac>)
 8000536:	6853      	ldr	r3, [r2, #4]
 8000538:	2102      	movs	r1, #2
 800053a:	f361 1387 	bfi	r3, r1, #6, #2
 800053e:	6053      	str	r3, [r2, #4]
 8000540:	4a1b      	ldr	r2, [pc, #108]	@ (80005b0 <UART1_INIT+0xac>)
 8000542:	6853      	ldr	r3, [r2, #4]
 8000544:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000548:	6053      	str	r3, [r2, #4]
 800054a:	4a19      	ldr	r2, [pc, #100]	@ (80005b0 <UART1_INIT+0xac>)
 800054c:	6853      	ldr	r3, [r2, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	f361 238b 	bfi	r3, r1, #10, #2
 8000554:	6053      	str	r3, [r2, #4]
 8000556:	4a16      	ldr	r2, [pc, #88]	@ (80005b0 <UART1_INIT+0xac>)
 8000558:	6853      	ldr	r3, [r2, #4]
 800055a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800055e:	6053      	str	r3, [r2, #4]
 8000560:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <UART1_INIT+0xb0>)
 8000562:	68d3      	ldr	r3, [r2, #12]
 8000564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000568:	60d3      	str	r3, [r2, #12]
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <UART1_INIT+0xb0>)
 800056c:	68d3      	ldr	r3, [r2, #12]
 800056e:	f023 0308 	bic.w	r3, r3, #8
 8000572:	60d3      	str	r3, [r2, #12]
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <UART1_INIT+0xb0>)
 8000576:	68d3      	ldr	r3, [r2, #12]
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	60d3      	str	r3, [r2, #12]
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <UART1_INIT+0xb0>)
 8000580:	68d3      	ldr	r3, [r2, #12]
 8000582:	f023 0304 	bic.w	r3, r3, #4
 8000586:	60d3      	str	r3, [r2, #12]
 8000588:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <UART1_INIT+0xb0>)
 800058a:	68d3      	ldr	r3, [r2, #12]
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	60d3      	str	r3, [r2, #12]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff86 	bl	80004a4 <SetBaudRate>
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <UART1_INIT+0xb0>)
 800059a:	68d3      	ldr	r3, [r2, #12]
 800059c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	2300      	movs	r3, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40013800 	.word	0x40013800

080005b8 <SendByte>:
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	bf00      	nop
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <SendByte+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f8      	beq.n	80005c4 <SendByte+0xc>
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <SendByte+0x38>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005da:	b299      	uxth	r1, r3
 80005dc:	6853      	ldr	r3, [r2, #4]
 80005de:	f361 0308 	bfi	r3, r1, #0, #9
 80005e2:	6053      	str	r3, [r2, #4]
 80005e4:	2300      	movs	r3, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40013800 	.word	0x40013800

080005f4 <uart_recv>:
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	bf00      	nop
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <uart_recv+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f8      	beq.n	80005fc <uart_recv+0x8>
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <uart_recv+0x30>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000612:	b29b      	uxth	r3, r3
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40013800 	.word	0x40013800

08000628 <SetBaudRate_USART2>:
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <SetBaudRate_USART2+0x12>
 8000636:	2301      	movs	r3, #1
 8000638:	e01d      	b.n	8000676 <SetBaudRate_USART2+0x4e>
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <SetBaudRate_USART2+0x58>)
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	085a      	lsrs	r2, r3, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	441a      	add	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <SetBaudRate_USART2+0x5c>)
 8000654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000658:	b299      	uxth	r1, r3
 800065a:	6893      	ldr	r3, [r2, #8]
 800065c:	f361 130f 	bfi	r3, r1, #4, #12
 8000660:	6093      	str	r3, [r2, #8]
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <SetBaudRate_USART2+0x5c>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	b2d9      	uxtb	r1, r3
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	f361 0303 	bfi	r3, r1, #0, #4
 8000672:	6093      	str	r3, [r2, #8]
 8000674:	2300      	movs	r3, #0
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	007a1200 	.word	0x007a1200
 8000684:	40004400 	.word	0x40004400

08000688 <UART2_INIT>:
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <UART2_INIT+0xa8>)
 8000692:	69d3      	ldr	r3, [r2, #28]
 8000694:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <UART2_INIT+0xa8>)
 800069c:	69d3      	ldr	r3, [r2, #28]
 800069e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a2:	61d3      	str	r3, [r2, #28]
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <UART2_INIT+0xa8>)
 80006a6:	6993      	ldr	r3, [r2, #24]
 80006a8:	f023 0304 	bic.w	r3, r3, #4
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <UART2_INIT+0xa8>)
 80006b0:	6993      	ldr	r3, [r2, #24]
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <UART2_INIT+0xac>)
 80006ba:	6813      	ldr	r3, [r2, #0]
 80006bc:	2102      	movs	r1, #2
 80006be:	f361 238b 	bfi	r3, r1, #10, #2
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <UART2_INIT+0xac>)
 80006c6:	6813      	ldr	r3, [r2, #0]
 80006c8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <UART2_INIT+0xac>)
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	2101      	movs	r1, #1
 80006d4:	f361 338f 	bfi	r3, r1, #14, #2
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <UART2_INIT+0xac>)
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <UART2_INIT+0xb0>)
 80006e6:	68d3      	ldr	r3, [r2, #12]
 80006e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006ec:	60d3      	str	r3, [r2, #12]
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <UART2_INIT+0xb0>)
 80006f0:	68d3      	ldr	r3, [r2, #12]
 80006f2:	f023 0308 	bic.w	r3, r3, #8
 80006f6:	60d3      	str	r3, [r2, #12]
 80006f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <UART2_INIT+0xb0>)
 80006fa:	68d3      	ldr	r3, [r2, #12]
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	60d3      	str	r3, [r2, #12]
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <UART2_INIT+0xb0>)
 8000704:	68d3      	ldr	r3, [r2, #12]
 8000706:	f023 0304 	bic.w	r3, r3, #4
 800070a:	60d3      	str	r3, [r2, #12]
 800070c:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <UART2_INIT+0xb0>)
 800070e:	68d3      	ldr	r3, [r2, #12]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	60d3      	str	r3, [r2, #12]
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff86 	bl	8000628 <SetBaudRate_USART2>
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <UART2_INIT+0xb0>)
 800071e:	68d3      	ldr	r3, [r2, #12]
 8000720:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000724:	60d3      	str	r3, [r2, #12]
 8000726:	2300      	movs	r3, #0
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	40004400 	.word	0x40004400

0800073c <SendByte2>:
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	bf00      	nop
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <SendByte2+0x38>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f8      	beq.n	8000748 <SendByte2+0xc>
 8000756:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <SendByte2+0x38>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800075e:	b299      	uxth	r1, r3
 8000760:	6853      	ldr	r3, [r2, #4]
 8000762:	f361 0308 	bfi	r3, r1, #0, #9
 8000766:	6053      	str	r3, [r2, #4]
 8000768:	2300      	movs	r3, #0
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40004400 	.word	0x40004400

08000778 <jump_to_application>:
#include"UART_STRUCTURES.h"
#include "stm32f1xx.h"  // Or "core_cm3.h" if using raw CMSIS
#define APP_ADDRESS 0x08004000
#define SCB_VTOR (*(volatile uint32_t*)0xE000ED08)
#define DELAY_VALUE_ADDR   0x0801FC00
void jump_to_application(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
    // 1. Read the MSP and Reset Handler from application vector table
    uint32_t app_stack = *(volatile uint32_t*)(APP_ADDRESS);
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <jump_to_application+0x34>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	60fb      	str	r3, [r7, #12]
    uint32_t app_reset = *(volatile uint32_t*)(APP_ADDRESS + 4);
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <jump_to_application+0x38>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60bb      	str	r3, [r7, #8]

    // 2. Set the Vector Table base
    SCB->VTOR = APP_ADDRESS;
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <jump_to_application+0x3c>)
 800078c:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <jump_to_application+0x34>)
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	f383 8808 	msr	MSP, r3
}
 800079a:	bf00      	nop

    // 3. Set the Main Stack Pointer
    __set_MSP(app_stack);

    // 4. Jump to the application's Reset Handler
    void (*app_entry)(void) = (void*)app_reset;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	607b      	str	r3, [r7, #4]
    app_entry();
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08004000 	.word	0x08004000
 80007b0:	08004004 	.word	0x08004004
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <main>:
#define CMD_SIZE   0x10
#define CMD_BEGIN  0x01
#define CMD_DATA   0x02
#define CMD_END    0x03
volatile uint32_t firmware_size = 0;
int main(){
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b0c7      	sub	sp, #284	@ 0x11c
 80007bc:	af00      	add	r7, sp, #0
	RCC_SYSTEM_CLOCK_HSE();
 80007be:	f7ff fe4d 	bl	800045c <RCC_SYSTEM_CLOCK_HSE>
	HAL_Init();
 80007c2:	f000 f95b 	bl	8000a7c <HAL_Init>
	uint32_t start=HAL_GetTick();
 80007c6:	f000 f9b1 	bl	8000b2c <HAL_GetTick>
 80007ca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	//RCC_SYSTEM_CLOCK_HSEPLL_72MHZ();
	LED_INIT();
 80007ce:	f7ff fe2b 	bl	8000428 <LED_INIT>
	UART1_INIT(BAUD_RATE);
 80007d2:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80007d6:	f7ff fe95 	bl	8000504 <UART1_INIT>
	UART2_INIT(BAUD_RATE);
 80007da:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80007de:	f7ff ff53 	bl	8000688 <UART2_INIT>
	//SendString2("Started............");
	//SendString2("waiting............");
  //  SYSTEM_CLOCK_TEST();
	while(1){
		while(!((HAL_GetTick()-start)>10000)){
 80007e2:	e0b1      	b.n	8000948 <main+0x190>
            if((RY_USART1->SR.BITS.RXNE)){
 80007e4:	4b5f      	ldr	r3, [pc, #380]	@ (8000964 <main+0x1ac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 80aa 	beq.w	8000948 <main+0x190>
       		 uint8_t cmd = uart_recv();
 80007f4:	f7ff fefe 	bl	80005f4 <uart_recv>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
                  if(cmd == CMD_HELLO) {
 80007fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000802:	2b55      	cmp	r3, #85	@ 0x55
 8000804:	d103      	bne.n	800080e <main+0x56>
               	SendByte(CMD_ACK);
 8000806:	20aa      	movs	r0, #170	@ 0xaa
 8000808:	f7ff fed6 	bl	80005b8 <SendByte>
 800080c:	e09c      	b.n	8000948 <main+0x190>
               }
               else if (cmd == CMD_BEGIN) {
 800080e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000812:	2b01      	cmp	r3, #1
 8000814:	d105      	bne.n	8000822 <main+0x6a>
               	RY_FLASH_EraseAppRegion();
 8000816:	f7ff fde5 	bl	80003e4 <RY_FLASH_EraseAppRegion>
                   SendByte(CMD_ACK);
 800081a:	20aa      	movs	r0, #170	@ 0xaa
 800081c:	f7ff fecc 	bl	80005b8 <SendByte>
 8000820:	e092      	b.n	8000948 <main+0x190>
               }
               else if (cmd == CMD_DATA) {
 8000822:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000826:	2b02      	cmp	r3, #2
 8000828:	f040 8085 	bne.w	8000936 <main+0x17e>
                   uint32_t addr=0;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 24);
 8000832:	f7ff fedf 	bl	80005f4 <uart_recv>
 8000836:	4603      	mov	r3, r0
 8000838:	061b      	lsls	r3, r3, #24
 800083a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800083e:	4313      	orrs	r3, r2
 8000840:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 16);
 8000844:	f7ff fed6 	bl	80005f4 <uart_recv>
 8000848:	4603      	mov	r3, r0
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000850:	4313      	orrs	r3, r2
 8000852:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv() << 8);
 8000856:	f7ff fecd 	bl	80005f4 <uart_recv>
 800085a:	4603      	mov	r3, r0
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000862:	4313      	orrs	r3, r2
 8000864:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   addr |= ((uint32_t)uart_recv());
 8000868:	f7ff fec4 	bl	80005f4 <uart_recv>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000874:	4313      	orrs	r3, r2
 8000876:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                   uint8_t len = uart_recv();
 800087a:	f7ff febb 	bl	80005f4 <uart_recv>
 800087e:	4603      	mov	r3, r0
 8000880:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                   uint8_t check_sum=0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
                   check_sum=(addr&0xff)+((addr>>8)&0xff)+len;
 800088a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800088e:	b2da      	uxtb	r2, r3
 8000890:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4413      	add	r3, r2
 800089a:	b2da      	uxtb	r2, r3
 800089c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80008a0:	4413      	add	r3, r2
 80008a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
                   uint8_t buffer[256];
                   for (uint8_t i = 0; i < len; i++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80008ac:	e01b      	b.n	80008e6 <main+0x12e>
                       buffer[i] = uart_recv();
 80008ae:	f897 4116 	ldrb.w	r4, [r7, #278]	@ 0x116
 80008b2:	f7ff fe9f 	bl	80005f4 <uart_recv>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008c2:	551a      	strb	r2, [r3, r4]
                       check_sum+=buffer[i];
 80008c4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80008c8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008cc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80008d0:	5cd2      	ldrb	r2, [r2, r3]
 80008d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80008d6:	4413      	add	r3, r2
 80008d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
                   for (uint8_t i = 0; i < len; i++) {
 80008dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80008e0:	3301      	adds	r3, #1
 80008e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80008e6:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 80008ea:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d3dd      	bcc.n	80008ae <main+0xf6>
                   }
                   check_sum=(~check_sum)+1;
 80008f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80008f6:	425b      	negs	r3, r3
 80008f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
                   SendByte2(check_sum);
 80008fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff1b 	bl	800073c <SendByte2>
                   if(uart_recv()==check_sum){
 8000906:	f7ff fe75 	bl	80005f4 <uart_recv>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000912:	4293      	cmp	r3, r2
 8000914:	d10b      	bne.n	800092e <main+0x176>
              			RY_FLASH_ProgramBuffer( addr, buffer, len);
 8000916:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000922:	f7ff fd07 	bl	8000334 <RY_FLASH_ProgramBuffer>
                       SendByte(CMD_ACK);
 8000926:	20aa      	movs	r0, #170	@ 0xaa
 8000928:	f7ff fe46 	bl	80005b8 <SendByte>
 800092c:	e00c      	b.n	8000948 <main+0x190>
                   }else{
                       SendByte(CMD_NACK);
 800092e:	20ff      	movs	r0, #255	@ 0xff
 8000930:	f7ff fe42 	bl	80005b8 <SendByte>
 8000934:	e008      	b.n	8000948 <main+0x190>
                   }
               }

               else if (cmd == CMD_END) {
 8000936:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800093a:	2b03      	cmp	r3, #3
 800093c:	d104      	bne.n	8000948 <main+0x190>
               	SendByte(CMD_ACK);
 800093e:	20aa      	movs	r0, #170	@ 0xaa
 8000940:	f7ff fe3a 	bl	80005b8 <SendByte>
                jump_to_application();  // jump to app at 0x08004000
 8000944:	f7ff ff18 	bl	8000778 <jump_to_application>
		while(!((HAL_GetTick()-start)>10000)){
 8000948:	f000 f8f0 	bl	8000b2c <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000958:	4293      	cmp	r3, r2
 800095a:	f67f af43 	bls.w	80007e4 <main+0x2c>
               }
            }
		}
        jump_to_application();
 800095e:	f7ff ff0b 	bl	8000778 <jump_to_application>
		while(!((HAL_GetTick()-start)>10000)){
 8000962:	e7f1      	b.n	8000948 <main+0x190>
 8000964:	40013800 	.word	0x40013800

08000968 <HAL_MspInit>:
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_MspInit+0x5c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <HAL_MspInit+0x60>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <HAL_MspInit+0x60>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6053      	str	r3, [r2, #4]
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000

080009cc <NMI_Handler>:
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f000 f874 	bl	8000b08 <HAL_IncTick>
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SystemInit>:
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <Reset_Handler>:
 8000a30:	f7ff fff8 	bl	8000a24 <SystemInit>
 8000a34:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <LoopFillZerobss+0xe>)
 8000a36:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <LoopFillZerobss+0x16>)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:
 8000a3e:	58d4      	ldr	r4, [r2, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:
 8000a44:	18c4      	adds	r4, r0, r3
 8000a46:	428c      	cmp	r4, r1
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
 8000a4a:	4a09      	ldr	r2, [pc, #36]	@ (8000a70 <LoopFillZerobss+0x1a>)
 8000a4c:	4c09      	ldr	r4, [pc, #36]	@ (8000a74 <LoopFillZerobss+0x1e>)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:
 8000a56:	42a2      	cmp	r2, r4
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>
 8000a5a:	f000 f955 	bl	8000d08 <__libc_init_array>
 8000a5e:	f7ff feab 	bl	80007b8 <main>
 8000a62:	4770      	bx	lr
 8000a64:	20000000 	.word	0x20000000
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	08000d70 	.word	0x08000d70
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	2000002c 	.word	0x2000002c

08000a78 <ADC1_2_IRQHandler>:
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f907 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>
 8000a98:	f7ff ff66 	bl	8000968 <HAL_MspInit>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f911 	bl	8000cee <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f8e7 	bl	8000cb6 <HAL_NVIC_SetPriority>
 8000ae8:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
 8000af2:	2301      	movs	r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a03      	ldr	r2, [pc, #12]	@ (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000028 	.word	0x20000028

08000b2c <HAL_GetTick>:
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4b02      	ldr	r3, [pc, #8]	@ (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000028 	.word	0x20000028

08000b40 <__NVIC_SetPriorityGrouping>:
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_SetPriority>:
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
 8000c50:	4313      	orrs	r3, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Config>:
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff90 	bl	8000ba4 <__NVIC_SetPriority>
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	2300      	movs	r3, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff49 	bl	8000b40 <__NVIC_SetPriorityGrouping>
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	f7ff ff5e 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff90 	bl	8000bf8 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <__NVIC_SetPriority>
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffb0 	bl	8000c5c <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <__libc_init_array>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	4d0c      	ldr	r5, [pc, #48]	@ (8000d40 <__libc_init_array+0x38>)
 8000d0e:	4c0d      	ldr	r4, [pc, #52]	@ (8000d44 <__libc_init_array+0x3c>)
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	10a4      	asrs	r4, r4, #2
 8000d14:	42a6      	cmp	r6, r4
 8000d16:	d109      	bne.n	8000d2c <__libc_init_array+0x24>
 8000d18:	f000 f81a 	bl	8000d50 <_init>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	4d0a      	ldr	r5, [pc, #40]	@ (8000d48 <__libc_init_array+0x40>)
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <__libc_init_array+0x44>)
 8000d22:	1b64      	subs	r4, r4, r5
 8000d24:	10a4      	asrs	r4, r4, #2
 8000d26:	42a6      	cmp	r6, r4
 8000d28:	d105      	bne.n	8000d36 <__libc_init_array+0x2e>
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d30:	4798      	blx	r3
 8000d32:	3601      	adds	r6, #1
 8000d34:	e7ee      	b.n	8000d14 <__libc_init_array+0xc>
 8000d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3a:	4798      	blx	r3
 8000d3c:	3601      	adds	r6, #1
 8000d3e:	e7f2      	b.n	8000d26 <__libc_init_array+0x1e>
 8000d40:	08000d68 	.word	0x08000d68
 8000d44:	08000d68 	.word	0x08000d68
 8000d48:	08000d68 	.word	0x08000d68
 8000d4c:	08000d6c 	.word	0x08000d6c

08000d50 <_init>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr

08000d5c <_fini>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr
