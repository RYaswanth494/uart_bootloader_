
APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  08004110  08004110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006f48  08006f48  00003f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006fb0  08006fb0  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006fb0  08006fb0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00003fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00003fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006fb8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000005c  08007014  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08007014  000041bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002be3  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e50  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00007ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002e9  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001617c  00000000  00000000  000081a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000457c  00000000  00000000  0001e325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f53d  00000000  00000000  000228a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d8  00000000  00000000  000a1e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000a32fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004110 <__do_global_dtors_aux>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4c05      	ldr	r4, [pc, #20]	@ (8004128 <__do_global_dtors_aux+0x18>)
 8004114:	7823      	ldrb	r3, [r4, #0]
 8004116:	b933      	cbnz	r3, 8004126 <__do_global_dtors_aux+0x16>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x1c>)
 800411a:	b113      	cbz	r3, 8004122 <__do_global_dtors_aux+0x12>
 800411c:	4804      	ldr	r0, [pc, #16]	@ (8004130 <__do_global_dtors_aux+0x20>)
 800411e:	f3af 8000 	nop.w
 8004122:	2301      	movs	r3, #1
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	bd10      	pop	{r4, pc}
 8004128:	2000005c 	.word	0x2000005c
 800412c:	00000000 	.word	0x00000000
 8004130:	08006f30 	.word	0x08006f30

08004134 <frame_dummy>:
 8004134:	b508      	push	{r3, lr}
 8004136:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <frame_dummy+0x10>)
 8004138:	b11b      	cbz	r3, 8004142 <frame_dummy+0xe>
 800413a:	4903      	ldr	r1, [pc, #12]	@ (8004148 <frame_dummy+0x14>)
 800413c:	4803      	ldr	r0, [pc, #12]	@ (800414c <frame_dummy+0x18>)
 800413e:	f3af 8000 	nop.w
 8004142:	bd08      	pop	{r3, pc}
 8004144:	00000000 	.word	0x00000000
 8004148:	20000060 	.word	0x20000060
 800414c:	08006f30 	.word	0x08006f30

08004150 <__aeabi_drsub>:
 8004150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004154:	e002      	b.n	800415c <__adddf3>
 8004156:	bf00      	nop

08004158 <__aeabi_dsub>:
 8004158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800415c <__adddf3>:
 800415c:	b530      	push	{r4, r5, lr}
 800415e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004166:	ea94 0f05 	teq	r4, r5
 800416a:	bf08      	it	eq
 800416c:	ea90 0f02 	teqeq	r0, r2
 8004170:	bf1f      	itttt	ne
 8004172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800417a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800417e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004182:	f000 80e2 	beq.w	800434a <__adddf3+0x1ee>
 8004186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800418a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800418e:	bfb8      	it	lt
 8004190:	426d      	neglt	r5, r5
 8004192:	dd0c      	ble.n	80041ae <__adddf3+0x52>
 8004194:	442c      	add	r4, r5
 8004196:	ea80 0202 	eor.w	r2, r0, r2
 800419a:	ea81 0303 	eor.w	r3, r1, r3
 800419e:	ea82 0000 	eor.w	r0, r2, r0
 80041a2:	ea83 0101 	eor.w	r1, r3, r1
 80041a6:	ea80 0202 	eor.w	r2, r0, r2
 80041aa:	ea81 0303 	eor.w	r3, r1, r3
 80041ae:	2d36      	cmp	r5, #54	@ 0x36
 80041b0:	bf88      	it	hi
 80041b2:	bd30      	pophi	{r4, r5, pc}
 80041b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80041b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80041c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80041c4:	d002      	beq.n	80041cc <__adddf3+0x70>
 80041c6:	4240      	negs	r0, r0
 80041c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80041d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80041d8:	d002      	beq.n	80041e0 <__adddf3+0x84>
 80041da:	4252      	negs	r2, r2
 80041dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80041e0:	ea94 0f05 	teq	r4, r5
 80041e4:	f000 80a7 	beq.w	8004336 <__adddf3+0x1da>
 80041e8:	f1a4 0401 	sub.w	r4, r4, #1
 80041ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80041f0:	db0d      	blt.n	800420e <__adddf3+0xb2>
 80041f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80041f6:	fa22 f205 	lsr.w	r2, r2, r5
 80041fa:	1880      	adds	r0, r0, r2
 80041fc:	f141 0100 	adc.w	r1, r1, #0
 8004200:	fa03 f20e 	lsl.w	r2, r3, lr
 8004204:	1880      	adds	r0, r0, r2
 8004206:	fa43 f305 	asr.w	r3, r3, r5
 800420a:	4159      	adcs	r1, r3
 800420c:	e00e      	b.n	800422c <__adddf3+0xd0>
 800420e:	f1a5 0520 	sub.w	r5, r5, #32
 8004212:	f10e 0e20 	add.w	lr, lr, #32
 8004216:	2a01      	cmp	r2, #1
 8004218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800421c:	bf28      	it	cs
 800421e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004222:	fa43 f305 	asr.w	r3, r3, r5
 8004226:	18c0      	adds	r0, r0, r3
 8004228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800422c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004230:	d507      	bpl.n	8004242 <__adddf3+0xe6>
 8004232:	f04f 0e00 	mov.w	lr, #0
 8004236:	f1dc 0c00 	rsbs	ip, ip, #0
 800423a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800423e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004246:	d31b      	bcc.n	8004280 <__adddf3+0x124>
 8004248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800424c:	d30c      	bcc.n	8004268 <__adddf3+0x10c>
 800424e:	0849      	lsrs	r1, r1, #1
 8004250:	ea5f 0030 	movs.w	r0, r0, rrx
 8004254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004258:	f104 0401 	add.w	r4, r4, #1
 800425c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004264:	f080 809a 	bcs.w	800439c <__adddf3+0x240>
 8004268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800426c:	bf08      	it	eq
 800426e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004272:	f150 0000 	adcs.w	r0, r0, #0
 8004276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800427a:	ea41 0105 	orr.w	r1, r1, r5
 800427e:	bd30      	pop	{r4, r5, pc}
 8004280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004284:	4140      	adcs	r0, r0
 8004286:	eb41 0101 	adc.w	r1, r1, r1
 800428a:	3c01      	subs	r4, #1
 800428c:	bf28      	it	cs
 800428e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8004292:	d2e9      	bcs.n	8004268 <__adddf3+0x10c>
 8004294:	f091 0f00 	teq	r1, #0
 8004298:	bf04      	itt	eq
 800429a:	4601      	moveq	r1, r0
 800429c:	2000      	moveq	r0, #0
 800429e:	fab1 f381 	clz	r3, r1
 80042a2:	bf08      	it	eq
 80042a4:	3320      	addeq	r3, #32
 80042a6:	f1a3 030b 	sub.w	r3, r3, #11
 80042aa:	f1b3 0220 	subs.w	r2, r3, #32
 80042ae:	da0c      	bge.n	80042ca <__adddf3+0x16e>
 80042b0:	320c      	adds	r2, #12
 80042b2:	dd08      	ble.n	80042c6 <__adddf3+0x16a>
 80042b4:	f102 0c14 	add.w	ip, r2, #20
 80042b8:	f1c2 020c 	rsb	r2, r2, #12
 80042bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80042c0:	fa21 f102 	lsr.w	r1, r1, r2
 80042c4:	e00c      	b.n	80042e0 <__adddf3+0x184>
 80042c6:	f102 0214 	add.w	r2, r2, #20
 80042ca:	bfd8      	it	le
 80042cc:	f1c2 0c20 	rsble	ip, r2, #32
 80042d0:	fa01 f102 	lsl.w	r1, r1, r2
 80042d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80042d8:	bfdc      	itt	le
 80042da:	ea41 010c 	orrle.w	r1, r1, ip
 80042de:	4090      	lslle	r0, r2
 80042e0:	1ae4      	subs	r4, r4, r3
 80042e2:	bfa2      	ittt	ge
 80042e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80042e8:	4329      	orrge	r1, r5
 80042ea:	bd30      	popge	{r4, r5, pc}
 80042ec:	ea6f 0404 	mvn.w	r4, r4
 80042f0:	3c1f      	subs	r4, #31
 80042f2:	da1c      	bge.n	800432e <__adddf3+0x1d2>
 80042f4:	340c      	adds	r4, #12
 80042f6:	dc0e      	bgt.n	8004316 <__adddf3+0x1ba>
 80042f8:	f104 0414 	add.w	r4, r4, #20
 80042fc:	f1c4 0220 	rsb	r2, r4, #32
 8004300:	fa20 f004 	lsr.w	r0, r0, r4
 8004304:	fa01 f302 	lsl.w	r3, r1, r2
 8004308:	ea40 0003 	orr.w	r0, r0, r3
 800430c:	fa21 f304 	lsr.w	r3, r1, r4
 8004310:	ea45 0103 	orr.w	r1, r5, r3
 8004314:	bd30      	pop	{r4, r5, pc}
 8004316:	f1c4 040c 	rsb	r4, r4, #12
 800431a:	f1c4 0220 	rsb	r2, r4, #32
 800431e:	fa20 f002 	lsr.w	r0, r0, r2
 8004322:	fa01 f304 	lsl.w	r3, r1, r4
 8004326:	ea40 0003 	orr.w	r0, r0, r3
 800432a:	4629      	mov	r1, r5
 800432c:	bd30      	pop	{r4, r5, pc}
 800432e:	fa21 f004 	lsr.w	r0, r1, r4
 8004332:	4629      	mov	r1, r5
 8004334:	bd30      	pop	{r4, r5, pc}
 8004336:	f094 0f00 	teq	r4, #0
 800433a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800433e:	bf06      	itte	eq
 8004340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004344:	3401      	addeq	r4, #1
 8004346:	3d01      	subne	r5, #1
 8004348:	e74e      	b.n	80041e8 <__adddf3+0x8c>
 800434a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800434e:	bf18      	it	ne
 8004350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004354:	d029      	beq.n	80043aa <__adddf3+0x24e>
 8004356:	ea94 0f05 	teq	r4, r5
 800435a:	bf08      	it	eq
 800435c:	ea90 0f02 	teqeq	r0, r2
 8004360:	d005      	beq.n	800436e <__adddf3+0x212>
 8004362:	ea54 0c00 	orrs.w	ip, r4, r0
 8004366:	bf04      	itt	eq
 8004368:	4619      	moveq	r1, r3
 800436a:	4610      	moveq	r0, r2
 800436c:	bd30      	pop	{r4, r5, pc}
 800436e:	ea91 0f03 	teq	r1, r3
 8004372:	bf1e      	ittt	ne
 8004374:	2100      	movne	r1, #0
 8004376:	2000      	movne	r0, #0
 8004378:	bd30      	popne	{r4, r5, pc}
 800437a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800437e:	d105      	bne.n	800438c <__adddf3+0x230>
 8004380:	0040      	lsls	r0, r0, #1
 8004382:	4149      	adcs	r1, r1
 8004384:	bf28      	it	cs
 8004386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800438a:	bd30      	pop	{r4, r5, pc}
 800438c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8004390:	bf3c      	itt	cc
 8004392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8004396:	bd30      	popcc	{r4, r5, pc}
 8004398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800439c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80043a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	bd30      	pop	{r4, r5, pc}
 80043aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80043ae:	bf1a      	itte	ne
 80043b0:	4619      	movne	r1, r3
 80043b2:	4610      	movne	r0, r2
 80043b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80043b8:	bf1c      	itt	ne
 80043ba:	460b      	movne	r3, r1
 80043bc:	4602      	movne	r2, r0
 80043be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80043c2:	bf06      	itte	eq
 80043c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80043c8:	ea91 0f03 	teqeq	r1, r3
 80043cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80043d0:	bd30      	pop	{r4, r5, pc}
 80043d2:	bf00      	nop

080043d4 <__aeabi_ui2d>:
 80043d4:	f090 0f00 	teq	r0, #0
 80043d8:	bf04      	itt	eq
 80043da:	2100      	moveq	r1, #0
 80043dc:	4770      	bxeq	lr
 80043de:	b530      	push	{r4, r5, lr}
 80043e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80043e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80043e8:	f04f 0500 	mov.w	r5, #0
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	e750      	b.n	8004294 <__adddf3+0x138>
 80043f2:	bf00      	nop

080043f4 <__aeabi_i2d>:
 80043f4:	f090 0f00 	teq	r0, #0
 80043f8:	bf04      	itt	eq
 80043fa:	2100      	moveq	r1, #0
 80043fc:	4770      	bxeq	lr
 80043fe:	b530      	push	{r4, r5, lr}
 8004400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800440c:	bf48      	it	mi
 800440e:	4240      	negmi	r0, r0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	e73e      	b.n	8004294 <__adddf3+0x138>
 8004416:	bf00      	nop

08004418 <__aeabi_f2d>:
 8004418:	0042      	lsls	r2, r0, #1
 800441a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800441e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004426:	bf1f      	itttt	ne
 8004428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800442c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004434:	4770      	bxne	lr
 8004436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800443a:	bf08      	it	eq
 800443c:	4770      	bxeq	lr
 800443e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004442:	bf04      	itt	eq
 8004444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004448:	4770      	bxeq	lr
 800444a:	b530      	push	{r4, r5, lr}
 800444c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004458:	e71c      	b.n	8004294 <__adddf3+0x138>
 800445a:	bf00      	nop

0800445c <__aeabi_ul2d>:
 800445c:	ea50 0201 	orrs.w	r2, r0, r1
 8004460:	bf08      	it	eq
 8004462:	4770      	bxeq	lr
 8004464:	b530      	push	{r4, r5, lr}
 8004466:	f04f 0500 	mov.w	r5, #0
 800446a:	e00a      	b.n	8004482 <__aeabi_l2d+0x16>

0800446c <__aeabi_l2d>:
 800446c:	ea50 0201 	orrs.w	r2, r0, r1
 8004470:	bf08      	it	eq
 8004472:	4770      	bxeq	lr
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800447a:	d502      	bpl.n	8004482 <__aeabi_l2d+0x16>
 800447c:	4240      	negs	r0, r0
 800447e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800448a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800448e:	f43f aed8 	beq.w	8004242 <__adddf3+0xe6>
 8004492:	f04f 0203 	mov.w	r2, #3
 8004496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800449a:	bf18      	it	ne
 800449c:	3203      	addne	r2, #3
 800449e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044a2:	bf18      	it	ne
 80044a4:	3203      	addne	r2, #3
 80044a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80044aa:	f1c2 0320 	rsb	r3, r2, #32
 80044ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80044b2:	fa20 f002 	lsr.w	r0, r0, r2
 80044b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80044ba:	ea40 000e 	orr.w	r0, r0, lr
 80044be:	fa21 f102 	lsr.w	r1, r1, r2
 80044c2:	4414      	add	r4, r2
 80044c4:	e6bd      	b.n	8004242 <__adddf3+0xe6>
 80044c6:	bf00      	nop

080044c8 <__aeabi_dmul>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80044ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80044d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80044d6:	bf1d      	ittte	ne
 80044d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80044dc:	ea94 0f0c 	teqne	r4, ip
 80044e0:	ea95 0f0c 	teqne	r5, ip
 80044e4:	f000 f8de 	bleq	80046a4 <__aeabi_dmul+0x1dc>
 80044e8:	442c      	add	r4, r5
 80044ea:	ea81 0603 	eor.w	r6, r1, r3
 80044ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80044f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80044f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80044fa:	bf18      	it	ne
 80044fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004508:	d038      	beq.n	800457c <__aeabi_dmul+0xb4>
 800450a:	fba0 ce02 	umull	ip, lr, r0, r2
 800450e:	f04f 0500 	mov.w	r5, #0
 8004512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800451a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800451e:	f04f 0600 	mov.w	r6, #0
 8004522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004526:	f09c 0f00 	teq	ip, #0
 800452a:	bf18      	it	ne
 800452c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800453c:	d204      	bcs.n	8004548 <__aeabi_dmul+0x80>
 800453e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004542:	416d      	adcs	r5, r5
 8004544:	eb46 0606 	adc.w	r6, r6, r6
 8004548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800454c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800455c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004560:	bf88      	it	hi
 8004562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004566:	d81e      	bhi.n	80045a6 <__aeabi_dmul+0xde>
 8004568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800456c:	bf08      	it	eq
 800456e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004572:	f150 0000 	adcs.w	r0, r0, #0
 8004576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004580:	ea46 0101 	orr.w	r1, r6, r1
 8004584:	ea40 0002 	orr.w	r0, r0, r2
 8004588:	ea81 0103 	eor.w	r1, r1, r3
 800458c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004590:	bfc2      	ittt	gt
 8004592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800459a:	bd70      	popgt	{r4, r5, r6, pc}
 800459c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80045a0:	f04f 0e00 	mov.w	lr, #0
 80045a4:	3c01      	subs	r4, #1
 80045a6:	f300 80ab 	bgt.w	8004700 <__aeabi_dmul+0x238>
 80045aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80045ae:	bfde      	ittt	le
 80045b0:	2000      	movle	r0, #0
 80045b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80045b6:	bd70      	pople	{r4, r5, r6, pc}
 80045b8:	f1c4 0400 	rsb	r4, r4, #0
 80045bc:	3c20      	subs	r4, #32
 80045be:	da35      	bge.n	800462c <__aeabi_dmul+0x164>
 80045c0:	340c      	adds	r4, #12
 80045c2:	dc1b      	bgt.n	80045fc <__aeabi_dmul+0x134>
 80045c4:	f104 0414 	add.w	r4, r4, #20
 80045c8:	f1c4 0520 	rsb	r5, r4, #32
 80045cc:	fa00 f305 	lsl.w	r3, r0, r5
 80045d0:	fa20 f004 	lsr.w	r0, r0, r4
 80045d4:	fa01 f205 	lsl.w	r2, r1, r5
 80045d8:	ea40 0002 	orr.w	r0, r0, r2
 80045dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80045e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80045e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80045e8:	fa21 f604 	lsr.w	r6, r1, r4
 80045ec:	eb42 0106 	adc.w	r1, r2, r6
 80045f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80045f4:	bf08      	it	eq
 80045f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	f1c4 040c 	rsb	r4, r4, #12
 8004600:	f1c4 0520 	rsb	r5, r4, #32
 8004604:	fa00 f304 	lsl.w	r3, r0, r4
 8004608:	fa20 f005 	lsr.w	r0, r0, r5
 800460c:	fa01 f204 	lsl.w	r2, r1, r4
 8004610:	ea40 0002 	orr.w	r0, r0, r2
 8004614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800461c:	f141 0100 	adc.w	r1, r1, #0
 8004620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004624:	bf08      	it	eq
 8004626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f1c4 0520 	rsb	r5, r4, #32
 8004630:	fa00 f205 	lsl.w	r2, r0, r5
 8004634:	ea4e 0e02 	orr.w	lr, lr, r2
 8004638:	fa20 f304 	lsr.w	r3, r0, r4
 800463c:	fa01 f205 	lsl.w	r2, r1, r5
 8004640:	ea43 0302 	orr.w	r3, r3, r2
 8004644:	fa21 f004 	lsr.w	r0, r1, r4
 8004648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800464c:	fa21 f204 	lsr.w	r2, r1, r4
 8004650:	ea20 0002 	bic.w	r0, r0, r2
 8004654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800465c:	bf08      	it	eq
 800465e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f094 0f00 	teq	r4, #0
 8004668:	d10f      	bne.n	800468a <__aeabi_dmul+0x1c2>
 800466a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800466e:	0040      	lsls	r0, r0, #1
 8004670:	eb41 0101 	adc.w	r1, r1, r1
 8004674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004678:	bf08      	it	eq
 800467a:	3c01      	subeq	r4, #1
 800467c:	d0f7      	beq.n	800466e <__aeabi_dmul+0x1a6>
 800467e:	ea41 0106 	orr.w	r1, r1, r6
 8004682:	f095 0f00 	teq	r5, #0
 8004686:	bf18      	it	ne
 8004688:	4770      	bxne	lr
 800468a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800468e:	0052      	lsls	r2, r2, #1
 8004690:	eb43 0303 	adc.w	r3, r3, r3
 8004694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004698:	bf08      	it	eq
 800469a:	3d01      	subeq	r5, #1
 800469c:	d0f7      	beq.n	800468e <__aeabi_dmul+0x1c6>
 800469e:	ea43 0306 	orr.w	r3, r3, r6
 80046a2:	4770      	bx	lr
 80046a4:	ea94 0f0c 	teq	r4, ip
 80046a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80046ac:	bf18      	it	ne
 80046ae:	ea95 0f0c 	teqne	r5, ip
 80046b2:	d00c      	beq.n	80046ce <__aeabi_dmul+0x206>
 80046b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046b8:	bf18      	it	ne
 80046ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046be:	d1d1      	bne.n	8004664 <__aeabi_dmul+0x19c>
 80046c0:	ea81 0103 	eor.w	r1, r1, r3
 80046c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046d2:	bf06      	itte	eq
 80046d4:	4610      	moveq	r0, r2
 80046d6:	4619      	moveq	r1, r3
 80046d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046dc:	d019      	beq.n	8004712 <__aeabi_dmul+0x24a>
 80046de:	ea94 0f0c 	teq	r4, ip
 80046e2:	d102      	bne.n	80046ea <__aeabi_dmul+0x222>
 80046e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80046e8:	d113      	bne.n	8004712 <__aeabi_dmul+0x24a>
 80046ea:	ea95 0f0c 	teq	r5, ip
 80046ee:	d105      	bne.n	80046fc <__aeabi_dmul+0x234>
 80046f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80046f4:	bf1c      	itt	ne
 80046f6:	4610      	movne	r0, r2
 80046f8:	4619      	movne	r1, r3
 80046fa:	d10a      	bne.n	8004712 <__aeabi_dmul+0x24a>
 80046fc:	ea81 0103 	eor.w	r1, r1, r3
 8004700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800470c:	f04f 0000 	mov.w	r0, #0
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800471a:	bd70      	pop	{r4, r5, r6, pc}

0800471c <__aeabi_ddiv>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800472a:	bf1d      	ittte	ne
 800472c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004730:	ea94 0f0c 	teqne	r4, ip
 8004734:	ea95 0f0c 	teqne	r5, ip
 8004738:	f000 f8a7 	bleq	800488a <__aeabi_ddiv+0x16e>
 800473c:	eba4 0405 	sub.w	r4, r4, r5
 8004740:	ea81 0e03 	eor.w	lr, r1, r3
 8004744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800474c:	f000 8088 	beq.w	8004860 <__aeabi_ddiv+0x144>
 8004750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800475c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800476c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004774:	429d      	cmp	r5, r3
 8004776:	bf08      	it	eq
 8004778:	4296      	cmpeq	r6, r2
 800477a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800477e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004782:	d202      	bcs.n	800478a <__aeabi_ddiv+0x6e>
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	ea4f 0232 	mov.w	r2, r2, rrx
 800478a:	1ab6      	subs	r6, r6, r2
 800478c:	eb65 0503 	sbc.w	r5, r5, r3
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	ea4f 0232 	mov.w	r2, r2, rrx
 8004796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800479a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800479e:	ebb6 0e02 	subs.w	lr, r6, r2
 80047a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047a6:	bf22      	ittt	cs
 80047a8:	1ab6      	subcs	r6, r6, r2
 80047aa:	4675      	movcs	r5, lr
 80047ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047be:	bf22      	ittt	cs
 80047c0:	1ab6      	subcs	r6, r6, r2
 80047c2:	4675      	movcs	r5, lr
 80047c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80047ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80047d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047d6:	bf22      	ittt	cs
 80047d8:	1ab6      	subcs	r6, r6, r2
 80047da:	4675      	movcs	r5, lr
 80047dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047ee:	bf22      	ittt	cs
 80047f0:	1ab6      	subcs	r6, r6, r2
 80047f2:	4675      	movcs	r5, lr
 80047f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80047f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80047fc:	d018      	beq.n	8004830 <__aeabi_ddiv+0x114>
 80047fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800480a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800480e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800481a:	d1c0      	bne.n	800479e <__aeabi_ddiv+0x82>
 800481c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004820:	d10b      	bne.n	800483a <__aeabi_ddiv+0x11e>
 8004822:	ea41 0100 	orr.w	r1, r1, r0
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800482e:	e7b6      	b.n	800479e <__aeabi_ddiv+0x82>
 8004830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004834:	bf04      	itt	eq
 8004836:	4301      	orreq	r1, r0
 8004838:	2000      	moveq	r0, #0
 800483a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800483e:	bf88      	it	hi
 8004840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004844:	f63f aeaf 	bhi.w	80045a6 <__aeabi_dmul+0xde>
 8004848:	ebb5 0c03 	subs.w	ip, r5, r3
 800484c:	bf04      	itt	eq
 800484e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004856:	f150 0000 	adcs.w	r0, r0, #0
 800485a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800486c:	bfc2      	ittt	gt
 800486e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004876:	bd70      	popgt	{r4, r5, r6, pc}
 8004878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800487c:	f04f 0e00 	mov.w	lr, #0
 8004880:	3c01      	subs	r4, #1
 8004882:	e690      	b.n	80045a6 <__aeabi_dmul+0xde>
 8004884:	ea45 0e06 	orr.w	lr, r5, r6
 8004888:	e68d      	b.n	80045a6 <__aeabi_dmul+0xde>
 800488a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800488e:	ea94 0f0c 	teq	r4, ip
 8004892:	bf08      	it	eq
 8004894:	ea95 0f0c 	teqeq	r5, ip
 8004898:	f43f af3b 	beq.w	8004712 <__aeabi_dmul+0x24a>
 800489c:	ea94 0f0c 	teq	r4, ip
 80048a0:	d10a      	bne.n	80048b8 <__aeabi_ddiv+0x19c>
 80048a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80048a6:	f47f af34 	bne.w	8004712 <__aeabi_dmul+0x24a>
 80048aa:	ea95 0f0c 	teq	r5, ip
 80048ae:	f47f af25 	bne.w	80046fc <__aeabi_dmul+0x234>
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	e72c      	b.n	8004712 <__aeabi_dmul+0x24a>
 80048b8:	ea95 0f0c 	teq	r5, ip
 80048bc:	d106      	bne.n	80048cc <__aeabi_ddiv+0x1b0>
 80048be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80048c2:	f43f aefd 	beq.w	80046c0 <__aeabi_dmul+0x1f8>
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	e722      	b.n	8004712 <__aeabi_dmul+0x24a>
 80048cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048d0:	bf18      	it	ne
 80048d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048d6:	f47f aec5 	bne.w	8004664 <__aeabi_dmul+0x19c>
 80048da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80048de:	f47f af0d 	bne.w	80046fc <__aeabi_dmul+0x234>
 80048e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80048e6:	f47f aeeb 	bne.w	80046c0 <__aeabi_dmul+0x1f8>
 80048ea:	e712      	b.n	8004712 <__aeabi_dmul+0x24a>

080048ec <__gedf2>:
 80048ec:	f04f 3cff 	mov.w	ip, #4294967295
 80048f0:	e006      	b.n	8004900 <__cmpdf2+0x4>
 80048f2:	bf00      	nop

080048f4 <__ledf2>:
 80048f4:	f04f 0c01 	mov.w	ip, #1
 80048f8:	e002      	b.n	8004900 <__cmpdf2+0x4>
 80048fa:	bf00      	nop

080048fc <__cmpdf2>:
 80048fc:	f04f 0c01 	mov.w	ip, #1
 8004900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800490c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004910:	bf18      	it	ne
 8004912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004916:	d01b      	beq.n	8004950 <__cmpdf2+0x54>
 8004918:	b001      	add	sp, #4
 800491a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800491e:	bf0c      	ite	eq
 8004920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004924:	ea91 0f03 	teqne	r1, r3
 8004928:	bf02      	ittt	eq
 800492a:	ea90 0f02 	teqeq	r0, r2
 800492e:	2000      	moveq	r0, #0
 8004930:	4770      	bxeq	lr
 8004932:	f110 0f00 	cmn.w	r0, #0
 8004936:	ea91 0f03 	teq	r1, r3
 800493a:	bf58      	it	pl
 800493c:	4299      	cmppl	r1, r3
 800493e:	bf08      	it	eq
 8004940:	4290      	cmpeq	r0, r2
 8004942:	bf2c      	ite	cs
 8004944:	17d8      	asrcs	r0, r3, #31
 8004946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800494a:	f040 0001 	orr.w	r0, r0, #1
 800494e:	4770      	bx	lr
 8004950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004958:	d102      	bne.n	8004960 <__cmpdf2+0x64>
 800495a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800495e:	d107      	bne.n	8004970 <__cmpdf2+0x74>
 8004960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004968:	d1d6      	bne.n	8004918 <__cmpdf2+0x1c>
 800496a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800496e:	d0d3      	beq.n	8004918 <__cmpdf2+0x1c>
 8004970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <__aeabi_cdrcmple>:
 8004978:	4684      	mov	ip, r0
 800497a:	4610      	mov	r0, r2
 800497c:	4662      	mov	r2, ip
 800497e:	468c      	mov	ip, r1
 8004980:	4619      	mov	r1, r3
 8004982:	4663      	mov	r3, ip
 8004984:	e000      	b.n	8004988 <__aeabi_cdcmpeq>
 8004986:	bf00      	nop

08004988 <__aeabi_cdcmpeq>:
 8004988:	b501      	push	{r0, lr}
 800498a:	f7ff ffb7 	bl	80048fc <__cmpdf2>
 800498e:	2800      	cmp	r0, #0
 8004990:	bf48      	it	mi
 8004992:	f110 0f00 	cmnmi.w	r0, #0
 8004996:	bd01      	pop	{r0, pc}

08004998 <__aeabi_dcmpeq>:
 8004998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800499c:	f7ff fff4 	bl	8004988 <__aeabi_cdcmpeq>
 80049a0:	bf0c      	ite	eq
 80049a2:	2001      	moveq	r0, #1
 80049a4:	2000      	movne	r0, #0
 80049a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80049aa:	bf00      	nop

080049ac <__aeabi_dcmplt>:
 80049ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049b0:	f7ff ffea 	bl	8004988 <__aeabi_cdcmpeq>
 80049b4:	bf34      	ite	cc
 80049b6:	2001      	movcc	r0, #1
 80049b8:	2000      	movcs	r0, #0
 80049ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80049be:	bf00      	nop

080049c0 <__aeabi_dcmple>:
 80049c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049c4:	f7ff ffe0 	bl	8004988 <__aeabi_cdcmpeq>
 80049c8:	bf94      	ite	ls
 80049ca:	2001      	movls	r0, #1
 80049cc:	2000      	movhi	r0, #0
 80049ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80049d2:	bf00      	nop

080049d4 <__aeabi_dcmpge>:
 80049d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049d8:	f7ff ffce 	bl	8004978 <__aeabi_cdrcmple>
 80049dc:	bf94      	ite	ls
 80049de:	2001      	movls	r0, #1
 80049e0:	2000      	movhi	r0, #0
 80049e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80049e6:	bf00      	nop

080049e8 <__aeabi_dcmpgt>:
 80049e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049ec:	f7ff ffc4 	bl	8004978 <__aeabi_cdrcmple>
 80049f0:	bf34      	ite	cc
 80049f2:	2001      	movcc	r0, #1
 80049f4:	2000      	movcs	r0, #0
 80049f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80049fa:	bf00      	nop

080049fc <__aeabi_dcmpun>:
 80049fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a04:	d102      	bne.n	8004a0c <__aeabi_dcmpun+0x10>
 8004a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a0a:	d10a      	bne.n	8004a22 <__aeabi_dcmpun+0x26>
 8004a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a14:	d102      	bne.n	8004a1c <__aeabi_dcmpun+0x20>
 8004a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a1a:	d102      	bne.n	8004a22 <__aeabi_dcmpun+0x26>
 8004a1c:	f04f 0000 	mov.w	r0, #0
 8004a20:	4770      	bx	lr
 8004a22:	f04f 0001 	mov.w	r0, #1
 8004a26:	4770      	bx	lr

08004a28 <__aeabi_d2f>:
 8004a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8004a30:	bf24      	itt	cs
 8004a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8004a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8004a3a:	d90d      	bls.n	8004a58 <__aeabi_d2f+0x30>
 8004a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004a50:	bf08      	it	eq
 8004a52:	f020 0001 	biceq.w	r0, r0, #1
 8004a56:	4770      	bx	lr
 8004a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8004a5c:	d121      	bne.n	8004aa2 <__aeabi_d2f+0x7a>
 8004a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8004a62:	bfbc      	itt	lt
 8004a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8004a68:	4770      	bxlt	lr
 8004a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004a72:	f1c2 0218 	rsb	r2, r2, #24
 8004a76:	f1c2 0c20 	rsb	ip, r2, #32
 8004a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8004a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8004a82:	bf18      	it	ne
 8004a84:	f040 0001 	orrne.w	r0, r0, #1
 8004a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004a94:	ea40 000c 	orr.w	r0, r0, ip
 8004a98:	fa23 f302 	lsr.w	r3, r3, r2
 8004a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004aa0:	e7cc      	b.n	8004a3c <__aeabi_d2f+0x14>
 8004aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004aa6:	d107      	bne.n	8004ab8 <__aeabi_d2f+0x90>
 8004aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004aac:	bf1e      	ittt	ne
 8004aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8004ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8004ab6:	4770      	bxne	lr
 8004ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8004abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_frsub>:
 8004ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8004acc:	e002      	b.n	8004ad4 <__addsf3>
 8004ace:	bf00      	nop

08004ad0 <__aeabi_fsub>:
 8004ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08004ad4 <__addsf3>:
 8004ad4:	0042      	lsls	r2, r0, #1
 8004ad6:	bf1f      	itttt	ne
 8004ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8004adc:	ea92 0f03 	teqne	r2, r3
 8004ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8004ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004ae8:	d06a      	beq.n	8004bc0 <__addsf3+0xec>
 8004aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8004aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8004af2:	bfc1      	itttt	gt
 8004af4:	18d2      	addgt	r2, r2, r3
 8004af6:	4041      	eorgt	r1, r0
 8004af8:	4048      	eorgt	r0, r1
 8004afa:	4041      	eorgt	r1, r0
 8004afc:	bfb8      	it	lt
 8004afe:	425b      	neglt	r3, r3
 8004b00:	2b19      	cmp	r3, #25
 8004b02:	bf88      	it	hi
 8004b04:	4770      	bxhi	lr
 8004b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8004b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004b12:	bf18      	it	ne
 8004b14:	4240      	negne	r0, r0
 8004b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004b22:	bf18      	it	ne
 8004b24:	4249      	negne	r1, r1
 8004b26:	ea92 0f03 	teq	r2, r3
 8004b2a:	d03f      	beq.n	8004bac <__addsf3+0xd8>
 8004b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8004b30:	fa41 fc03 	asr.w	ip, r1, r3
 8004b34:	eb10 000c 	adds.w	r0, r0, ip
 8004b38:	f1c3 0320 	rsb	r3, r3, #32
 8004b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8004b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004b44:	d502      	bpl.n	8004b4c <__addsf3+0x78>
 8004b46:	4249      	negs	r1, r1
 8004b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004b50:	d313      	bcc.n	8004b7a <__addsf3+0xa6>
 8004b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004b56:	d306      	bcc.n	8004b66 <__addsf3+0x92>
 8004b58:	0840      	lsrs	r0, r0, #1
 8004b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8004b5e:	f102 0201 	add.w	r2, r2, #1
 8004b62:	2afe      	cmp	r2, #254	@ 0xfe
 8004b64:	d251      	bcs.n	8004c0a <__addsf3+0x136>
 8004b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8004b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004b6e:	bf08      	it	eq
 8004b70:	f020 0001 	biceq.w	r0, r0, #1
 8004b74:	ea40 0003 	orr.w	r0, r0, r3
 8004b78:	4770      	bx	lr
 8004b7a:	0049      	lsls	r1, r1, #1
 8004b7c:	eb40 0000 	adc.w	r0, r0, r0
 8004b80:	3a01      	subs	r2, #1
 8004b82:	bf28      	it	cs
 8004b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8004b88:	d2ed      	bcs.n	8004b66 <__addsf3+0x92>
 8004b8a:	fab0 fc80 	clz	ip, r0
 8004b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8004b92:	ebb2 020c 	subs.w	r2, r2, ip
 8004b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8004b9a:	bfaa      	itet	ge
 8004b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8004ba0:	4252      	neglt	r2, r2
 8004ba2:	4318      	orrge	r0, r3
 8004ba4:	bfbc      	itt	lt
 8004ba6:	40d0      	lsrlt	r0, r2
 8004ba8:	4318      	orrlt	r0, r3
 8004baa:	4770      	bx	lr
 8004bac:	f092 0f00 	teq	r2, #0
 8004bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8004bb4:	bf06      	itte	eq
 8004bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8004bba:	3201      	addeq	r2, #1
 8004bbc:	3b01      	subne	r3, #1
 8004bbe:	e7b5      	b.n	8004b2c <__addsf3+0x58>
 8004bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004bc8:	bf18      	it	ne
 8004bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004bce:	d021      	beq.n	8004c14 <__addsf3+0x140>
 8004bd0:	ea92 0f03 	teq	r2, r3
 8004bd4:	d004      	beq.n	8004be0 <__addsf3+0x10c>
 8004bd6:	f092 0f00 	teq	r2, #0
 8004bda:	bf08      	it	eq
 8004bdc:	4608      	moveq	r0, r1
 8004bde:	4770      	bx	lr
 8004be0:	ea90 0f01 	teq	r0, r1
 8004be4:	bf1c      	itt	ne
 8004be6:	2000      	movne	r0, #0
 8004be8:	4770      	bxne	lr
 8004bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8004bee:	d104      	bne.n	8004bfa <__addsf3+0x126>
 8004bf0:	0040      	lsls	r0, r0, #1
 8004bf2:	bf28      	it	cs
 8004bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8004bf8:	4770      	bx	lr
 8004bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8004bfe:	bf3c      	itt	cc
 8004c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8004c04:	4770      	bxcc	lr
 8004c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8004c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004c12:	4770      	bx	lr
 8004c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8004c18:	bf16      	itet	ne
 8004c1a:	4608      	movne	r0, r1
 8004c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8004c20:	4601      	movne	r1, r0
 8004c22:	0242      	lsls	r2, r0, #9
 8004c24:	bf06      	itte	eq
 8004c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8004c2a:	ea90 0f01 	teqeq	r0, r1
 8004c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8004c32:	4770      	bx	lr

08004c34 <__aeabi_ui2f>:
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e004      	b.n	8004c44 <__aeabi_i2f+0x8>
 8004c3a:	bf00      	nop

08004c3c <__aeabi_i2f>:
 8004c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8004c40:	bf48      	it	mi
 8004c42:	4240      	negmi	r0, r0
 8004c44:	ea5f 0c00 	movs.w	ip, r0
 8004c48:	bf08      	it	eq
 8004c4a:	4770      	bxeq	lr
 8004c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8004c50:	4601      	mov	r1, r0
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	e01c      	b.n	8004c92 <__aeabi_l2f+0x2a>

08004c58 <__aeabi_ul2f>:
 8004c58:	ea50 0201 	orrs.w	r2, r0, r1
 8004c5c:	bf08      	it	eq
 8004c5e:	4770      	bxeq	lr
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e00a      	b.n	8004c7c <__aeabi_l2f+0x14>
 8004c66:	bf00      	nop

08004c68 <__aeabi_l2f>:
 8004c68:	ea50 0201 	orrs.w	r2, r0, r1
 8004c6c:	bf08      	it	eq
 8004c6e:	4770      	bxeq	lr
 8004c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8004c74:	d502      	bpl.n	8004c7c <__aeabi_l2f+0x14>
 8004c76:	4240      	negs	r0, r0
 8004c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004c7c:	ea5f 0c01 	movs.w	ip, r1
 8004c80:	bf02      	ittt	eq
 8004c82:	4684      	moveq	ip, r0
 8004c84:	4601      	moveq	r1, r0
 8004c86:	2000      	moveq	r0, #0
 8004c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8004c8c:	bf08      	it	eq
 8004c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8004c96:	fabc f28c 	clz	r2, ip
 8004c9a:	3a08      	subs	r2, #8
 8004c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8004ca0:	db10      	blt.n	8004cc4 <__aeabi_l2f+0x5c>
 8004ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8004ca6:	4463      	add	r3, ip
 8004ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8004cac:	f1c2 0220 	rsb	r2, r2, #32
 8004cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8004cb8:	eb43 0002 	adc.w	r0, r3, r2
 8004cbc:	bf08      	it	eq
 8004cbe:	f020 0001 	biceq.w	r0, r0, #1
 8004cc2:	4770      	bx	lr
 8004cc4:	f102 0220 	add.w	r2, r2, #32
 8004cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8004ccc:	f1c2 0220 	rsb	r2, r2, #32
 8004cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8004cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8004cd8:	eb43 0002 	adc.w	r0, r3, r2
 8004cdc:	bf08      	it	eq
 8004cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004ce2:	4770      	bx	lr

08004ce4 <__aeabi_fmul>:
 8004ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004cec:	bf1e      	ittt	ne
 8004cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8004cf2:	ea92 0f0c 	teqne	r2, ip
 8004cf6:	ea93 0f0c 	teqne	r3, ip
 8004cfa:	d06f      	beq.n	8004ddc <__aeabi_fmul+0xf8>
 8004cfc:	441a      	add	r2, r3
 8004cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8004d02:	0240      	lsls	r0, r0, #9
 8004d04:	bf18      	it	ne
 8004d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8004d0a:	d01e      	beq.n	8004d4a <__aeabi_fmul+0x66>
 8004d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8004d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8004d18:	fba0 3101 	umull	r3, r1, r0, r1
 8004d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8004d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004d24:	bf3e      	ittt	cc
 8004d26:	0049      	lslcc	r1, r1, #1
 8004d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8004d2c:	005b      	lslcc	r3, r3, #1
 8004d2e:	ea40 0001 	orr.w	r0, r0, r1
 8004d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8004d36:	2afd      	cmp	r2, #253	@ 0xfd
 8004d38:	d81d      	bhi.n	8004d76 <__aeabi_fmul+0x92>
 8004d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004d42:	bf08      	it	eq
 8004d44:	f020 0001 	biceq.w	r0, r0, #1
 8004d48:	4770      	bx	lr
 8004d4a:	f090 0f00 	teq	r0, #0
 8004d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8004d52:	bf08      	it	eq
 8004d54:	0249      	lsleq	r1, r1, #9
 8004d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8004d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8004d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8004d60:	bfc2      	ittt	gt
 8004d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8004d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8004d6a:	4770      	bxgt	lr
 8004d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	3a01      	subs	r2, #1
 8004d76:	dc5d      	bgt.n	8004e34 <__aeabi_fmul+0x150>
 8004d78:	f112 0f19 	cmn.w	r2, #25
 8004d7c:	bfdc      	itt	le
 8004d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8004d82:	4770      	bxle	lr
 8004d84:	f1c2 0200 	rsb	r2, r2, #0
 8004d88:	0041      	lsls	r1, r0, #1
 8004d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8004d8e:	f1c2 0220 	rsb	r2, r2, #32
 8004d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8004d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8004d9a:	f140 0000 	adc.w	r0, r0, #0
 8004d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8004da2:	bf08      	it	eq
 8004da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004da8:	4770      	bx	lr
 8004daa:	f092 0f00 	teq	r2, #0
 8004dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8004db2:	bf02      	ittt	eq
 8004db4:	0040      	lsleq	r0, r0, #1
 8004db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8004dba:	3a01      	subeq	r2, #1
 8004dbc:	d0f9      	beq.n	8004db2 <__aeabi_fmul+0xce>
 8004dbe:	ea40 000c 	orr.w	r0, r0, ip
 8004dc2:	f093 0f00 	teq	r3, #0
 8004dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004dca:	bf02      	ittt	eq
 8004dcc:	0049      	lsleq	r1, r1, #1
 8004dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8004dd2:	3b01      	subeq	r3, #1
 8004dd4:	d0f9      	beq.n	8004dca <__aeabi_fmul+0xe6>
 8004dd6:	ea41 010c 	orr.w	r1, r1, ip
 8004dda:	e78f      	b.n	8004cfc <__aeabi_fmul+0x18>
 8004ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8004de0:	ea92 0f0c 	teq	r2, ip
 8004de4:	bf18      	it	ne
 8004de6:	ea93 0f0c 	teqne	r3, ip
 8004dea:	d00a      	beq.n	8004e02 <__aeabi_fmul+0x11e>
 8004dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8004df0:	bf18      	it	ne
 8004df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004df6:	d1d8      	bne.n	8004daa <__aeabi_fmul+0xc6>
 8004df8:	ea80 0001 	eor.w	r0, r0, r1
 8004dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8004e00:	4770      	bx	lr
 8004e02:	f090 0f00 	teq	r0, #0
 8004e06:	bf17      	itett	ne
 8004e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8004e0c:	4608      	moveq	r0, r1
 8004e0e:	f091 0f00 	teqne	r1, #0
 8004e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8004e16:	d014      	beq.n	8004e42 <__aeabi_fmul+0x15e>
 8004e18:	ea92 0f0c 	teq	r2, ip
 8004e1c:	d101      	bne.n	8004e22 <__aeabi_fmul+0x13e>
 8004e1e:	0242      	lsls	r2, r0, #9
 8004e20:	d10f      	bne.n	8004e42 <__aeabi_fmul+0x15e>
 8004e22:	ea93 0f0c 	teq	r3, ip
 8004e26:	d103      	bne.n	8004e30 <__aeabi_fmul+0x14c>
 8004e28:	024b      	lsls	r3, r1, #9
 8004e2a:	bf18      	it	ne
 8004e2c:	4608      	movne	r0, r1
 8004e2e:	d108      	bne.n	8004e42 <__aeabi_fmul+0x15e>
 8004e30:	ea80 0001 	eor.w	r0, r0, r1
 8004e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8004e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004e40:	4770      	bx	lr
 8004e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8004e4a:	4770      	bx	lr

08004e4c <__aeabi_fdiv>:
 8004e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004e54:	bf1e      	ittt	ne
 8004e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8004e5a:	ea92 0f0c 	teqne	r2, ip
 8004e5e:	ea93 0f0c 	teqne	r3, ip
 8004e62:	d069      	beq.n	8004f38 <__aeabi_fdiv+0xec>
 8004e64:	eba2 0203 	sub.w	r2, r2, r3
 8004e68:	ea80 0c01 	eor.w	ip, r0, r1
 8004e6c:	0249      	lsls	r1, r1, #9
 8004e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8004e72:	d037      	beq.n	8004ee4 <__aeabi_fdiv+0x98>
 8004e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8004e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8004e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf38      	it	cc
 8004e88:	005b      	lslcc	r3, r3, #1
 8004e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8004e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8004e92:	428b      	cmp	r3, r1
 8004e94:	bf24      	itt	cs
 8004e96:	1a5b      	subcs	r3, r3, r1
 8004e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8004e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8004ea0:	bf24      	itt	cs
 8004ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8004ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8004eae:	bf24      	itt	cs
 8004eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8004eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8004ebc:	bf24      	itt	cs
 8004ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8004ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	bf18      	it	ne
 8004eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8004ece:	d1e0      	bne.n	8004e92 <__aeabi_fdiv+0x46>
 8004ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8004ed2:	f63f af50 	bhi.w	8004d76 <__aeabi_fmul+0x92>
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004edc:	bf08      	it	eq
 8004ede:	f020 0001 	biceq.w	r0, r0, #1
 8004ee2:	4770      	bx	lr
 8004ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8004ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8004eec:	327f      	adds	r2, #127	@ 0x7f
 8004eee:	bfc2      	ittt	gt
 8004ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8004ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8004ef8:	4770      	bxgt	lr
 8004efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	3a01      	subs	r2, #1
 8004f04:	e737      	b.n	8004d76 <__aeabi_fmul+0x92>
 8004f06:	f092 0f00 	teq	r2, #0
 8004f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8004f0e:	bf02      	ittt	eq
 8004f10:	0040      	lsleq	r0, r0, #1
 8004f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8004f16:	3a01      	subeq	r2, #1
 8004f18:	d0f9      	beq.n	8004f0e <__aeabi_fdiv+0xc2>
 8004f1a:	ea40 000c 	orr.w	r0, r0, ip
 8004f1e:	f093 0f00 	teq	r3, #0
 8004f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004f26:	bf02      	ittt	eq
 8004f28:	0049      	lsleq	r1, r1, #1
 8004f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8004f2e:	3b01      	subeq	r3, #1
 8004f30:	d0f9      	beq.n	8004f26 <__aeabi_fdiv+0xda>
 8004f32:	ea41 010c 	orr.w	r1, r1, ip
 8004f36:	e795      	b.n	8004e64 <__aeabi_fdiv+0x18>
 8004f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8004f3c:	ea92 0f0c 	teq	r2, ip
 8004f40:	d108      	bne.n	8004f54 <__aeabi_fdiv+0x108>
 8004f42:	0242      	lsls	r2, r0, #9
 8004f44:	f47f af7d 	bne.w	8004e42 <__aeabi_fmul+0x15e>
 8004f48:	ea93 0f0c 	teq	r3, ip
 8004f4c:	f47f af70 	bne.w	8004e30 <__aeabi_fmul+0x14c>
 8004f50:	4608      	mov	r0, r1
 8004f52:	e776      	b.n	8004e42 <__aeabi_fmul+0x15e>
 8004f54:	ea93 0f0c 	teq	r3, ip
 8004f58:	d104      	bne.n	8004f64 <__aeabi_fdiv+0x118>
 8004f5a:	024b      	lsls	r3, r1, #9
 8004f5c:	f43f af4c 	beq.w	8004df8 <__aeabi_fmul+0x114>
 8004f60:	4608      	mov	r0, r1
 8004f62:	e76e      	b.n	8004e42 <__aeabi_fmul+0x15e>
 8004f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8004f68:	bf18      	it	ne
 8004f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004f6e:	d1ca      	bne.n	8004f06 <__aeabi_fdiv+0xba>
 8004f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004f74:	f47f af5c 	bne.w	8004e30 <__aeabi_fmul+0x14c>
 8004f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8004f7c:	f47f af3c 	bne.w	8004df8 <__aeabi_fmul+0x114>
 8004f80:	e75f      	b.n	8004e42 <__aeabi_fmul+0x15e>
 8004f82:	bf00      	nop

08004f84 <__aeabi_f2iz>:
 8004f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8004f8c:	d30f      	bcc.n	8004fae <__aeabi_f2iz+0x2a>
 8004f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8004f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8004f96:	d90d      	bls.n	8004fb4 <__aeabi_f2iz+0x30>
 8004f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8004f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fa0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8004fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8004fa8:	bf18      	it	ne
 8004faa:	4240      	negne	r0, r0
 8004fac:	4770      	bx	lr
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	4770      	bx	lr
 8004fb4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8004fb8:	d101      	bne.n	8004fbe <__aeabi_f2iz+0x3a>
 8004fba:	0242      	lsls	r2, r0, #9
 8004fbc:	d105      	bne.n	8004fca <__aeabi_f2iz+0x46>
 8004fbe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8004fc2:	bf08      	it	eq
 8004fc4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004fc8:	4770      	bx	lr
 8004fca:	f04f 0000 	mov.w	r0, #0
 8004fce:	4770      	bx	lr

08004fd0 <test_function>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

 void test_function(void)
 {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
     for (volatile int i = 0; i < 1000; i++);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	e002      	b.n	8004fe2 <test_function+0x12>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fe8:	dbf8      	blt.n	8004fdc <test_function+0xc>
 }
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
	...

08004ff8 <DWT_Init>:
void DWT_Init(void) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
    DEMCR |= (1 << 24);      // Enable TRC
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <DWT_Init+0x2c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <DWT_Init+0x2c>)
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005006:	6013      	str	r3, [r2, #0]
    DWT_CYCCNT = 0;          // Clear the cycle counter
 8005008:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <DWT_Init+0x30>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
    DWT_CTRL |= 1;           // Enable the cycle counter
 800500e:	4b07      	ldr	r3, [pc, #28]	@ (800502c <DWT_Init+0x34>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a06      	ldr	r2, [pc, #24]	@ (800502c <DWT_Init+0x34>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	e000edfc 	.word	0xe000edfc
 8005028:	e0001004 	.word	0xe0001004
 800502c:	e0001000 	.word	0xe0001000

08005030 <measure_function_time>:

uint32_t measure_function_time(void (*func)(void)) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    DWT_CYCCNT = 0;          // Reset counter
 8005038:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <measure_function_time+0x20>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
    func();                  // Call the function
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4798      	blx	r3
    return DWT_CYCCNT;       // Return cycle count
 8005042:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <measure_function_time+0x20>)
 8005044:	681b      	ldr	r3, [r3, #0]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	e0001004 	.word	0xe0001004

08005054 <read_button>:
    // PB2 as output push-pull, 2 MHz
    GPIOB->CRL &= ~(0xF << (LED_PIN * 4));
    GPIOB->CRL |=  (0x2 << (LED_PIN * 4));     // MODE=10 (2 MHz), CNF=00
    GPIOB->ODR &= ~(1 << LED_PIN);
}
uint8_t read_button(void) {
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
    return ((GPIOA->IDR & (1 << BUTTON_PIN)) != 0);  // HIGH = pressed
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <read_button+0x20>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010800 	.word	0x40010800

08005078 <led_on>:
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |   // Use processor clock
                     SysTick_CTRL_TICKINT_Msk   |   // Enable SysTick interrupt
                     SysTick_CTRL_ENABLE_Msk;       // Enable SysTick
}
// Turn LED ON
void led_on(void) {
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << LED_PIN);
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <led_on+0x18>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a03      	ldr	r2, [pc, #12]	@ (8005090 <led_on+0x18>)
 8005082:	f043 0304 	orr.w	r3, r3, #4
 8005086:	60d3      	str	r3, [r2, #12]
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40010c00 	.word	0x40010c00

08005094 <led_off>:
// Turn LED OFF
void led_off(void) {
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << LED_PIN);
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <led_off+0x18>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a03      	ldr	r2, [pc, #12]	@ (80050ac <led_off+0x18>)
 800509e:	f023 0304 	bic.w	r3, r3, #4
 80050a2:	60d3      	str	r3, [r2, #12]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40010c00 	.word	0x40010c00

080050b0 <recurse>:
    __set_MSP(boot_stack);
    // 4. Jump to the application's Reset Handler
    void (*boot_entry)(void) = (void*)boot_reset;
    boot_entry();
}
void recurse(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	recurse();
 80050b4:	f7ff fffc 	bl	80050b0 <recurse>
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART1_SendChar>:

    // 5. Enable USART1, TX and RX
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}

void UART1_SendChar(char c) {
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE)); // Wait until transmit data register is empty
 80050c6:	bf00      	nop
 80050c8:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <UART1_SendChar+0x28>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f9      	beq.n	80050c8 <UART1_SendChar+0xc>
    USART1->DR = c;
 80050d4:	4a03      	ldr	r2, [pc, #12]	@ (80050e4 <UART1_SendChar+0x28>)
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	6053      	str	r3, [r2, #4]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40013800 	.word	0x40013800

080050e8 <uart_send_string>:
char UART1_ReceiveChar(void) {
    while (!(USART1->SR & USART_SR_RXNE)); // Wait until data received
    return USART1->DR;
}

void uart_send_string(const char* str) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
    while (*str) {
 80050f0:	e006      	b.n	8005100 <uart_send_string+0x18>
        UART1_SendChar(*str++);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ffde 	bl	80050bc <UART1_SendChar>
    while (*str) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f4      	bne.n	80050f2 <uart_send_string+0xa>
    }
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <itoa>:
void itoa(int num, char* str) {
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
    int i = 0, isNegative = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]

    if (num == 0) {
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <itoa+0x34>
        str[i++] = '0';
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4413      	add	r3, r2
 8005138:	2230      	movs	r2, #48	@ 0x30
 800513a:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4413      	add	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
        return;
 8005146:	e05d      	b.n	8005204 <itoa+0xf0>
    }

    if (num < 0) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	da25      	bge.n	800519a <itoa+0x86>
        isNegative = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
        num = -num;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	425b      	negs	r3, r3
 8005156:	607b      	str	r3, [r7, #4]
    }

    while (num != 0) {
 8005158:	e01f      	b.n	800519a <itoa+0x86>
        int rem = num % 10;
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <itoa+0xf8>)
 800515e:	fb83 1302 	smull	r1, r3, r3, r2
 8005162:	1099      	asrs	r1, r3, #2
 8005164:	17d3      	asrs	r3, r2, #31
 8005166:	1ac9      	subs	r1, r1, r3
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	60bb      	str	r3, [r7, #8]
        str[i++] = rem + '0';
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	61f9      	str	r1, [r7, #28]
 800517e:	4619      	mov	r1, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	440b      	add	r3, r1
 8005184:	3230      	adds	r2, #48	@ 0x30
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
        num = num / 10;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <itoa+0xf8>)
 800518e:	fb82 1203 	smull	r1, r2, r2, r3
 8005192:	1092      	asrs	r2, r2, #2
 8005194:	17db      	asrs	r3, r3, #31
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	607b      	str	r3, [r7, #4]
    while (num != 0) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1dc      	bne.n	800515a <itoa+0x46>
    }

    if (isNegative)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <itoa+0xa2>
        str[i++] = '-';
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	61fa      	str	r2, [r7, #28]
 80051ac:	461a      	mov	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	222d      	movs	r2, #45	@ 0x2d
 80051b4:	701a      	strb	r2, [r3, #0]

    str[i] = '\0';
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]

    // reverse the string
    for (int j = 0, k = i - 1; j < k; j++, k--) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e017      	b.n	80051fc <itoa+0xe8>
        char temp = str[j];
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	73fb      	strb	r3, [r7, #15]
        str[j] = str[k];
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	441a      	add	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	440b      	add	r3, r1
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	701a      	strb	r2, [r3, #0]
        str[k] = temp;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	4413      	add	r3, r2
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	701a      	strb	r2, [r3, #0]
    for (int j = 0, k = i - 1; j < k; j++, k--) {
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	429a      	cmp	r2, r3
 8005202:	dbe3      	blt.n	80051cc <itoa+0xb8>
    }
}
 8005204:	3724      	adds	r7, #36	@ 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	66666667 	.word	0x66666667

08005210 <ftoa>:
        result += fraction / divisor;
    }

    return sign * result;
}
void ftoa(float n, char* res, int afterpoint) {
 8005210:	b5b0      	push	{r4, r5, r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
    int ipart = (int)n;
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff feb1 	bl	8004f84 <__aeabi_f2iz>
 8005222:	4603      	mov	r3, r0
 8005224:	61bb      	str	r3, [r7, #24]
    float fpart = n - (float)ipart;
 8005226:	69b8      	ldr	r0, [r7, #24]
 8005228:	f7ff fd08 	bl	8004c3c <__aeabi_i2f>
 800522c:	4603      	mov	r3, r0
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fc4d 	bl	8004ad0 <__aeabi_fsub>
 8005236:	4603      	mov	r3, r0
 8005238:	617b      	str	r3, [r7, #20]

    itoa(ipart, res);
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	69b8      	ldr	r0, [r7, #24]
 800523e:	f7ff ff69 	bl	8005114 <itoa>

    int i = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
    while (res[i] != '\0') i++;
 8005246:	e002      	b.n	800524e <ftoa+0x3e>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f6      	bne.n	8005248 <ftoa+0x38>

    res[i++] = '.';
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	61fa      	str	r2, [r7, #28]
 8005260:	461a      	mov	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	222e      	movs	r2, #46	@ 0x2e
 8005268:	701a      	strb	r2, [r3, #0]

    fpart = fpart * pow(10, afterpoint);
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7ff f8d4 	bl	8004418 <__aeabi_f2d>
 8005270:	4604      	mov	r4, r0
 8005272:	460d      	mov	r5, r1
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff f8bd 	bl	80043f4 <__aeabi_i2d>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	490f      	ldr	r1, [pc, #60]	@ (80052c0 <ftoa+0xb0>)
 8005284:	f000 ff48 	bl	8006118 <pow>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4620      	mov	r0, r4
 800528e:	4629      	mov	r1, r5
 8005290:	f7ff f91a 	bl	80044c8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	f7ff fbc4 	bl	8004a28 <__aeabi_d2f>
 80052a0:	4603      	mov	r3, r0
 80052a2:	617b      	str	r3, [r7, #20]

    itoa((int)fpart, res + i);
 80052a4:	6978      	ldr	r0, [r7, #20]
 80052a6:	f7ff fe6d 	bl	8004f84 <__aeabi_f2iz>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4413      	add	r3, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	f7ff ff2f 	bl	8005114 <itoa>
}
 80052b6:	bf00      	nop
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bdb0      	pop	{r4, r5, r7, pc}
 80052be:	bf00      	nop
 80052c0:	40240000 	.word	0x40240000

080052c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	@ 0x30
 80052c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
uint32_t last_debounce=0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
uint8_t last_read=0,current_read=0,button_state=0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052e0:	f000 f9a0 	bl	8005624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052e4:	f000 f89a 	bl	800541c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052e8:	f000 f8de 	bl	80054a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 80052ec:	f7ff fe84 	bl	8004ff8 <DWT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t cycles = measure_function_time(test_function);
 80052f0:	4843      	ldr	r0, [pc, #268]	@ (8005400 <main+0x13c>)
 80052f2:	f7ff fe9d 	bl	8005030 <measure_function_time>
 80052f6:	6278      	str	r0, [r7, #36]	@ 0x24
	  float time_us = (float)cycles / 72.0;
 80052f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052fa:	f7ff fc9b 	bl	8004c34 <__aeabi_ui2f>
 80052fe:	4603      	mov	r3, r0
 8005300:	4940      	ldr	r1, [pc, #256]	@ (8005404 <main+0x140>)
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fda2 	bl	8004e4c <__aeabi_fdiv>
 8005308:	4603      	mov	r3, r0
 800530a:	623b      	str	r3, [r7, #32]
ftoa(time_us, buf, 3);  // 3 decimal places
 800530c:	463b      	mov	r3, r7
 800530e:	2203      	movs	r2, #3
 8005310:	4619      	mov	r1, r3
 8005312:	6a38      	ldr	r0, [r7, #32]
 8005314:	f7ff ff7c 	bl	8005210 <ftoa>
uart_send_string(buf);
 8005318:	463b      	mov	r3, r7
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fee4 	bl	80050e8 <uart_send_string>
uart_send_string("\n");
 8005320:	4839      	ldr	r0, [pc, #228]	@ (8005408 <main+0x144>)
 8005322:	f7ff fee1 	bl	80050e8 <uart_send_string>
HAL_Delay(1000);
 8005326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800532a:	f000 f9dd 	bl	80056e8 <HAL_Delay>
current_read=read_button();
 800532e:	f7ff fe91 	bl	8005054 <read_button>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
if(current_read!=last_read){
 8005338:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800533c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005340:	429a      	cmp	r2, r3
 8005342:	d002      	beq.n	800534a <main+0x86>
	last_debounce=mytick;
 8005344:	4b31      	ldr	r3, [pc, #196]	@ (800540c <main+0x148>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
if((mytick-last_debounce)>DEBOUNCE_TIME){
 800534a:	4b30      	ldr	r3, [pc, #192]	@ (800540c <main+0x148>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b32      	cmp	r3, #50	@ 0x32
 8005354:	d94f      	bls.n	80053f6 <main+0x132>
	if(button_state!=current_read){
 8005356:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800535a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800535e:	429a      	cmp	r2, r3
 8005360:	d049      	beq.n	80053f6 <main+0x132>
		button_state=current_read;
 8005362:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		if(button_state){
 800536a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03f      	beq.n	80053f2 <main+0x12e>
			cnt++;
 8005372:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <main+0x14c>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <main+0x14c>)
 800537c:	701a      	strb	r2, [r3, #0]
			led_on();
 800537e:	f7ff fe7b 	bl	8005078 <led_on>
			if(cnt==16){// Enable UsageFault and division-by-zero trap
 8005382:	4b23      	ldr	r3, [pc, #140]	@ (8005410 <main+0x14c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b10      	cmp	r3, #16
 8005388:	d110      	bne.n	80053ac <main+0xe8>
				SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;    // Enable UsageFault
 800538a:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <main+0x150>)
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <main+0x150>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005394:	6253      	str	r3, [r2, #36]	@ 0x24
				SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;          // Trap divide-by-zero
 8005396:	4b1f      	ldr	r3, [pc, #124]	@ (8005414 <main+0x150>)
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <main+0x150>)
 800539c:	f043 0310 	orr.w	r3, r3, #16
 80053a0:	6153      	str	r3, [r2, #20]
                int a=(1/0);
 80053a2:	2201      	movs	r2, #1
 80053a4:	2300      	movs	r3, #0
 80053a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80053aa:	61fb      	str	r3, [r7, #28]
			}
			if(cnt==7){//stack over flow/corruption
 80053ac:	4b18      	ldr	r3, [pc, #96]	@ (8005410 <main+0x14c>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	d101      	bne.n	80053b8 <main+0xf4>
				recurse();  // eventually triggers Hard Fault
 80053b4:	f7ff fe7c 	bl	80050b0 <recurse>
			}
			if(cnt==8){//executing code from invalid memory
 80053b8:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <main+0x14c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d104      	bne.n	80053ca <main+0x106>
				void (*invalid_code)(void) = (void *)0xFFFFFFF1;
 80053c0:	f06f 030e 	mvn.w	r3, #14
 80053c4:	61bb      	str	r3, [r7, #24]
				invalid_code();  // crashes
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	4798      	blx	r3
			}
			if(cnt==9){//dereferenceing null pointer
 80053ca:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <main+0x14c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	d104      	bne.n	80053dc <main+0x118>
				volatile uint32_t *ptr = (uint32_t *)0x00000000;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
				*ptr = 0x12345678;  // causes Hard Fault
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005418 <main+0x154>)
 80053da:	601a      	str	r2, [r3, #0]
			}
			if(cnt==10){//unaligned memory access
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <main+0x14c>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b0a      	cmp	r3, #10
 80053e2:	d108      	bne.n	80053f6 <main+0x132>
				volatile uint32_t *bad = (uint32_t*)0xFFFFFFF0; // Invalid address
 80053e4:	f06f 030f 	mvn.w	r3, #15
 80053e8:	613b      	str	r3, [r7, #16]
				uint32_t val = *bad;  // Will cause HardFault
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e001      	b.n	80053f6 <main+0x132>
			}
		}else{
			led_off();
 80053f2:	f7ff fe4f 	bl	8005094 <led_off>
		}
	}
}
last_read = current_read;
 80053f6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  {
 80053fe:	e777      	b.n	80052f0 <main+0x2c>
 8005400:	08004fd1 	.word	0x08004fd1
 8005404:	42900000 	.word	0x42900000
 8005408:	08006f48 	.word	0x08006f48
 800540c:	20000078 	.word	0x20000078
 8005410:	2000007c 	.word	0x2000007c
 8005414:	e000ed00 	.word	0xe000ed00
 8005418:	12345678 	.word	0x12345678

0800541c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b090      	sub	sp, #64	@ 0x40
 8005420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005422:	f107 0318 	add.w	r3, r7, #24
 8005426:	2228      	movs	r2, #40	@ 0x28
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fe42 	bl	80060b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800543e:	2301      	movs	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800544c:	2301      	movs	r3, #1
 800544e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005450:	2302      	movs	r3, #2
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800545a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005460:	f107 0318 	add.w	r3, r7, #24
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fa47 	bl	80058f8 <HAL_RCC_OscConfig>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005470:	f000 f830 	bl	80054d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005474:	230f      	movs	r3, #15
 8005476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005478:	2302      	movs	r3, #2
 800547a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fcb4 	bl	8005dfc <HAL_RCC_ClockConfig>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800549a:	f000 f81b 	bl	80054d4 <Error_Handler>
  }
}
 800549e:	bf00      	nop
 80054a0:	3740      	adds	r7, #64	@ 0x40
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ae:	4b08      	ldr	r3, [pc, #32]	@ (80054d0 <MX_GPIO_Init+0x28>)
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	4a07      	ldr	r2, [pc, #28]	@ (80054d0 <MX_GPIO_Init+0x28>)
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	6193      	str	r3, [r2, #24]
 80054ba:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <MX_GPIO_Init+0x28>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	40021000 	.word	0x40021000

080054d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054d8:	b672      	cpsid	i
}
 80054da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <Error_Handler+0x8>

080054e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054e6:	4b15      	ldr	r3, [pc, #84]	@ (800553c <HAL_MspInit+0x5c>)
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	4a14      	ldr	r2, [pc, #80]	@ (800553c <HAL_MspInit+0x5c>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6193      	str	r3, [r2, #24]
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <HAL_MspInit+0x5c>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054fe:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <HAL_MspInit+0x5c>)
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4a0e      	ldr	r2, [pc, #56]	@ (800553c <HAL_MspInit+0x5c>)
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005508:	61d3      	str	r3, [r2, #28]
 800550a:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <HAL_MspInit+0x5c>)
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005516:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_MspInit+0x60>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	4a04      	ldr	r2, [pc, #16]	@ (8005540 <HAL_MspInit+0x60>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	40021000 	.word	0x40021000
 8005540:	40010000 	.word	0x40010000

08005544 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005548:	f3bf 8f4f 	dsb	sy
}
 800554c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800554e:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <__NVIC_SystemReset+0x24>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005556:	4904      	ldr	r1, [pc, #16]	@ (8005568 <__NVIC_SystemReset+0x24>)
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <__NVIC_SystemReset+0x28>)
 800555a:	4313      	orrs	r3, r2
 800555c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800555e:	f3bf 8f4f 	dsb	sy
}
 8005562:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <__NVIC_SystemReset+0x20>
 8005568:	e000ed00 	.word	0xe000ed00
 800556c:	05fa0004 	.word	0x05fa0004

08005570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
		NVIC_SystemReset();
 8005574:	f7ff ffe6 	bl	8005544 <__NVIC_SystemReset>

08005578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		NVIC_SystemReset();
 800557c:	f7ff ffe2 	bl	8005544 <__NVIC_SystemReset>

08005580 <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
		NVIC_SystemReset();
 8005584:	f7ff ffde 	bl	8005544 <__NVIC_SystemReset>

08005588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
		NVIC_SystemReset();
 800558c:	f7ff ffda 	bl	8005544 <__NVIC_SystemReset>

08005590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
		NVIC_SystemReset();
 8005594:	f7ff ffd6 	bl	8005544 <__NVIC_SystemReset>

08005598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
	NVIC_SystemReset();
 800559c:	f7ff ffd2 	bl	8005544 <__NVIC_SystemReset>

080055a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
	NVIC_SystemReset();
 80055a4:	f7ff ffce 	bl	8005544 <__NVIC_SystemReset>

080055a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
	NVIC_SystemReset();
 80055ac:	f7ff ffca 	bl	8005544 <__NVIC_SystemReset>

080055b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	mytick++;
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <SysTick_Handler+0x18>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	4a03      	ldr	r2, [pc, #12]	@ (80055c8 <SysTick_Handler+0x18>)
 80055bc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055be:	f000 f877 	bl	80056b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000078 	.word	0x20000078

080055cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80055d8:	f7ff fff8 	bl	80055cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055dc:	480b      	ldr	r0, [pc, #44]	@ (800560c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80055de:	490c      	ldr	r1, [pc, #48]	@ (8005610 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80055e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005614 <LoopFillZerobss+0x16>)
  movs r3, #0
 80055e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e4:	e002      	b.n	80055ec <LoopCopyDataInit>

080055e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ea:	3304      	adds	r3, #4

080055ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f0:	d3f9      	bcc.n	80055e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055f2:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80055f4:	4c09      	ldr	r4, [pc, #36]	@ (800561c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055f8:	e001      	b.n	80055fe <LoopFillZerobss>

080055fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055fc:	3204      	adds	r2, #4

080055fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005600:	d3fb      	bcc.n	80055fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005602:	f000 fd65 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005606:	f7ff fe5d 	bl	80052c4 <main>
  bx lr
 800560a:	4770      	bx	lr
  ldr r0, =_sdata
 800560c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005610:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8005614:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 8005618:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800561c:	200001bc 	.word	0x200001bc

08005620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005620:	e7fe      	b.n	8005620 <ADC1_2_IRQHandler>
	...

08005624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005628:	4b08      	ldr	r3, [pc, #32]	@ (800564c <HAL_Init+0x28>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a07      	ldr	r2, [pc, #28]	@ (800564c <HAL_Init+0x28>)
 800562e:	f043 0310 	orr.w	r3, r3, #16
 8005632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005634:	2003      	movs	r0, #3
 8005636:	f000 f92b 	bl	8005890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800563a:	200f      	movs	r0, #15
 800563c:	f000 f808 	bl	8005650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005640:	f7ff ff4e 	bl	80054e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40022000 	.word	0x40022000

08005650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005658:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <HAL_InitTick+0x54>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <HAL_InitTick+0x58>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005666:	fbb3 f3f1 	udiv	r3, r3, r1
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f935 	bl	80058de <HAL_SYSTICK_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e00e      	b.n	800569c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b0f      	cmp	r3, #15
 8005682:	d80a      	bhi.n	800569a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005684:	2200      	movs	r2, #0
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	f000 f90b 	bl	80058a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005690:	4a06      	ldr	r2, [pc, #24]	@ (80056ac <HAL_InitTick+0x5c>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000000 	.word	0x20000000
 80056a8:	20000008 	.word	0x20000008
 80056ac:	20000004 	.word	0x20000004

080056b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_IncTick+0x1c>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_IncTick+0x20>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4413      	add	r3, r2
 80056c0:	4a03      	ldr	r2, [pc, #12]	@ (80056d0 <HAL_IncTick+0x20>)
 80056c2:	6013      	str	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	20000008 	.word	0x20000008
 80056d0:	20000080 	.word	0x20000080

080056d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return uwTick;
 80056d8:	4b02      	ldr	r3, [pc, #8]	@ (80056e4 <HAL_GetTick+0x10>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	20000080 	.word	0x20000080

080056e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d005      	beq.n	800570e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_Delay+0x44>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800570e:	bf00      	nop
 8005710:	f7ff ffe0 	bl	80056d4 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d8f7      	bhi.n	8005710 <HAL_Delay+0x28>
  {
  }
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000008 	.word	0x20000008

08005730 <__NVIC_SetPriorityGrouping>:
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <__NVIC_SetPriorityGrouping+0x44>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800574c:	4013      	ands	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800575c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005762:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <__NVIC_SetPriorityGrouping+0x44>)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	60d3      	str	r3, [r2, #12]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <__NVIC_GetPriorityGrouping>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <__NVIC_GetPriorityGrouping+0x18>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	f003 0307 	and.w	r3, r3, #7
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <__NVIC_SetPriority>:
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	db0a      	blt.n	80057be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	490c      	ldr	r1, [pc, #48]	@ (80057e0 <__NVIC_SetPriority+0x4c>)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	0112      	lsls	r2, r2, #4
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	440b      	add	r3, r1
 80057b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057bc:	e00a      	b.n	80057d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	4908      	ldr	r1, [pc, #32]	@ (80057e4 <__NVIC_SetPriority+0x50>)
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	3b04      	subs	r3, #4
 80057cc:	0112      	lsls	r2, r2, #4
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	440b      	add	r3, r1
 80057d2:	761a      	strb	r2, [r3, #24]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e100 	.word	0xe000e100
 80057e4:	e000ed00 	.word	0xe000ed00

080057e8 <NVIC_EncodePriority>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	@ 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f1c3 0307 	rsb	r3, r3, #7
 8005802:	2b04      	cmp	r3, #4
 8005804:	bf28      	it	cs
 8005806:	2304      	movcs	r3, #4
 8005808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3304      	adds	r3, #4
 800580e:	2b06      	cmp	r3, #6
 8005810:	d902      	bls.n	8005818 <NVIC_EncodePriority+0x30>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3b03      	subs	r3, #3
 8005816:	e000      	b.n	800581a <NVIC_EncodePriority+0x32>
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43da      	mvns	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	401a      	ands	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005830:	f04f 31ff 	mov.w	r1, #4294967295
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	fa01 f303 	lsl.w	r3, r1, r3
 800583a:	43d9      	mvns	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005840:	4313      	orrs	r3, r2
}
 8005842:	4618      	mov	r0, r3
 8005844:	3724      	adds	r7, #36	@ 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3b01      	subs	r3, #1
 8005858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800585c:	d301      	bcc.n	8005862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800585e:	2301      	movs	r3, #1
 8005860:	e00f      	b.n	8005882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005862:	4a0a      	ldr	r2, [pc, #40]	@ (800588c <SysTick_Config+0x40>)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800586a:	210f      	movs	r1, #15
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	f7ff ff90 	bl	8005794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005874:	4b05      	ldr	r3, [pc, #20]	@ (800588c <SysTick_Config+0x40>)
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800587a:	4b04      	ldr	r3, [pc, #16]	@ (800588c <SysTick_Config+0x40>)
 800587c:	2207      	movs	r2, #7
 800587e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	e000e010 	.word	0xe000e010

08005890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff49 	bl	8005730 <__NVIC_SetPriorityGrouping>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4603      	mov	r3, r0
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058b8:	f7ff ff5e 	bl	8005778 <__NVIC_GetPriorityGrouping>
 80058bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7ff ff90 	bl	80057e8 <NVIC_EncodePriority>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ff5f 	bl	8005794 <__NVIC_SetPriority>
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ffb0 	bl	800584c <SysTick_Config>
 80058ec:	4603      	mov	r3, r0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e272      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8087 	beq.w	8005a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005918:	4b92      	ldr	r3, [pc, #584]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b04      	cmp	r3, #4
 8005922:	d00c      	beq.n	800593e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005924:	4b8f      	ldr	r3, [pc, #572]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d112      	bne.n	8005956 <HAL_RCC_OscConfig+0x5e>
 8005930:	4b8c      	ldr	r3, [pc, #560]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593c:	d10b      	bne.n	8005956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593e:	4b89      	ldr	r3, [pc, #548]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d06c      	beq.n	8005a24 <HAL_RCC_OscConfig+0x12c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d168      	bne.n	8005a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e24c      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x76>
 8005960:	4b80      	ldr	r3, [pc, #512]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a7f      	ldr	r2, [pc, #508]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e02e      	b.n	80059cc <HAL_RCC_OscConfig+0xd4>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x98>
 8005976:	4b7b      	ldr	r3, [pc, #492]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a7a      	ldr	r2, [pc, #488]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 800597c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b78      	ldr	r3, [pc, #480]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a77      	ldr	r2, [pc, #476]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e01d      	b.n	80059cc <HAL_RCC_OscConfig+0xd4>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0xbc>
 800599a:	4b72      	ldr	r3, [pc, #456]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a71      	ldr	r2, [pc, #452]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0xd4>
 80059b4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b68      	ldr	r3, [pc, #416]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a67      	ldr	r2, [pc, #412]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7ff fe7e 	bl	80056d4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7ff fe7a 	bl	80056d4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	@ 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e200      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0xe4>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7ff fe6a 	bl	80056d4 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a04:	f7ff fe66 	bl	80056d4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	@ 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e1ec      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	4b53      	ldr	r3, [pc, #332]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x10c>
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d063      	beq.n	8005afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a32:	4b4c      	ldr	r3, [pc, #304]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a3e:	4b49      	ldr	r3, [pc, #292]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d11c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x18c>
 8005a4a:	4b46      	ldr	r3, [pc, #280]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a56:	4b43      	ldr	r3, [pc, #268]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_RCC_OscConfig+0x176>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e1c0      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4939      	ldr	r1, [pc, #228]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a82:	e03a      	b.n	8005afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a8c:	4b36      	ldr	r3, [pc, #216]	@ (8005b68 <HAL_RCC_OscConfig+0x270>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7ff fe1f 	bl	80056d4 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9a:	f7ff fe1b 	bl	80056d4 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e1a1      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aac:	4b2d      	ldr	r3, [pc, #180]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4927      	ldr	r1, [pc, #156]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]
 8005acc:	e015      	b.n	8005afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ace:	4b26      	ldr	r3, [pc, #152]	@ (8005b68 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7ff fdfe 	bl	80056d4 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005adc:	f7ff fdfa 	bl	80056d4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e180      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	4b1d      	ldr	r3, [pc, #116]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d03a      	beq.n	8005b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d019      	beq.n	8005b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0e:	4b17      	ldr	r3, [pc, #92]	@ (8005b6c <HAL_RCC_OscConfig+0x274>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b14:	f7ff fdde 	bl	80056d4 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1c:	f7ff fdda 	bl	80056d4 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e160      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <HAL_RCC_OscConfig+0x26c>)
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	f000 fa9c 	bl	8006078 <RCC_Delay>
 8005b40:	e01c      	b.n	8005b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b42:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <HAL_RCC_OscConfig+0x274>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b48:	f7ff fdc4 	bl	80056d4 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4e:	e00f      	b.n	8005b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b50:	f7ff fdc0 	bl	80056d4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d908      	bls.n	8005b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e146      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	42420000 	.word	0x42420000
 8005b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b70:	4b92      	ldr	r3, [pc, #584]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e9      	bne.n	8005b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a6 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9a:	4b88      	ldr	r3, [pc, #544]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4a87      	ldr	r2, [pc, #540]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	61d3      	str	r3, [r2, #28]
 8005ba6:	4b85      	ldr	r3, [pc, #532]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b82      	ldr	r3, [pc, #520]	@ (8005dc0 <HAL_RCC_OscConfig+0x4c8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc0 <HAL_RCC_OscConfig+0x4c8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8005dc0 <HAL_RCC_OscConfig+0x4c8>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7ff fd81 	bl	80056d4 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7ff fd7d 	bl	80056d4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	@ 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e103      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	4b75      	ldr	r3, [pc, #468]	@ (8005dc0 <HAL_RCC_OscConfig+0x4c8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x312>
 8005bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	4a6e      	ldr	r2, [pc, #440]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6213      	str	r3, [r2, #32]
 8005c08:	e02d      	b.n	8005c66 <HAL_RCC_OscConfig+0x36e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x334>
 8005c12:	4b6a      	ldr	r3, [pc, #424]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	4a69      	ldr	r2, [pc, #420]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6213      	str	r3, [r2, #32]
 8005c1e:	4b67      	ldr	r3, [pc, #412]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4a66      	ldr	r2, [pc, #408]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	6213      	str	r3, [r2, #32]
 8005c2a:	e01c      	b.n	8005c66 <HAL_RCC_OscConfig+0x36e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d10c      	bne.n	8005c4e <HAL_RCC_OscConfig+0x356>
 8005c34:	4b61      	ldr	r3, [pc, #388]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	4a60      	ldr	r2, [pc, #384]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	6213      	str	r3, [r2, #32]
 8005c40:	4b5e      	ldr	r3, [pc, #376]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	4a5d      	ldr	r2, [pc, #372]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	6213      	str	r3, [r2, #32]
 8005c4c:	e00b      	b.n	8005c66 <HAL_RCC_OscConfig+0x36e>
 8005c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4a5a      	ldr	r2, [pc, #360]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	6213      	str	r3, [r2, #32]
 8005c5a:	4b58      	ldr	r3, [pc, #352]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	4a57      	ldr	r2, [pc, #348]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d015      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7ff fd31 	bl	80056d4 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7ff fd2d 	bl	80056d4 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0b1      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ee      	beq.n	8005c76 <HAL_RCC_OscConfig+0x37e>
 8005c98:	e014      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9a:	f7ff fd1b 	bl	80056d4 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7ff fd17 	bl	80056d4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e09b      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb8:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ee      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4b3c      	ldr	r3, [pc, #240]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	4a3b      	ldr	r2, [pc, #236]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005cd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8087 	beq.w	8005dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce0:	4b36      	ldr	r3, [pc, #216]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d061      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d146      	bne.n	8005d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf4:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <HAL_RCC_OscConfig+0x4cc>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7ff fceb 	bl	80056d4 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d02:	f7ff fce7 	bl	80056d4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e06d      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d14:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1f0      	bne.n	8005d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d28:	d108      	bne.n	8005d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d2a:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4921      	ldr	r1, [pc, #132]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a19      	ldr	r1, [r3, #32]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	491b      	ldr	r1, [pc, #108]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7ff fcbb 	bl	80056d4 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d62:	f7ff fcb7 	bl	80056d4 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e03d      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x46a>
 8005d80:	e035      	b.n	8005dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d88:	f7ff fca4 	bl	80056d4 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7ff fca0 	bl	80056d4 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e026      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005da2:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x498>
 8005dae:	e01e      	b.n	8005dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e019      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40007000 	.word	0x40007000
 8005dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_RCC_OscConfig+0x500>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d001      	beq.n	8005dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40021000 	.word	0x40021000

08005dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0d0      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e10:	4b6a      	ldr	r3, [pc, #424]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d910      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b67      	ldr	r3, [pc, #412]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 0207 	bic.w	r2, r3, #7
 8005e26:	4965      	ldr	r1, [pc, #404]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a52      	ldr	r2, [pc, #328]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d040      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d115      	bne.n	8005eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eba:	4b41      	ldr	r3, [pc, #260]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e073      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e06b      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eda:	4b39      	ldr	r3, [pc, #228]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4936      	ldr	r1, [pc, #216]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eec:	f7ff fbf2 	bl	80056d4 <HAL_GetTick>
 8005ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	e00a      	b.n	8005f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef4:	f7ff fbee 	bl	80056d4 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e053      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 020c 	and.w	r2, r3, #12
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d1eb      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b27      	ldr	r3, [pc, #156]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d210      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0207 	bic.w	r2, r3, #7
 8005f32:	4922      	ldr	r1, [pc, #136]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f821 	bl	8005fd0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490a      	ldr	r1, [pc, #40]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <HAL_RCC_ClockConfig+0x1d0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fb50 	bl	8005650 <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40022000 	.word	0x40022000
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	08006f4c 	.word	0x08006f4c
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	20000004 	.word	0x20000004

08005fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fea:	4b1e      	ldr	r3, [pc, #120]	@ (8006064 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d002      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x30>
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d003      	beq.n	8006006 <HAL_RCC_GetSysClockFreq+0x36>
 8005ffe:	e027      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006000:	4b19      	ldr	r3, [pc, #100]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x98>)
 8006002:	613b      	str	r3, [r7, #16]
      break;
 8006004:	e027      	b.n	8006056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	0c9b      	lsrs	r3, r3, #18
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	4a17      	ldr	r2, [pc, #92]	@ (800606c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006010:	5cd3      	ldrb	r3, [r2, r3]
 8006012:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d010      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800601e:	4b11      	ldr	r3, [pc, #68]	@ (8006064 <HAL_RCC_GetSysClockFreq+0x94>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	0c5b      	lsrs	r3, r3, #17
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	4a11      	ldr	r2, [pc, #68]	@ (8006070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a0d      	ldr	r2, [pc, #52]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x98>)
 8006032:	fb03 f202 	mul.w	r2, r3, r2
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	fbb2 f3f3 	udiv	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e004      	b.n	800604a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0c      	ldr	r2, [pc, #48]	@ (8006074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	613b      	str	r3, [r7, #16]
      break;
 800604e:	e002      	b.n	8006056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006050:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x98>)
 8006052:	613b      	str	r3, [r7, #16]
      break;
 8006054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006056:	693b      	ldr	r3, [r7, #16]
}
 8006058:	4618      	mov	r0, r3
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	007a1200 	.word	0x007a1200
 800606c:	08006f5c 	.word	0x08006f5c
 8006070:	08006f6c 	.word	0x08006f6c
 8006074:	003d0900 	.word	0x003d0900

08006078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006080:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <RCC_Delay+0x34>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0a      	ldr	r2, [pc, #40]	@ (80060b0 <RCC_Delay+0x38>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0a5b      	lsrs	r3, r3, #9
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006094:	bf00      	nop
  }
  while (Delay --);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1e5a      	subs	r2, r3, #1
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f9      	bne.n	8006094 <RCC_Delay+0x1c>
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr
 80060ac:	20000000 	.word	0x20000000
 80060b0:	10624dd3 	.word	0x10624dd3

080060b4 <memset>:
 80060b4:	4603      	mov	r3, r0
 80060b6:	4402      	add	r2, r0
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d100      	bne.n	80060be <memset+0xa>
 80060bc:	4770      	bx	lr
 80060be:	f803 1b01 	strb.w	r1, [r3], #1
 80060c2:	e7f9      	b.n	80060b8 <memset+0x4>

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	@ (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	2000000c 	.word	0x2000000c

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	2600      	movs	r6, #0
 80060d4:	4d0c      	ldr	r5, [pc, #48]	@ (8006108 <__libc_init_array+0x38>)
 80060d6:	4c0d      	ldr	r4, [pc, #52]	@ (800610c <__libc_init_array+0x3c>)
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	f000 ff26 	bl	8006f30 <_init>
 80060e4:	2600      	movs	r6, #0
 80060e6:	4d0a      	ldr	r5, [pc, #40]	@ (8006110 <__libc_init_array+0x40>)
 80060e8:	4c0a      	ldr	r4, [pc, #40]	@ (8006114 <__libc_init_array+0x44>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	08006fb0 	.word	0x08006fb0
 800610c:	08006fb0 	.word	0x08006fb0
 8006110:	08006fb0 	.word	0x08006fb0
 8006114:	08006fb4 	.word	0x08006fb4

08006118 <pow>:
 8006118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800611c:	4614      	mov	r4, r2
 800611e:	461d      	mov	r5, r3
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	f000 f868 	bl	80061f8 <__ieee754_pow>
 8006128:	4622      	mov	r2, r4
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	462b      	mov	r3, r5
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fe fc62 	bl	80049fc <__aeabi_dcmpun>
 8006138:	bbc8      	cbnz	r0, 80061ae <pow+0x96>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f7fe fc29 	bl	8004998 <__aeabi_dcmpeq>
 8006146:	b1b8      	cbz	r0, 8006178 <pow+0x60>
 8006148:	2200      	movs	r2, #0
 800614a:	2300      	movs	r3, #0
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fe fc22 	bl	8004998 <__aeabi_dcmpeq>
 8006154:	2800      	cmp	r0, #0
 8006156:	d141      	bne.n	80061dc <pow+0xc4>
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f000 f844 	bl	80061e8 <finite>
 8006160:	b328      	cbz	r0, 80061ae <pow+0x96>
 8006162:	2200      	movs	r2, #0
 8006164:	2300      	movs	r3, #0
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f7fe fc1f 	bl	80049ac <__aeabi_dcmplt>
 800616e:	b1f0      	cbz	r0, 80061ae <pow+0x96>
 8006170:	f7ff ffa8 	bl	80060c4 <__errno>
 8006174:	2322      	movs	r3, #34	@ 0x22
 8006176:	e019      	b.n	80061ac <pow+0x94>
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f000 f834 	bl	80061e8 <finite>
 8006180:	b9c8      	cbnz	r0, 80061b6 <pow+0x9e>
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f000 f82f 	bl	80061e8 <finite>
 800618a:	b1a0      	cbz	r0, 80061b6 <pow+0x9e>
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f000 f82a 	bl	80061e8 <finite>
 8006194:	b178      	cbz	r0, 80061b6 <pow+0x9e>
 8006196:	4632      	mov	r2, r6
 8006198:	463b      	mov	r3, r7
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fe fc2d 	bl	80049fc <__aeabi_dcmpun>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0e4      	beq.n	8006170 <pow+0x58>
 80061a6:	f7ff ff8d 	bl	80060c4 <__errno>
 80061aa:	2321      	movs	r3, #33	@ 0x21
 80061ac:	6003      	str	r3, [r0, #0]
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b6:	2200      	movs	r2, #0
 80061b8:	2300      	movs	r3, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fe fbeb 	bl	8004998 <__aeabi_dcmpeq>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0f3      	beq.n	80061ae <pow+0x96>
 80061c6:	4640      	mov	r0, r8
 80061c8:	4649      	mov	r1, r9
 80061ca:	f000 f80d 	bl	80061e8 <finite>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d0ed      	beq.n	80061ae <pow+0x96>
 80061d2:	4620      	mov	r0, r4
 80061d4:	4629      	mov	r1, r5
 80061d6:	f000 f807 	bl	80061e8 <finite>
 80061da:	e7c8      	b.n	800616e <pow+0x56>
 80061dc:	2600      	movs	r6, #0
 80061de:	4f01      	ldr	r7, [pc, #4]	@ (80061e4 <pow+0xcc>)
 80061e0:	e7e5      	b.n	80061ae <pow+0x96>
 80061e2:	bf00      	nop
 80061e4:	3ff00000 	.word	0x3ff00000

080061e8 <finite>:
 80061e8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80061ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80061f0:	0fc0      	lsrs	r0, r0, #31
 80061f2:	4770      	bx	lr
 80061f4:	0000      	movs	r0, r0
	...

080061f8 <__ieee754_pow>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	b091      	sub	sp, #68	@ 0x44
 80061fe:	e9cd 2300 	strd	r2, r3, [sp]
 8006202:	468b      	mov	fp, r1
 8006204:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006208:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800620c:	4682      	mov	sl, r0
 800620e:	ea57 0001 	orrs.w	r0, r7, r1
 8006212:	d112      	bne.n	800623a <__ieee754_pow+0x42>
 8006214:	4653      	mov	r3, sl
 8006216:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800621a:	18db      	adds	r3, r3, r3
 800621c:	4152      	adcs	r2, r2
 800621e:	4298      	cmp	r0, r3
 8006220:	4b93      	ldr	r3, [pc, #588]	@ (8006470 <__ieee754_pow+0x278>)
 8006222:	4193      	sbcs	r3, r2
 8006224:	f080 84cd 	bcs.w	8006bc2 <__ieee754_pow+0x9ca>
 8006228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800622c:	4650      	mov	r0, sl
 800622e:	4659      	mov	r1, fp
 8006230:	f7fd ff94 	bl	800415c <__adddf3>
 8006234:	b011      	add	sp, #68	@ 0x44
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	4b8e      	ldr	r3, [pc, #568]	@ (8006474 <__ieee754_pow+0x27c>)
 800623c:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8006240:	429d      	cmp	r5, r3
 8006242:	465e      	mov	r6, fp
 8006244:	46d1      	mov	r9, sl
 8006246:	d80b      	bhi.n	8006260 <__ieee754_pow+0x68>
 8006248:	d105      	bne.n	8006256 <__ieee754_pow+0x5e>
 800624a:	f1ba 0f00 	cmp.w	sl, #0
 800624e:	d1eb      	bne.n	8006228 <__ieee754_pow+0x30>
 8006250:	42af      	cmp	r7, r5
 8006252:	d8e9      	bhi.n	8006228 <__ieee754_pow+0x30>
 8006254:	e001      	b.n	800625a <__ieee754_pow+0x62>
 8006256:	429f      	cmp	r7, r3
 8006258:	d802      	bhi.n	8006260 <__ieee754_pow+0x68>
 800625a:	429f      	cmp	r7, r3
 800625c:	d10f      	bne.n	800627e <__ieee754_pow+0x86>
 800625e:	b171      	cbz	r1, 800627e <__ieee754_pow+0x86>
 8006260:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8006264:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006268:	ea56 0609 	orrs.w	r6, r6, r9
 800626c:	d1dc      	bne.n	8006228 <__ieee754_pow+0x30>
 800626e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006272:	18db      	adds	r3, r3, r3
 8006274:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006278:	4152      	adcs	r2, r2
 800627a:	429e      	cmp	r6, r3
 800627c:	e7d0      	b.n	8006220 <__ieee754_pow+0x28>
 800627e:	2e00      	cmp	r6, #0
 8006280:	462b      	mov	r3, r5
 8006282:	da42      	bge.n	800630a <__ieee754_pow+0x112>
 8006284:	4a7c      	ldr	r2, [pc, #496]	@ (8006478 <__ieee754_pow+0x280>)
 8006286:	4297      	cmp	r7, r2
 8006288:	d856      	bhi.n	8006338 <__ieee754_pow+0x140>
 800628a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800628e:	4297      	cmp	r7, r2
 8006290:	f240 84a6 	bls.w	8006be0 <__ieee754_pow+0x9e8>
 8006294:	153a      	asrs	r2, r7, #20
 8006296:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800629a:	2a14      	cmp	r2, #20
 800629c:	dd18      	ble.n	80062d0 <__ieee754_pow+0xd8>
 800629e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80062a2:	fa21 f402 	lsr.w	r4, r1, r2
 80062a6:	fa04 f202 	lsl.w	r2, r4, r2
 80062aa:	428a      	cmp	r2, r1
 80062ac:	f040 8498 	bne.w	8006be0 <__ieee754_pow+0x9e8>
 80062b0:	f004 0401 	and.w	r4, r4, #1
 80062b4:	f1c4 0402 	rsb	r4, r4, #2
 80062b8:	2900      	cmp	r1, #0
 80062ba:	d159      	bne.n	8006370 <__ieee754_pow+0x178>
 80062bc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80062c0:	d149      	bne.n	8006356 <__ieee754_pow+0x15e>
 80062c2:	4652      	mov	r2, sl
 80062c4:	465b      	mov	r3, fp
 80062c6:	4650      	mov	r0, sl
 80062c8:	4659      	mov	r1, fp
 80062ca:	f7fe f8fd 	bl	80044c8 <__aeabi_dmul>
 80062ce:	e7b1      	b.n	8006234 <__ieee754_pow+0x3c>
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d14c      	bne.n	800636e <__ieee754_pow+0x176>
 80062d4:	f1c2 0214 	rsb	r2, r2, #20
 80062d8:	fa47 f402 	asr.w	r4, r7, r2
 80062dc:	fa04 f202 	lsl.w	r2, r4, r2
 80062e0:	42ba      	cmp	r2, r7
 80062e2:	f040 847a 	bne.w	8006bda <__ieee754_pow+0x9e2>
 80062e6:	f004 0401 	and.w	r4, r4, #1
 80062ea:	f1c4 0402 	rsb	r4, r4, #2
 80062ee:	4a63      	ldr	r2, [pc, #396]	@ (800647c <__ieee754_pow+0x284>)
 80062f0:	4297      	cmp	r7, r2
 80062f2:	d1e3      	bne.n	80062bc <__ieee754_pow+0xc4>
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	f280 846b 	bge.w	8006bd2 <__ieee754_pow+0x9da>
 80062fc:	4652      	mov	r2, sl
 80062fe:	465b      	mov	r3, fp
 8006300:	2000      	movs	r0, #0
 8006302:	495e      	ldr	r1, [pc, #376]	@ (800647c <__ieee754_pow+0x284>)
 8006304:	f7fe fa0a 	bl	800471c <__aeabi_ddiv>
 8006308:	e794      	b.n	8006234 <__ieee754_pow+0x3c>
 800630a:	2400      	movs	r4, #0
 800630c:	bb81      	cbnz	r1, 8006370 <__ieee754_pow+0x178>
 800630e:	4a59      	ldr	r2, [pc, #356]	@ (8006474 <__ieee754_pow+0x27c>)
 8006310:	4297      	cmp	r7, r2
 8006312:	d1ec      	bne.n	80062ee <__ieee754_pow+0xf6>
 8006314:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8006318:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800631c:	ea53 0309 	orrs.w	r3, r3, r9
 8006320:	f000 844f 	beq.w	8006bc2 <__ieee754_pow+0x9ca>
 8006324:	4b56      	ldr	r3, [pc, #344]	@ (8006480 <__ieee754_pow+0x288>)
 8006326:	429d      	cmp	r5, r3
 8006328:	d908      	bls.n	800633c <__ieee754_pow+0x144>
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	f280 844c 	bge.w	8006bca <__ieee754_pow+0x9d2>
 8006332:	2000      	movs	r0, #0
 8006334:	2100      	movs	r1, #0
 8006336:	e77d      	b.n	8006234 <__ieee754_pow+0x3c>
 8006338:	2402      	movs	r4, #2
 800633a:	e7e7      	b.n	800630c <__ieee754_pow+0x114>
 800633c:	f1b8 0f00 	cmp.w	r8, #0
 8006340:	f04f 0000 	mov.w	r0, #0
 8006344:	f04f 0100 	mov.w	r1, #0
 8006348:	f6bf af74 	bge.w	8006234 <__ieee754_pow+0x3c>
 800634c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006350:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006354:	e76e      	b.n	8006234 <__ieee754_pow+0x3c>
 8006356:	4a4b      	ldr	r2, [pc, #300]	@ (8006484 <__ieee754_pow+0x28c>)
 8006358:	4590      	cmp	r8, r2
 800635a:	d109      	bne.n	8006370 <__ieee754_pow+0x178>
 800635c:	2e00      	cmp	r6, #0
 800635e:	db07      	blt.n	8006370 <__ieee754_pow+0x178>
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	b011      	add	sp, #68	@ 0x44
 8006366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	f000 bd0f 	b.w	8006d8c <__ieee754_sqrt>
 800636e:	2400      	movs	r4, #0
 8006370:	4650      	mov	r0, sl
 8006372:	4659      	mov	r1, fp
 8006374:	9302      	str	r3, [sp, #8]
 8006376:	f000 fc69 	bl	8006c4c <fabs>
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	d127      	bne.n	80063d2 <__ieee754_pow+0x1da>
 8006382:	4a3e      	ldr	r2, [pc, #248]	@ (800647c <__ieee754_pow+0x284>)
 8006384:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8006388:	4594      	cmp	ip, r2
 800638a:	d000      	beq.n	800638e <__ieee754_pow+0x196>
 800638c:	bb0d      	cbnz	r5, 80063d2 <__ieee754_pow+0x1da>
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	da05      	bge.n	80063a0 <__ieee754_pow+0x1a8>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	2000      	movs	r0, #0
 800639a:	4938      	ldr	r1, [pc, #224]	@ (800647c <__ieee754_pow+0x284>)
 800639c:	f7fe f9be 	bl	800471c <__aeabi_ddiv>
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	f6bf af47 	bge.w	8006234 <__ieee754_pow+0x3c>
 80063a6:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80063aa:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80063ae:	4325      	orrs	r5, r4
 80063b0:	d108      	bne.n	80063c4 <__ieee754_pow+0x1cc>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fd fecd 	bl	8004158 <__aeabi_dsub>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	e79f      	b.n	8006304 <__ieee754_pow+0x10c>
 80063c4:	2c01      	cmp	r4, #1
 80063c6:	f47f af35 	bne.w	8006234 <__ieee754_pow+0x3c>
 80063ca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063ce:	4619      	mov	r1, r3
 80063d0:	e730      	b.n	8006234 <__ieee754_pow+0x3c>
 80063d2:	0ff2      	lsrs	r2, r6, #31
 80063d4:	3a01      	subs	r2, #1
 80063d6:	ea52 0c04 	orrs.w	ip, r2, r4
 80063da:	d102      	bne.n	80063e2 <__ieee754_pow+0x1ea>
 80063dc:	4652      	mov	r2, sl
 80063de:	465b      	mov	r3, fp
 80063e0:	e7e9      	b.n	80063b6 <__ieee754_pow+0x1be>
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	3c01      	subs	r4, #1
 80063e8:	4314      	orrs	r4, r2
 80063ea:	bf14      	ite	ne
 80063ec:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800647c <__ieee754_pow+0x284>
 80063f0:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006488 <__ieee754_pow+0x290>
 80063f4:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80063f8:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80063fc:	f240 8104 	bls.w	8006608 <__ieee754_pow+0x410>
 8006400:	4b22      	ldr	r3, [pc, #136]	@ (800648c <__ieee754_pow+0x294>)
 8006402:	429f      	cmp	r7, r3
 8006404:	4b1e      	ldr	r3, [pc, #120]	@ (8006480 <__ieee754_pow+0x288>)
 8006406:	d913      	bls.n	8006430 <__ieee754_pow+0x238>
 8006408:	429d      	cmp	r5, r3
 800640a:	d808      	bhi.n	800641e <__ieee754_pow+0x226>
 800640c:	f1b8 0f00 	cmp.w	r8, #0
 8006410:	da08      	bge.n	8006424 <__ieee754_pow+0x22c>
 8006412:	2000      	movs	r0, #0
 8006414:	b011      	add	sp, #68	@ 0x44
 8006416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	f000 bcb1 	b.w	8006d80 <__math_oflow>
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	dcf6      	bgt.n	8006412 <__ieee754_pow+0x21a>
 8006424:	2000      	movs	r0, #0
 8006426:	b011      	add	sp, #68	@ 0x44
 8006428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	f000 bca3 	b.w	8006d76 <__math_uflow>
 8006430:	429d      	cmp	r5, r3
 8006432:	d20c      	bcs.n	800644e <__ieee754_pow+0x256>
 8006434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006438:	2200      	movs	r2, #0
 800643a:	2300      	movs	r3, #0
 800643c:	f7fe fab6 	bl	80049ac <__aeabi_dcmplt>
 8006440:	3800      	subs	r0, #0
 8006442:	bf18      	it	ne
 8006444:	2001      	movne	r0, #1
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	daec      	bge.n	8006426 <__ieee754_pow+0x22e>
 800644c:	e7e2      	b.n	8006414 <__ieee754_pow+0x21c>
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <__ieee754_pow+0x284>)
 8006450:	2200      	movs	r2, #0
 8006452:	429d      	cmp	r5, r3
 8006454:	d91c      	bls.n	8006490 <__ieee754_pow+0x298>
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	2300      	movs	r3, #0
 800645c:	f7fe faa6 	bl	80049ac <__aeabi_dcmplt>
 8006460:	3800      	subs	r0, #0
 8006462:	bf18      	it	ne
 8006464:	2001      	movne	r0, #1
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	dcd3      	bgt.n	8006414 <__ieee754_pow+0x21c>
 800646c:	e7db      	b.n	8006426 <__ieee754_pow+0x22e>
 800646e:	bf00      	nop
 8006470:	fff00000 	.word	0xfff00000
 8006474:	7ff00000 	.word	0x7ff00000
 8006478:	433fffff 	.word	0x433fffff
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	3fefffff 	.word	0x3fefffff
 8006484:	3fe00000 	.word	0x3fe00000
 8006488:	bff00000 	.word	0xbff00000
 800648c:	43f00000 	.word	0x43f00000
 8006490:	4b59      	ldr	r3, [pc, #356]	@ (80065f8 <__ieee754_pow+0x400>)
 8006492:	f7fd fe61 	bl	8004158 <__aeabi_dsub>
 8006496:	a350      	add	r3, pc, #320	@ (adr r3, 80065d8 <__ieee754_pow+0x3e0>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	f7fe f812 	bl	80044c8 <__aeabi_dmul>
 80064a4:	a34e      	add	r3, pc, #312	@ (adr r3, 80065e0 <__ieee754_pow+0x3e8>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	4606      	mov	r6, r0
 80064ac:	460f      	mov	r7, r1
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fe f809 	bl	80044c8 <__aeabi_dmul>
 80064b6:	2200      	movs	r2, #0
 80064b8:	4682      	mov	sl, r0
 80064ba:	468b      	mov	fp, r1
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	4b4e      	ldr	r3, [pc, #312]	@ (80065fc <__ieee754_pow+0x404>)
 80064c2:	f7fe f801 	bl	80044c8 <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	a147      	add	r1, pc, #284	@ (adr r1, 80065e8 <__ieee754_pow+0x3f0>)
 80064cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d0:	f7fd fe42 	bl	8004158 <__aeabi_dsub>
 80064d4:	4622      	mov	r2, r4
 80064d6:	462b      	mov	r3, r5
 80064d8:	f7fd fff6 	bl	80044c8 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	2000      	movs	r0, #0
 80064e2:	4947      	ldr	r1, [pc, #284]	@ (8006600 <__ieee754_pow+0x408>)
 80064e4:	f7fd fe38 	bl	8004158 <__aeabi_dsub>
 80064e8:	4622      	mov	r2, r4
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	462b      	mov	r3, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7fd ffe8 	bl	80044c8 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7fd ffe2 	bl	80044c8 <__aeabi_dmul>
 8006504:	a33a      	add	r3, pc, #232	@ (adr r3, 80065f0 <__ieee754_pow+0x3f8>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7fd ffdd 	bl	80044c8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4650      	mov	r0, sl
 8006514:	4659      	mov	r1, fp
 8006516:	f7fd fe1f 	bl	8004158 <__aeabi_dsub>
 800651a:	2400      	movs	r4, #0
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4680      	mov	r8, r0
 8006522:	4689      	mov	r9, r1
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fd fe18 	bl	800415c <__adddf3>
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	4620      	mov	r0, r4
 8006532:	460d      	mov	r5, r1
 8006534:	f7fd fe10 	bl	8004158 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4640      	mov	r0, r8
 800653e:	4649      	mov	r1, r9
 8006540:	f7fd fe0a 	bl	8004158 <__aeabi_dsub>
 8006544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006548:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800654c:	2300      	movs	r3, #0
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800655c:	465b      	mov	r3, fp
 800655e:	4652      	mov	r2, sl
 8006560:	f7fd fdfa 	bl	8004158 <__aeabi_dsub>
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	f7fd ffae 	bl	80044c8 <__aeabi_dmul>
 800656c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7fd ffa6 	bl	80044c8 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fd fdea 	bl	800415c <__adddf3>
 8006588:	465b      	mov	r3, fp
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	4652      	mov	r2, sl
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7fd ff98 	bl	80044c8 <__aeabi_dmul>
 8006598:	460b      	mov	r3, r1
 800659a:	4602      	mov	r2, r0
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7fd fdda 	bl	800415c <__adddf3>
 80065a8:	4b16      	ldr	r3, [pc, #88]	@ (8006604 <__ieee754_pow+0x40c>)
 80065aa:	4604      	mov	r4, r0
 80065ac:	4299      	cmp	r1, r3
 80065ae:	460d      	mov	r5, r1
 80065b0:	468b      	mov	fp, r1
 80065b2:	f340 81fd 	ble.w	80069b0 <__ieee754_pow+0x7b8>
 80065b6:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80065ba:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80065be:	4303      	orrs	r3, r0
 80065c0:	f000 81dc 	beq.w	800697c <__ieee754_pow+0x784>
 80065c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fe f9ee 	bl	80049ac <__aeabi_dcmplt>
 80065d0:	3800      	subs	r0, #0
 80065d2:	bf18      	it	ne
 80065d4:	2001      	movne	r0, #1
 80065d6:	e71d      	b.n	8006414 <__ieee754_pow+0x21c>
 80065d8:	60000000 	.word	0x60000000
 80065dc:	3ff71547 	.word	0x3ff71547
 80065e0:	f85ddf44 	.word	0xf85ddf44
 80065e4:	3e54ae0b 	.word	0x3e54ae0b
 80065e8:	55555555 	.word	0x55555555
 80065ec:	3fd55555 	.word	0x3fd55555
 80065f0:	652b82fe 	.word	0x652b82fe
 80065f4:	3ff71547 	.word	0x3ff71547
 80065f8:	3ff00000 	.word	0x3ff00000
 80065fc:	3fd00000 	.word	0x3fd00000
 8006600:	3fe00000 	.word	0x3fe00000
 8006604:	408fffff 	.word	0x408fffff
 8006608:	4ad3      	ldr	r2, [pc, #844]	@ (8006958 <__ieee754_pow+0x760>)
 800660a:	4032      	ands	r2, r6
 800660c:	2a00      	cmp	r2, #0
 800660e:	f040 817a 	bne.w	8006906 <__ieee754_pow+0x70e>
 8006612:	4bd2      	ldr	r3, [pc, #840]	@ (800695c <__ieee754_pow+0x764>)
 8006614:	2200      	movs	r2, #0
 8006616:	f7fd ff57 	bl	80044c8 <__aeabi_dmul>
 800661a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800661e:	460b      	mov	r3, r1
 8006620:	151a      	asrs	r2, r3, #20
 8006622:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006626:	4422      	add	r2, r4
 8006628:	920a      	str	r2, [sp, #40]	@ 0x28
 800662a:	4acd      	ldr	r2, [pc, #820]	@ (8006960 <__ieee754_pow+0x768>)
 800662c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006630:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006634:	4293      	cmp	r3, r2
 8006636:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800663a:	dd08      	ble.n	800664e <__ieee754_pow+0x456>
 800663c:	4ac9      	ldr	r2, [pc, #804]	@ (8006964 <__ieee754_pow+0x76c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	f340 8163 	ble.w	800690a <__ieee754_pow+0x712>
 8006644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006646:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800664a:	3301      	adds	r3, #1
 800664c:	930a      	str	r3, [sp, #40]	@ 0x28
 800664e:	2600      	movs	r6, #0
 8006650:	00f3      	lsls	r3, r6, #3
 8006652:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006654:	4bc4      	ldr	r3, [pc, #784]	@ (8006968 <__ieee754_pow+0x770>)
 8006656:	4629      	mov	r1, r5
 8006658:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800665c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006660:	461a      	mov	r2, r3
 8006662:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006666:	4623      	mov	r3, r4
 8006668:	4682      	mov	sl, r0
 800666a:	f7fd fd75 	bl	8004158 <__aeabi_dsub>
 800666e:	4652      	mov	r2, sl
 8006670:	462b      	mov	r3, r5
 8006672:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006676:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800667a:	f7fd fd6f 	bl	800415c <__adddf3>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	2000      	movs	r0, #0
 8006684:	49b9      	ldr	r1, [pc, #740]	@ (800696c <__ieee754_pow+0x774>)
 8006686:	f7fe f849 	bl	800471c <__aeabi_ddiv>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006696:	f7fd ff17 	bl	80044c8 <__aeabi_dmul>
 800669a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800669e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80066a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	46ab      	mov	fp, r5
 80066ac:	106d      	asrs	r5, r5, #1
 80066ae:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80066b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80066bc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	f7fd fefe 	bl	80044c8 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066d4:	f7fd fd40 	bl	8004158 <__aeabi_dsub>
 80066d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	4620      	mov	r0, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	f7fd fd38 	bl	8004158 <__aeabi_dsub>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4650      	mov	r0, sl
 80066ee:	4659      	mov	r1, fp
 80066f0:	f7fd fd32 	bl	8004158 <__aeabi_dsub>
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	f7fd fee6 	bl	80044c8 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fd fd28 	bl	8004158 <__aeabi_dsub>
 8006708:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800670c:	f7fd fedc 	bl	80044c8 <__aeabi_dmul>
 8006710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006714:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f7fd fed4 	bl	80044c8 <__aeabi_dmul>
 8006720:	a37b      	add	r3, pc, #492	@ (adr r3, 8006910 <__ieee754_pow+0x718>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	f7fd fecd 	bl	80044c8 <__aeabi_dmul>
 800672e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006918 <__ieee754_pow+0x720>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7fd fd12 	bl	800415c <__adddf3>
 8006738:	4622      	mov	r2, r4
 800673a:	462b      	mov	r3, r5
 800673c:	f7fd fec4 	bl	80044c8 <__aeabi_dmul>
 8006740:	a377      	add	r3, pc, #476	@ (adr r3, 8006920 <__ieee754_pow+0x728>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7fd fd09 	bl	800415c <__adddf3>
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f7fd febb 	bl	80044c8 <__aeabi_dmul>
 8006752:	a375      	add	r3, pc, #468	@ (adr r3, 8006928 <__ieee754_pow+0x730>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7fd fd00 	bl	800415c <__adddf3>
 800675c:	4622      	mov	r2, r4
 800675e:	462b      	mov	r3, r5
 8006760:	f7fd feb2 	bl	80044c8 <__aeabi_dmul>
 8006764:	a372      	add	r3, pc, #456	@ (adr r3, 8006930 <__ieee754_pow+0x738>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7fd fcf7 	bl	800415c <__adddf3>
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	f7fd fea9 	bl	80044c8 <__aeabi_dmul>
 8006776:	a370      	add	r3, pc, #448	@ (adr r3, 8006938 <__ieee754_pow+0x740>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7fd fcee 	bl	800415c <__adddf3>
 8006780:	4622      	mov	r2, r4
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	462b      	mov	r3, r5
 8006788:	4620      	mov	r0, r4
 800678a:	4629      	mov	r1, r5
 800678c:	f7fd fe9c 	bl	80044c8 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7fd fe96 	bl	80044c8 <__aeabi_dmul>
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	f7fd fcd8 	bl	800415c <__adddf3>
 80067ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067b0:	f7fd fe8a 	bl	80044c8 <__aeabi_dmul>
 80067b4:	4622      	mov	r2, r4
 80067b6:	462b      	mov	r3, r5
 80067b8:	f7fd fcd0 	bl	800415c <__adddf3>
 80067bc:	4642      	mov	r2, r8
 80067be:	4682      	mov	sl, r0
 80067c0:	468b      	mov	fp, r1
 80067c2:	464b      	mov	r3, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	4649      	mov	r1, r9
 80067c8:	f7fd fe7e 	bl	80044c8 <__aeabi_dmul>
 80067cc:	2200      	movs	r2, #0
 80067ce:	4b68      	ldr	r3, [pc, #416]	@ (8006970 <__ieee754_pow+0x778>)
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	f7fd fcc2 	bl	800415c <__adddf3>
 80067d8:	4652      	mov	r2, sl
 80067da:	465b      	mov	r3, fp
 80067dc:	f7fd fcbe 	bl	800415c <__adddf3>
 80067e0:	2400      	movs	r4, #0
 80067e2:	460d      	mov	r5, r1
 80067e4:	4622      	mov	r2, r4
 80067e6:	460b      	mov	r3, r1
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7fd fe6c 	bl	80044c8 <__aeabi_dmul>
 80067f0:	2200      	movs	r2, #0
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006970 <__ieee754_pow+0x778>)
 80067fc:	f7fd fcac 	bl	8004158 <__aeabi_dsub>
 8006800:	4632      	mov	r2, r6
 8006802:	463b      	mov	r3, r7
 8006804:	f7fd fca8 	bl	8004158 <__aeabi_dsub>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	f7fd fca2 	bl	8004158 <__aeabi_dsub>
 8006814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006818:	f7fd fe56 	bl	80044c8 <__aeabi_dmul>
 800681c:	4622      	mov	r2, r4
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006826:	462b      	mov	r3, r5
 8006828:	f7fd fe4e 	bl	80044c8 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fd fc92 	bl	800415c <__adddf3>
 8006838:	2400      	movs	r4, #0
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f7fd fc89 	bl	800415c <__adddf3>
 800684a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006940 <__ieee754_pow+0x748>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	4620      	mov	r0, r4
 8006852:	460d      	mov	r5, r1
 8006854:	f7fd fe38 	bl	80044c8 <__aeabi_dmul>
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006860:	4620      	mov	r0, r4
 8006862:	4629      	mov	r1, r5
 8006864:	f7fd fc78 	bl	8004158 <__aeabi_dsub>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7fd fc72 	bl	8004158 <__aeabi_dsub>
 8006874:	a334      	add	r3, pc, #208	@ (adr r3, 8006948 <__ieee754_pow+0x750>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7fd fe25 	bl	80044c8 <__aeabi_dmul>
 800687e:	a334      	add	r3, pc, #208	@ (adr r3, 8006950 <__ieee754_pow+0x758>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7fd fe1c 	bl	80044c8 <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f7fd fc60 	bl	800415c <__adddf3>
 800689c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800689e:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <__ieee754_pow+0x77c>)
 80068a0:	2400      	movs	r4, #0
 80068a2:	4413      	add	r3, r2
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7fd fc58 	bl	800415c <__adddf3>
 80068ac:	4682      	mov	sl, r0
 80068ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068b0:	468b      	mov	fp, r1
 80068b2:	f7fd fd9f 	bl	80043f4 <__aeabi_i2d>
 80068b6:	4606      	mov	r6, r0
 80068b8:	460f      	mov	r7, r1
 80068ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006978 <__ieee754_pow+0x780>)
 80068be:	4413      	add	r3, r2
 80068c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068c4:	4652      	mov	r2, sl
 80068c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ca:	465b      	mov	r3, fp
 80068cc:	f7fd fc46 	bl	800415c <__adddf3>
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	f7fd fc42 	bl	800415c <__adddf3>
 80068d8:	4632      	mov	r2, r6
 80068da:	463b      	mov	r3, r7
 80068dc:	f7fd fc3e 	bl	800415c <__adddf3>
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	4620      	mov	r0, r4
 80068e6:	460d      	mov	r5, r1
 80068e8:	f7fd fc36 	bl	8004158 <__aeabi_dsub>
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	f7fd fc32 	bl	8004158 <__aeabi_dsub>
 80068f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068f8:	f7fd fc2e 	bl	8004158 <__aeabi_dsub>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	e61c      	b.n	8006540 <__ieee754_pow+0x348>
 8006906:	2400      	movs	r4, #0
 8006908:	e68a      	b.n	8006620 <__ieee754_pow+0x428>
 800690a:	2601      	movs	r6, #1
 800690c:	e6a0      	b.n	8006650 <__ieee754_pow+0x458>
 800690e:	bf00      	nop
 8006910:	4a454eef 	.word	0x4a454eef
 8006914:	3fca7e28 	.word	0x3fca7e28
 8006918:	93c9db65 	.word	0x93c9db65
 800691c:	3fcd864a 	.word	0x3fcd864a
 8006920:	a91d4101 	.word	0xa91d4101
 8006924:	3fd17460 	.word	0x3fd17460
 8006928:	518f264d 	.word	0x518f264d
 800692c:	3fd55555 	.word	0x3fd55555
 8006930:	db6fabff 	.word	0xdb6fabff
 8006934:	3fdb6db6 	.word	0x3fdb6db6
 8006938:	33333303 	.word	0x33333303
 800693c:	3fe33333 	.word	0x3fe33333
 8006940:	e0000000 	.word	0xe0000000
 8006944:	3feec709 	.word	0x3feec709
 8006948:	dc3a03fd 	.word	0xdc3a03fd
 800694c:	3feec709 	.word	0x3feec709
 8006950:	145b01f5 	.word	0x145b01f5
 8006954:	be3e2fe0 	.word	0xbe3e2fe0
 8006958:	7ff00000 	.word	0x7ff00000
 800695c:	43400000 	.word	0x43400000
 8006960:	0003988e 	.word	0x0003988e
 8006964:	000bb679 	.word	0x000bb679
 8006968:	08006f90 	.word	0x08006f90
 800696c:	3ff00000 	.word	0x3ff00000
 8006970:	40080000 	.word	0x40080000
 8006974:	08006f70 	.word	0x08006f70
 8006978:	08006f80 	.word	0x08006f80
 800697c:	a39a      	add	r3, pc, #616	@ (adr r3, 8006be8 <__ieee754_pow+0x9f0>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7fd fbe9 	bl	800415c <__adddf3>
 800698a:	4642      	mov	r2, r8
 800698c:	e9cd 0100 	strd	r0, r1, [sp]
 8006990:	464b      	mov	r3, r9
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7fd fbdf 	bl	8004158 <__aeabi_dsub>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069a2:	f7fe f821 	bl	80049e8 <__aeabi_dcmpgt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f47f ae0c 	bne.w	80065c4 <__ieee754_pow+0x3cc>
 80069ac:	4ba0      	ldr	r3, [pc, #640]	@ (8006c30 <__ieee754_pow+0xa38>)
 80069ae:	e022      	b.n	80069f6 <__ieee754_pow+0x7fe>
 80069b0:	4ca0      	ldr	r4, [pc, #640]	@ (8006c34 <__ieee754_pow+0xa3c>)
 80069b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	d919      	bls.n	80069ee <__ieee754_pow+0x7f6>
 80069ba:	4b9f      	ldr	r3, [pc, #636]	@ (8006c38 <__ieee754_pow+0xa40>)
 80069bc:	440b      	add	r3, r1
 80069be:	4303      	orrs	r3, r0
 80069c0:	d009      	beq.n	80069d6 <__ieee754_pow+0x7de>
 80069c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	f7fd ffef 	bl	80049ac <__aeabi_dcmplt>
 80069ce:	3800      	subs	r0, #0
 80069d0:	bf18      	it	ne
 80069d2:	2001      	movne	r0, #1
 80069d4:	e527      	b.n	8006426 <__ieee754_pow+0x22e>
 80069d6:	4642      	mov	r2, r8
 80069d8:	464b      	mov	r3, r9
 80069da:	f7fd fbbd 	bl	8004158 <__aeabi_dsub>
 80069de:	4632      	mov	r2, r6
 80069e0:	463b      	mov	r3, r7
 80069e2:	f7fd fff7 	bl	80049d4 <__aeabi_dcmpge>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1eb      	bne.n	80069c2 <__ieee754_pow+0x7ca>
 80069ea:	4b94      	ldr	r3, [pc, #592]	@ (8006c3c <__ieee754_pow+0xa44>)
 80069ec:	e003      	b.n	80069f6 <__ieee754_pow+0x7fe>
 80069ee:	4a94      	ldr	r2, [pc, #592]	@ (8006c40 <__ieee754_pow+0xa48>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	f240 80e1 	bls.w	8006bb8 <__ieee754_pow+0x9c0>
 80069f6:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80069fa:	151b      	asrs	r3, r3, #20
 80069fc:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006a00:	fa4a fa03 	asr.w	sl, sl, r3
 8006a04:	44da      	add	sl, fp
 8006a06:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006a0a:	488e      	ldr	r0, [pc, #568]	@ (8006c44 <__ieee754_pow+0xa4c>)
 8006a0c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006a10:	4108      	asrs	r0, r1
 8006a12:	ea00 030a 	and.w	r3, r0, sl
 8006a16:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006a1a:	f1c1 0114 	rsb	r1, r1, #20
 8006a1e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006a22:	4640      	mov	r0, r8
 8006a24:	fa4a fa01 	asr.w	sl, sl, r1
 8006a28:	f1bb 0f00 	cmp.w	fp, #0
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	bfb8      	it	lt
 8006a34:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a38:	f7fd fb8e 	bl	8004158 <__aeabi_dsub>
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	2400      	movs	r4, #0
 8006a42:	4632      	mov	r2, r6
 8006a44:	463b      	mov	r3, r7
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7fd fb87 	bl	800415c <__adddf3>
 8006a4e:	a368      	add	r3, pc, #416	@ (adr r3, 8006bf0 <__ieee754_pow+0x9f8>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	4620      	mov	r0, r4
 8006a56:	460d      	mov	r5, r1
 8006a58:	f7fd fd36 	bl	80044c8 <__aeabi_dmul>
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	e9cd 0100 	strd	r0, r1, [sp]
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7fd fb76 	bl	8004158 <__aeabi_dsub>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7fd fb70 	bl	8004158 <__aeabi_dsub>
 8006a78:	a35f      	add	r3, pc, #380	@ (adr r3, 8006bf8 <__ieee754_pow+0xa00>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7fd fd23 	bl	80044c8 <__aeabi_dmul>
 8006a82:	a35f      	add	r3, pc, #380	@ (adr r3, 8006c00 <__ieee754_pow+0xa08>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	4680      	mov	r8, r0
 8006a8a:	4689      	mov	r9, r1
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f7fd fd1a 	bl	80044c8 <__aeabi_dmul>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	f7fd fb5e 	bl	800415c <__adddf3>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aac:	f7fd fb56 	bl	800415c <__adddf3>
 8006ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	4689      	mov	r9, r1
 8006ab8:	f7fd fb4e 	bl	8004158 <__aeabi_dsub>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7fd fb48 	bl	8004158 <__aeabi_dsub>
 8006ac8:	4642      	mov	r2, r8
 8006aca:	4606      	mov	r6, r0
 8006acc:	460f      	mov	r7, r1
 8006ace:	464b      	mov	r3, r9
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7fd fcf8 	bl	80044c8 <__aeabi_dmul>
 8006ad8:	a34b      	add	r3, pc, #300	@ (adr r3, 8006c08 <__ieee754_pow+0xa10>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	f7fd fcf1 	bl	80044c8 <__aeabi_dmul>
 8006ae6:	a34a      	add	r3, pc, #296	@ (adr r3, 8006c10 <__ieee754_pow+0xa18>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7fd fb34 	bl	8004158 <__aeabi_dsub>
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	f7fd fce8 	bl	80044c8 <__aeabi_dmul>
 8006af8:	a347      	add	r3, pc, #284	@ (adr r3, 8006c18 <__ieee754_pow+0xa20>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7fd fb2d 	bl	800415c <__adddf3>
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	f7fd fcdf 	bl	80044c8 <__aeabi_dmul>
 8006b0a:	a345      	add	r3, pc, #276	@ (adr r3, 8006c20 <__ieee754_pow+0xa28>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7fd fb22 	bl	8004158 <__aeabi_dsub>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7fd fcd6 	bl	80044c8 <__aeabi_dmul>
 8006b1c:	a342      	add	r3, pc, #264	@ (adr r3, 8006c28 <__ieee754_pow+0xa30>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7fd fb1b 	bl	800415c <__adddf3>
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	f7fd fccd 	bl	80044c8 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7fd fb0f 	bl	8004158 <__aeabi_dsub>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4640      	mov	r0, r8
 8006b44:	4649      	mov	r1, r9
 8006b46:	f7fd fcbf 	bl	80044c8 <__aeabi_dmul>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8006b50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7fd fafe 	bl	8004158 <__aeabi_dsub>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b64:	f7fd fdda 	bl	800471c <__aeabi_ddiv>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	463b      	mov	r3, r7
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7fd fca8 	bl	80044c8 <__aeabi_dmul>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	f7fd faee 	bl	800415c <__adddf3>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7fd fae6 	bl	8004158 <__aeabi_dsub>
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	464b      	mov	r3, r9
 8006b90:	f7fd fae2 	bl	8004158 <__aeabi_dsub>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	2000      	movs	r0, #0
 8006b9a:	492b      	ldr	r1, [pc, #172]	@ (8006c48 <__ieee754_pow+0xa50>)
 8006b9c:	f7fd fadc 	bl	8004158 <__aeabi_dsub>
 8006ba0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006ba4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006ba8:	da09      	bge.n	8006bbe <__ieee754_pow+0x9c6>
 8006baa:	4652      	mov	r2, sl
 8006bac:	f000 f854 	bl	8006c58 <scalbn>
 8006bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb4:	f7ff bb89 	b.w	80062ca <__ieee754_pow+0xd2>
 8006bb8:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006bbc:	e740      	b.n	8006a40 <__ieee754_pow+0x848>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	e7f6      	b.n	8006bb0 <__ieee754_pow+0x9b8>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	4920      	ldr	r1, [pc, #128]	@ (8006c48 <__ieee754_pow+0xa50>)
 8006bc6:	f7ff bb35 	b.w	8006234 <__ieee754_pow+0x3c>
 8006bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bce:	f7ff bb31 	b.w	8006234 <__ieee754_pow+0x3c>
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	f7ff bb2d 	b.w	8006234 <__ieee754_pow+0x3c>
 8006bda:	460c      	mov	r4, r1
 8006bdc:	f7ff bb87 	b.w	80062ee <__ieee754_pow+0xf6>
 8006be0:	2400      	movs	r4, #0
 8006be2:	f7ff bb69 	b.w	80062b8 <__ieee754_pow+0xc0>
 8006be6:	bf00      	nop
 8006be8:	652b82fe 	.word	0x652b82fe
 8006bec:	3c971547 	.word	0x3c971547
 8006bf0:	00000000 	.word	0x00000000
 8006bf4:	3fe62e43 	.word	0x3fe62e43
 8006bf8:	fefa39ef 	.word	0xfefa39ef
 8006bfc:	3fe62e42 	.word	0x3fe62e42
 8006c00:	0ca86c39 	.word	0x0ca86c39
 8006c04:	be205c61 	.word	0xbe205c61
 8006c08:	72bea4d0 	.word	0x72bea4d0
 8006c0c:	3e663769 	.word	0x3e663769
 8006c10:	c5d26bf1 	.word	0xc5d26bf1
 8006c14:	3ebbbd41 	.word	0x3ebbbd41
 8006c18:	af25de2c 	.word	0xaf25de2c
 8006c1c:	3f11566a 	.word	0x3f11566a
 8006c20:	16bebd93 	.word	0x16bebd93
 8006c24:	3f66c16c 	.word	0x3f66c16c
 8006c28:	5555553e 	.word	0x5555553e
 8006c2c:	3fc55555 	.word	0x3fc55555
 8006c30:	40900000 	.word	0x40900000
 8006c34:	4090cbff 	.word	0x4090cbff
 8006c38:	3f6f3400 	.word	0x3f6f3400
 8006c3c:	4090cc00 	.word	0x4090cc00
 8006c40:	3fe00000 	.word	0x3fe00000
 8006c44:	fff00000 	.word	0xfff00000
 8006c48:	3ff00000 	.word	0x3ff00000

08006c4c <fabs>:
 8006c4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c50:	4619      	mov	r1, r3
 8006c52:	4770      	bx	lr
 8006c54:	0000      	movs	r0, r0
	...

08006c58 <scalbn>:
 8006c58:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c62:	4683      	mov	fp, r0
 8006c64:	468c      	mov	ip, r1
 8006c66:	460b      	mov	r3, r1
 8006c68:	b982      	cbnz	r2, 8006c8c <scalbn+0x34>
 8006c6a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c6e:	4303      	orrs	r3, r0
 8006c70:	d035      	beq.n	8006cde <scalbn+0x86>
 8006c72:	4b2d      	ldr	r3, [pc, #180]	@ (8006d28 <scalbn+0xd0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	f7fd fc27 	bl	80044c8 <__aeabi_dmul>
 8006c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d2c <scalbn+0xd4>)
 8006c7c:	4683      	mov	fp, r0
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	468c      	mov	ip, r1
 8006c82:	da0d      	bge.n	8006ca0 <scalbn+0x48>
 8006c84:	a324      	add	r3, pc, #144	@ (adr r3, 8006d18 <scalbn+0xc0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	e019      	b.n	8006cc0 <scalbn+0x68>
 8006c8c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006c90:	42ba      	cmp	r2, r7
 8006c92:	d109      	bne.n	8006ca8 <scalbn+0x50>
 8006c94:	4602      	mov	r2, r0
 8006c96:	f7fd fa61 	bl	800415c <__adddf3>
 8006c9a:	4683      	mov	fp, r0
 8006c9c:	468c      	mov	ip, r1
 8006c9e:	e01e      	b.n	8006cde <scalbn+0x86>
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ca6:	3a36      	subs	r2, #54	@ 0x36
 8006ca8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006cac:	428e      	cmp	r6, r1
 8006cae:	dd0a      	ble.n	8006cc6 <scalbn+0x6e>
 8006cb0:	a31b      	add	r3, pc, #108	@ (adr r3, 8006d20 <scalbn+0xc8>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	4665      	mov	r5, ip
 8006cb8:	f363 051e 	bfi	r5, r3, #0, #31
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	481c      	ldr	r0, [pc, #112]	@ (8006d30 <scalbn+0xd8>)
 8006cc0:	f7fd fc02 	bl	80044c8 <__aeabi_dmul>
 8006cc4:	e7e9      	b.n	8006c9a <scalbn+0x42>
 8006cc6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006cca:	4432      	add	r2, r6
 8006ccc:	428a      	cmp	r2, r1
 8006cce:	dcef      	bgt.n	8006cb0 <scalbn+0x58>
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	dd08      	ble.n	8006ce6 <scalbn+0x8e>
 8006cd4:	f36f 531e 	bfc	r3, #20, #11
 8006cd8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cdc:	46ac      	mov	ip, r5
 8006cde:	4658      	mov	r0, fp
 8006ce0:	4661      	mov	r1, ip
 8006ce2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006ce6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006cea:	da09      	bge.n	8006d00 <scalbn+0xa8>
 8006cec:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006cf0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8006cf4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006cf8:	480e      	ldr	r0, [pc, #56]	@ (8006d34 <scalbn+0xdc>)
 8006cfa:	f041 011f 	orr.w	r1, r1, #31
 8006cfe:	e7c1      	b.n	8006c84 <scalbn+0x2c>
 8006d00:	3236      	adds	r2, #54	@ 0x36
 8006d02:	f36f 531e 	bfc	r3, #20, #11
 8006d06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d0a:	4658      	mov	r0, fp
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <scalbn+0xe0>)
 8006d12:	e7d5      	b.n	8006cc0 <scalbn+0x68>
 8006d14:	f3af 8000 	nop.w
 8006d18:	c2f8f359 	.word	0xc2f8f359
 8006d1c:	01a56e1f 	.word	0x01a56e1f
 8006d20:	8800759c 	.word	0x8800759c
 8006d24:	7e37e43c 	.word	0x7e37e43c
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	ffff3cb0 	.word	0xffff3cb0
 8006d30:	8800759c 	.word	0x8800759c
 8006d34:	c2f8f359 	.word	0xc2f8f359
 8006d38:	3c900000 	.word	0x3c900000

08006d3c <with_errno>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4604      	mov	r4, r0
 8006d40:	460d      	mov	r5, r1
 8006d42:	4616      	mov	r6, r2
 8006d44:	f7ff f9be 	bl	80060c4 <__errno>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	6006      	str	r6, [r0, #0]
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}

08006d50 <xflow>:
 8006d50:	b513      	push	{r0, r1, r4, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	b10c      	cbz	r4, 8006d5e <xflow+0xe>
 8006d5a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8006d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d66:	f7fd fbaf 	bl	80044c8 <__aeabi_dmul>
 8006d6a:	2222      	movs	r2, #34	@ 0x22
 8006d6c:	b002      	add	sp, #8
 8006d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d72:	f7ff bfe3 	b.w	8006d3c <with_errno>

08006d76 <__math_uflow>:
 8006d76:	2200      	movs	r2, #0
 8006d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006d7c:	f7ff bfe8 	b.w	8006d50 <xflow>

08006d80 <__math_oflow>:
 8006d80:	2200      	movs	r2, #0
 8006d82:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006d86:	f7ff bfe3 	b.w	8006d50 <xflow>
	...

08006d8c <__ieee754_sqrt>:
 8006d8c:	4a65      	ldr	r2, [pc, #404]	@ (8006f24 <__ieee754_sqrt+0x198>)
 8006d8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d92:	438a      	bics	r2, r1
 8006d94:	4606      	mov	r6, r0
 8006d96:	460f      	mov	r7, r1
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	d10e      	bne.n	8006dbc <__ieee754_sqrt+0x30>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	f7fd fb92 	bl	80044c8 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	f7fd f9d6 	bl	800415c <__adddf3>
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	dc0c      	bgt.n	8006dda <__ieee754_sqrt+0x4e>
 8006dc0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006dc4:	4302      	orrs	r2, r0
 8006dc6:	d0f5      	beq.n	8006db4 <__ieee754_sqrt+0x28>
 8006dc8:	b189      	cbz	r1, 8006dee <__ieee754_sqrt+0x62>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f7fd f9c4 	bl	8004158 <__aeabi_dsub>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	f7fd fca2 	bl	800471c <__aeabi_ddiv>
 8006dd8:	e7ea      	b.n	8006db0 <__ieee754_sqrt+0x24>
 8006dda:	150a      	asrs	r2, r1, #20
 8006ddc:	d115      	bne.n	8006e0a <__ieee754_sqrt+0x7e>
 8006dde:	2100      	movs	r1, #0
 8006de0:	e009      	b.n	8006df6 <__ieee754_sqrt+0x6a>
 8006de2:	0ae3      	lsrs	r3, r4, #11
 8006de4:	3a15      	subs	r2, #21
 8006de6:	0564      	lsls	r4, r4, #21
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0fa      	beq.n	8006de2 <__ieee754_sqrt+0x56>
 8006dec:	e7f7      	b.n	8006dde <__ieee754_sqrt+0x52>
 8006dee:	460a      	mov	r2, r1
 8006df0:	e7fa      	b.n	8006de8 <__ieee754_sqrt+0x5c>
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	3101      	adds	r1, #1
 8006df6:	02d8      	lsls	r0, r3, #11
 8006df8:	d5fb      	bpl.n	8006df2 <__ieee754_sqrt+0x66>
 8006dfa:	1e48      	subs	r0, r1, #1
 8006dfc:	1a12      	subs	r2, r2, r0
 8006dfe:	f1c1 0020 	rsb	r0, r1, #32
 8006e02:	fa24 f000 	lsr.w	r0, r4, r0
 8006e06:	4303      	orrs	r3, r0
 8006e08:	408c      	lsls	r4, r1
 8006e0a:	2700      	movs	r7, #0
 8006e0c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8006e10:	2116      	movs	r1, #22
 8006e12:	07d2      	lsls	r2, r2, #31
 8006e14:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006e18:	463a      	mov	r2, r7
 8006e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e22:	bf5c      	itt	pl
 8006e24:	005b      	lslpl	r3, r3, #1
 8006e26:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006e2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e2e:	bf58      	it	pl
 8006e30:	0064      	lslpl	r4, r4, #1
 8006e32:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006e36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e3a:	0064      	lsls	r4, r4, #1
 8006e3c:	1815      	adds	r5, r2, r0
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	bfde      	ittt	le
 8006e42:	182a      	addle	r2, r5, r0
 8006e44:	1b5b      	suble	r3, r3, r5
 8006e46:	183f      	addle	r7, r7, r0
 8006e48:	0fe5      	lsrs	r5, r4, #31
 8006e4a:	3901      	subs	r1, #1
 8006e4c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006e50:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006e54:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006e58:	d1f0      	bne.n	8006e3c <__ieee754_sqrt+0xb0>
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	2620      	movs	r6, #32
 8006e5e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006e62:	4293      	cmp	r3, r2
 8006e64:	eb00 0c01 	add.w	ip, r0, r1
 8006e68:	dc02      	bgt.n	8006e70 <__ieee754_sqrt+0xe4>
 8006e6a:	d113      	bne.n	8006e94 <__ieee754_sqrt+0x108>
 8006e6c:	45a4      	cmp	ip, r4
 8006e6e:	d811      	bhi.n	8006e94 <__ieee754_sqrt+0x108>
 8006e70:	f1bc 0f00 	cmp.w	ip, #0
 8006e74:	eb0c 0100 	add.w	r1, ip, r0
 8006e78:	da3e      	bge.n	8006ef8 <__ieee754_sqrt+0x16c>
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	db3c      	blt.n	8006ef8 <__ieee754_sqrt+0x16c>
 8006e7e:	f102 0e01 	add.w	lr, r2, #1
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	4672      	mov	r2, lr
 8006e86:	45a4      	cmp	ip, r4
 8006e88:	bf88      	it	hi
 8006e8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006e8e:	eba4 040c 	sub.w	r4, r4, ip
 8006e92:	4405      	add	r5, r0
 8006e94:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006e98:	3e01      	subs	r6, #1
 8006e9a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006e9e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006ea2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006ea6:	d1dc      	bne.n	8006e62 <__ieee754_sqrt+0xd6>
 8006ea8:	431c      	orrs	r4, r3
 8006eaa:	d01a      	beq.n	8006ee2 <__ieee754_sqrt+0x156>
 8006eac:	4c1e      	ldr	r4, [pc, #120]	@ (8006f28 <__ieee754_sqrt+0x19c>)
 8006eae:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006f2c <__ieee754_sqrt+0x1a0>
 8006eb2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006eb6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006eba:	f7fd f94d 	bl	8004158 <__aeabi_dsub>
 8006ebe:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7fd fd79 	bl	80049c0 <__aeabi_dcmple>
 8006ece:	b140      	cbz	r0, 8006ee2 <__ieee754_sqrt+0x156>
 8006ed0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006ed4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ed8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006edc:	d10e      	bne.n	8006efc <__ieee754_sqrt+0x170>
 8006ede:	4635      	mov	r5, r6
 8006ee0:	3701      	adds	r7, #1
 8006ee2:	107b      	asrs	r3, r7, #1
 8006ee4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ee8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006eec:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006ef0:	086b      	lsrs	r3, r5, #1
 8006ef2:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8006ef6:	e75b      	b.n	8006db0 <__ieee754_sqrt+0x24>
 8006ef8:	4696      	mov	lr, r2
 8006efa:	e7c2      	b.n	8006e82 <__ieee754_sqrt+0xf6>
 8006efc:	f7fd f92e 	bl	800415c <__adddf3>
 8006f00:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4650      	mov	r0, sl
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	f7fd fd4e 	bl	80049ac <__aeabi_dcmplt>
 8006f10:	b120      	cbz	r0, 8006f1c <__ieee754_sqrt+0x190>
 8006f12:	1cab      	adds	r3, r5, #2
 8006f14:	bf08      	it	eq
 8006f16:	3701      	addeq	r7, #1
 8006f18:	3502      	adds	r5, #2
 8006f1a:	e7e2      	b.n	8006ee2 <__ieee754_sqrt+0x156>
 8006f1c:	1c6b      	adds	r3, r5, #1
 8006f1e:	f023 0501 	bic.w	r5, r3, #1
 8006f22:	e7de      	b.n	8006ee2 <__ieee754_sqrt+0x156>
 8006f24:	7ff00000 	.word	0x7ff00000
 8006f28:	08006fa8 	.word	0x08006fa8
 8006f2c:	08006fa0 	.word	0x08006fa0

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
