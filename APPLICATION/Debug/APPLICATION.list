
APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb8  0800410c  0800410c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080050c4  080050c4  000020c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080050e8  080050e8  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080050e8  080050e8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000020e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ec  080050ec  000020ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  080050fc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080050fc  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bfb  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e73  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  00006aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002f5  00000000  00000000  00006ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001617c  00000000  00000000  000071b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000045d1  00000000  00000000  0001d331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f598  00000000  00000000  00021902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e94  00000000  00000000  000a0ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000a1d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	@ (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	00000000 	.word	0x00000000
 800412c:	080050ac 	.word	0x080050ac

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	@ (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	@ (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000010 	.word	0x20000010
 8004148:	080050ac 	.word	0x080050ac

0800414c <DWT_Init>:

 void test_function(void)
 {
     for (volatile int i = 0; i < 1000; i++);
 }
void DWT_Init(void) {
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
    DEMCR |= (1 << 24);      // Enable TRC
 8004150:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <DWT_Init+0x2c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <DWT_Init+0x2c>)
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415a:	6013      	str	r3, [r2, #0]
    DWT_CYCCNT = 0;          // Clear the cycle counter
 800415c:	4b07      	ldr	r3, [pc, #28]	@ (800417c <DWT_Init+0x30>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    DWT_CTRL |= 1;           // Enable the cycle counter
 8004162:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <DWT_Init+0x34>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a06      	ldr	r2, [pc, #24]	@ (8004180 <DWT_Init+0x34>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000edfc 	.word	0xe000edfc
 800417c:	e0001004 	.word	0xe0001004
 8004180:	e0001000 	.word	0xe0001000

08004184 <GPIO_init>:
    DWT_CYCCNT = 0;          // Reset counter
    func();                  // Call the function
    return DWT_CYCCNT;       // Return cycle count
}

void GPIO_init(void) {
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN;  // Enable GPIOA clock
 8004188:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <GPIO_init+0x60>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <GPIO_init+0x60>)
 800418e:	f043 030c 	orr.w	r3, r3, #12
 8004192:	6193      	str	r3, [r2, #24]
    // PA0 as floating input
    GPIOA->CRL &= ~(0xF << (BUTTON_PIN * 4));  // Clear MODE/CNF
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <GPIO_init+0x64>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <GPIO_init+0x64>)
 800419a:	f023 030f 	bic.w	r3, r3, #15
 800419e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (0b1000 << (BUTTON_PIN * 4));  // CNF = 01 (floating input), MODE = 00
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <GPIO_init+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <GPIO_init+0x64>)
 80041a6:	f043 0308 	orr.w	r3, r3, #8
 80041aa:	6013      	str	r3, [r2, #0]
    GPIOA->ODR&=~(1<<BUTTON_PIN);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <GPIO_init+0x64>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <GPIO_init+0x64>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	60d3      	str	r3, [r2, #12]
    // PB0 as push-pull output, 2 MHz
    // PB2 as output push-pull, 2 MHz
    GPIOB->CRL &= ~(0xF << (LED_PIN * 4));
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <GPIO_init+0x68>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <GPIO_init+0x68>)
 80041be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041c2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |=  (0x2 << (LED_PIN * 4));     // MODE=10 (2 MHz), CNF=00
 80041c4:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <GPIO_init+0x68>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <GPIO_init+0x68>)
 80041ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ce:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~(1 << LED_PIN);
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <GPIO_init+0x68>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <GPIO_init+0x68>)
 80041d6:	f023 0304 	bic.w	r3, r3, #4
 80041da:	60d3      	str	r3, [r2, #12]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010800 	.word	0x40010800
 80041ec:	40010c00 	.word	0x40010c00

080041f0 <read_button>:
uint8_t read_button(void) {
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
    return ((GPIOA->IDR & (1 << BUTTON_PIN)) != 0);  // HIGH = pressed
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <read_button+0x20>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010800 	.word	0x40010800

08004214 <SysTick_Init>:
// Initialize SysTick to trigger every 1ms
void SysTick_Init(void) {
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
    // SystemCoreClock should be 72 MHz (set in startup or defined globally)
    SysTick->LOAD  = (72000000 / 1000) - 1;  // 72,000 - 1 = 71,999
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <SysTick_Init+0x20>)
 800421a:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <SysTick_Init+0x24>)
 800421c:	605a      	str	r2, [r3, #4]
    SysTick->VAL   = 0;                             // Clear current value
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <SysTick_Init+0x20>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |   // Use processor clock
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <SysTick_Init+0x20>)
 8004226:	2207      	movs	r2, #7
 8004228:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_TICKINT_Msk   |   // Enable SysTick interrupt
                     SysTick_CTRL_ENABLE_Msk;       // Enable SysTick
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e010 	.word	0xe000e010
 8004238:	0001193f 	.word	0x0001193f

0800423c <led_on>:
// Turn LED ON
void led_on(void) {
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << LED_PIN);
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <led_on+0x18>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a03      	ldr	r2, [pc, #12]	@ (8004254 <led_on+0x18>)
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40010c00 	.word	0x40010c00

08004258 <led_off>:
// Turn LED OFF
void led_off(void) {
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << LED_PIN);
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <led_off+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a03      	ldr	r2, [pc, #12]	@ (8004270 <led_off+0x18>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40010c00 	.word	0x40010c00

08004274 <recurse>:
    __set_MSP(boot_stack);
    // 4. Jump to the application's Reset Handler
    void (*boot_entry)(void) = (void*)boot_reset;
    boot_entry();
}
void recurse(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	recurse();
 8004278:	f7ff fffc 	bl	8004274 <recurse>
}
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}

08004280 <IWDG_Refresh>:
void IWDG_Refresh(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
    // Write the reload key to refresh the watchdog
    IWDG->KR = 0xAAAA;
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <IWDG_Refresh+0x14>)
 8004286:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	40003000 	.word	0x40003000

08004298 <IWDG_Init>:
void IWDG_Init(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
    // Enable write access to IWDG_PR and IWDG_RLR
    IWDG->KR = 0x5555;
 800429c:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <IWDG_Init+0x34>)
 800429e:	f245 5255 	movw	r2, #21845	@ 0x5555
 80042a2:	601a      	str	r2, [r3, #0]
    // Set prescaler to 32
    IWDG->PR = 0x03; // 0=4, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256
 80042a4:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <IWDG_Init+0x34>)
 80042a6:	2203      	movs	r2, #3
 80042a8:	605a      	str	r2, [r3, #4]
    // Set reload value for 1 second
    IWDG->RLR = 1249; // (40000/32) - 1
 80042aa:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <IWDG_Init+0x34>)
 80042ac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80042b0:	609a      	str	r2, [r3, #8]
    // Reload counter
    IWDG->KR = 0xAAAA;
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <IWDG_Init+0x34>)
 80042b4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80042b8:	601a      	str	r2, [r3, #0]
    // Start the watchdog
    IWDG->KR = 0xCCCC;
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <IWDG_Init+0x34>)
 80042bc:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40003000 	.word	0x40003000

080042d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
uint32_t last_debounce=0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
uint8_t last_read=0,current_read=0,button_state=0;
 80042da:	2300      	movs	r3, #0
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	2300      	movs	r3, #0
 80042e0:	767b      	strb	r3, [r7, #25]
 80042e2:	2300      	movs	r3, #0
 80042e4:	76bb      	strb	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042e6:	f000 f991 	bl	800460c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ea:	f000 f885 	bl	80043f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042ee:	f000 f8c9 	bl	8004484 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 80042f2:	f7ff ff2b 	bl	800414c <DWT_Init>
  GPIO_init();
 80042f6:	f7ff ff45 	bl	8004184 <GPIO_init>
  SysTick_Init();
 80042fa:	f7ff ff8b 	bl	8004214 <SysTick_Init>
  if (RCC->CSR & RCC_CSR_IWDGRSTF) {
 80042fe:	4b39      	ldr	r3, [pc, #228]	@ (80043e4 <main+0x114>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <main+0x4c>
      // Last reset was from Window Watchdog (WWDG)
	   // Clear all reset flags so they don't stay set
	   RCC->CSR |= RCC_CSR_RMVF;
 800430a:	4b36      	ldr	r3, [pc, #216]	@ (80043e4 <main+0x114>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	4a35      	ldr	r2, [pc, #212]	@ (80043e4 <main+0x114>)
 8004310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004314:	6253      	str	r3, [r2, #36]	@ 0x24
	   while(1){
		   led_on();
 8004316:	f7ff ff91 	bl	800423c <led_on>
 800431a:	e7fc      	b.n	8004316 <main+0x46>
	   }
	  //jump_to_bootloader();
 }
  IWDG_Init();
 800431c:	f7ff ffbc 	bl	8004298 <IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
current_read=read_button();
 8004320:	f7ff ff66 	bl	80041f0 <read_button>
 8004324:	4603      	mov	r3, r0
 8004326:	767b      	strb	r3, [r7, #25]
if(current_read!=last_read){
 8004328:	7e7a      	ldrb	r2, [r7, #25]
 800432a:	7efb      	ldrb	r3, [r7, #27]
 800432c:	429a      	cmp	r2, r3
 800432e:	d002      	beq.n	8004336 <main+0x66>
	last_debounce=mytick;
 8004330:	4b2d      	ldr	r3, [pc, #180]	@ (80043e8 <main+0x118>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61fb      	str	r3, [r7, #28]
}
if((mytick-last_debounce)>DEBOUNCE_TIME){
 8004336:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <main+0x118>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b32      	cmp	r3, #50	@ 0x32
 8004340:	d94a      	bls.n	80043d8 <main+0x108>
	if(button_state!=current_read){
 8004342:	7eba      	ldrb	r2, [r7, #26]
 8004344:	7e7b      	ldrb	r3, [r7, #25]
 8004346:	429a      	cmp	r2, r3
 8004348:	d046      	beq.n	80043d8 <main+0x108>
		button_state=current_read;
 800434a:	7e7b      	ldrb	r3, [r7, #25]
 800434c:	76bb      	strb	r3, [r7, #26]
		if(button_state){
 800434e:	7ebb      	ldrb	r3, [r7, #26]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03f      	beq.n	80043d4 <main+0x104>
			cnt++;
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <main+0x11c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b23      	ldr	r3, [pc, #140]	@ (80043ec <main+0x11c>)
 800435e:	701a      	strb	r2, [r3, #0]
			led_on();
 8004360:	f7ff ff6c 	bl	800423c <led_on>
			if(cnt==6){// Enable UsageFault and division-by-zero trap
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <main+0x11c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b06      	cmp	r3, #6
 800436a:	d110      	bne.n	800438e <main+0xbe>
				SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;    // Enable UsageFault
 800436c:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <main+0x120>)
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <main+0x120>)
 8004372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004376:	6253      	str	r3, [r2, #36]	@ 0x24
				SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;          // Trap divide-by-zero
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <main+0x120>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <main+0x120>)
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	6153      	str	r3, [r2, #20]
                int a=(1/0);
 8004384:	2201      	movs	r2, #1
 8004386:	2300      	movs	r3, #0
 8004388:	fb92 f3f3 	sdiv	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
			}
			if(cnt==7){//stack over flow/corruption
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <main+0x11c>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b07      	cmp	r3, #7
 8004394:	d101      	bne.n	800439a <main+0xca>
				recurse();  // eventually triggers Hard Fault
 8004396:	f7ff ff6d 	bl	8004274 <recurse>
			}
			if(cnt==8){//executing code from invalid memory
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <main+0x11c>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d104      	bne.n	80043ac <main+0xdc>
				void (*invalid_code)(void) = (void *)0xFFFFFFF1;
 80043a2:	f06f 030e 	mvn.w	r3, #14
 80043a6:	613b      	str	r3, [r7, #16]
				invalid_code();  // crashes
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4798      	blx	r3
			}
			if(cnt==9){//dereferenceing null pointer
 80043ac:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <main+0x11c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b09      	cmp	r3, #9
 80043b2:	d104      	bne.n	80043be <main+0xee>
				volatile uint32_t *ptr = (uint32_t *)0x00000000;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
				*ptr = 0x12345678;  // causes Hard Fault
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <main+0x124>)
 80043bc:	601a      	str	r2, [r3, #0]
			}
			if(cnt==10){//unaligned memory access
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <main+0x11c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b0a      	cmp	r3, #10
 80043c4:	d108      	bne.n	80043d8 <main+0x108>
				volatile uint32_t *bad = (uint32_t*)0xFFFFFFF0; // Invalid address
 80043c6:	f06f 030f 	mvn.w	r3, #15
 80043ca:	60bb      	str	r3, [r7, #8]
				uint32_t val = *bad;  // Will cause HardFault
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	e001      	b.n	80043d8 <main+0x108>
			}
		}else{
			led_off();
 80043d4:	f7ff ff40 	bl	8004258 <led_off>
		}
	}
}
IWDG_Refresh();
 80043d8:	f7ff ff52 	bl	8004280 <IWDG_Refresh>
last_read = current_read;
 80043dc:	7e7b      	ldrb	r3, [r7, #25]
 80043de:	76fb      	strb	r3, [r7, #27]
current_read=read_button();
 80043e0:	e79e      	b.n	8004320 <main+0x50>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	20000028 	.word	0x20000028
 80043ec:	2000002c 	.word	0x2000002c
 80043f0:	e000ed00 	.word	0xe000ed00
 80043f4:	12345678 	.word	0x12345678

080043f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b090      	sub	sp, #64	@ 0x40
 80043fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043fe:	f107 0318 	add.w	r3, r7, #24
 8004402:	2228      	movs	r2, #40	@ 0x28
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fe24 	bl	8005054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800441e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004424:	2300      	movs	r3, #0
 8004426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004428:	2301      	movs	r3, #1
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800442c:	2302      	movs	r3, #2
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004436:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800443c:	f107 0318 	add.w	r3, r7, #24
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa29 	bl	8004898 <HAL_RCC_OscConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800444c:	f000 f830 	bl	80044b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004450:	230f      	movs	r3, #15
 8004452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004454:	2302      	movs	r3, #2
 8004456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800445c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fc96 	bl	8004d9c <HAL_RCC_ClockConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004476:	f000 f81b 	bl	80044b0 <Error_Handler>
  }
}
 800447a:	bf00      	nop
 800447c:	3740      	adds	r7, #64	@ 0x40
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <MX_GPIO_Init+0x28>)
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	4a07      	ldr	r2, [pc, #28]	@ (80044ac <MX_GPIO_Init+0x28>)
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	6193      	str	r3, [r2, #24]
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <MX_GPIO_Init+0x28>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40021000 	.word	0x40021000

080044b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044b4:	b672      	cpsid	i
}
 80044b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044b8:	bf00      	nop
 80044ba:	e7fd      	b.n	80044b8 <Error_Handler+0x8>

080044bc <HAL_MspInit>:
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <HAL_MspInit+0x5c>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	4a14      	ldr	r2, [pc, #80]	@ (8004518 <HAL_MspInit+0x5c>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6193      	str	r3, [r2, #24]
 80044ce:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <HAL_MspInit+0x5c>)
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <HAL_MspInit+0x5c>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a0e      	ldr	r2, [pc, #56]	@ (8004518 <HAL_MspInit+0x5c>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]
 80044e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <HAL_MspInit+0x5c>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <HAL_MspInit+0x60>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4a04      	ldr	r2, [pc, #16]	@ (800451c <HAL_MspInit+0x60>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6053      	str	r3, [r2, #4]
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40021000 	.word	0x40021000
 800451c:	40010000 	.word	0x40010000

08004520 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004524:	f3bf 8f4f 	dsb	sy
}
 8004528:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <__NVIC_SystemReset+0x24>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004532:	4904      	ldr	r1, [pc, #16]	@ (8004544 <__NVIC_SystemReset+0x24>)
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <__NVIC_SystemReset+0x28>)
 8004536:	4313      	orrs	r3, r2
 8004538:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800453a:	f3bf 8f4f 	dsb	sy
}
 800453e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <__NVIC_SystemReset+0x20>
 8004544:	e000ed00 	.word	0xe000ed00
 8004548:	05fa0004 	.word	0x05fa0004

0800454c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <NMI_Handler+0x4>

08004554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		NVIC_SystemReset();
 8004558:	f7ff ffe2 	bl	8004520 <__NVIC_SystemReset>

0800455c <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <MemManage_Handler+0x4>

08004564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <BusFault_Handler+0x4>

0800456c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <UsageFault_Handler+0x4>

08004574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END SVCall_IRQn 0 */

  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */

  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 0 */

  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	mytick++;
 800459c:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <SysTick_Handler+0x18>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a03      	ldr	r2, [pc, #12]	@ (80045b0 <SysTick_Handler+0x18>)
 80045a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045a6:	f000 f877 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000028 	.word	0x20000028

080045b4 <SystemInit>:
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <Reset_Handler>:
 80045c0:	f7ff fff8 	bl	80045b4 <SystemInit>
 80045c4:	480b      	ldr	r0, [pc, #44]	@ (80045f4 <LoopFillZerobss+0xe>)
 80045c6:	490c      	ldr	r1, [pc, #48]	@ (80045f8 <LoopFillZerobss+0x12>)
 80045c8:	4a0c      	ldr	r2, [pc, #48]	@ (80045fc <LoopFillZerobss+0x16>)
 80045ca:	2300      	movs	r3, #0
 80045cc:	e002      	b.n	80045d4 <LoopCopyDataInit>

080045ce <CopyDataInit>:
 80045ce:	58d4      	ldr	r4, [r2, r3]
 80045d0:	50c4      	str	r4, [r0, r3]
 80045d2:	3304      	adds	r3, #4

080045d4 <LoopCopyDataInit>:
 80045d4:	18c4      	adds	r4, r0, r3
 80045d6:	428c      	cmp	r4, r1
 80045d8:	d3f9      	bcc.n	80045ce <CopyDataInit>
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <LoopFillZerobss+0x1a>)
 80045dc:	4c09      	ldr	r4, [pc, #36]	@ (8004604 <LoopFillZerobss+0x1e>)
 80045de:	2300      	movs	r3, #0
 80045e0:	e001      	b.n	80045e6 <LoopFillZerobss>

080045e2 <FillZerobss>:
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	3204      	adds	r2, #4

080045e6 <LoopFillZerobss>:
 80045e6:	42a2      	cmp	r2, r4
 80045e8:	d3fb      	bcc.n	80045e2 <FillZerobss>
 80045ea:	f000 fd3b 	bl	8005064 <__libc_init_array>
 80045ee:	f7ff fe6f 	bl	80042d0 <main>
 80045f2:	4770      	bx	lr
 80045f4:	20000000 	.word	0x20000000
 80045f8:	2000000c 	.word	0x2000000c
 80045fc:	080050f0 	.word	0x080050f0
 8004600:	2000000c 	.word	0x2000000c
 8004604:	20000034 	.word	0x20000034

08004608 <ADC1_2_IRQHandler>:
 8004608:	e7fe      	b.n	8004608 <ADC1_2_IRQHandler>
	...

0800460c <HAL_Init>:
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <HAL_Init+0x28>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <HAL_Init+0x28>)
 8004616:	f043 0310 	orr.w	r3, r3, #16
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	2003      	movs	r0, #3
 800461e:	f000 f907 	bl	8004830 <HAL_NVIC_SetPriorityGrouping>
 8004622:	200f      	movs	r0, #15
 8004624:	f000 f808 	bl	8004638 <HAL_InitTick>
 8004628:	f7ff ff48 	bl	80044bc <HAL_MspInit>
 800462c:	2300      	movs	r3, #0
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40022000 	.word	0x40022000

08004638 <HAL_InitTick>:
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	4b12      	ldr	r3, [pc, #72]	@ (800468c <HAL_InitTick+0x54>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <HAL_InitTick+0x58>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f911 	bl	800487e <HAL_SYSTICK_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_InitTick+0x2e>
 8004662:	2301      	movs	r3, #1
 8004664:	e00e      	b.n	8004684 <HAL_InitTick+0x4c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d80a      	bhi.n	8004682 <HAL_InitTick+0x4a>
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f000 f8e7 	bl	8004846 <HAL_NVIC_SetPriority>
 8004678:	4a06      	ldr	r2, [pc, #24]	@ (8004694 <HAL_InitTick+0x5c>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x4c>
 8004682:	2301      	movs	r3, #1
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000000 	.word	0x20000000
 8004690:	20000008 	.word	0x20000008
 8004694:	20000004 	.word	0x20000004

08004698 <HAL_IncTick>:
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_IncTick+0x1c>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <HAL_IncTick+0x20>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a03      	ldr	r2, [pc, #12]	@ (80046b8 <HAL_IncTick+0x20>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	20000008 	.word	0x20000008
 80046b8:	20000030 	.word	0x20000030

080046bc <HAL_GetTick>:
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4b02      	ldr	r3, [pc, #8]	@ (80046cc <HAL_GetTick+0x10>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	20000030 	.word	0x20000030

080046d0 <__NVIC_SetPriorityGrouping>:
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046ec:	4013      	ands	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <__NVIC_GetPriorityGrouping>:
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <__NVIC_GetPriorityGrouping+0x18>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_SetPriority>:
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	71fb      	strb	r3, [r7, #7]
 8004740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004744:	2b00      	cmp	r3, #0
 8004746:	db0a      	blt.n	800475e <__NVIC_SetPriority+0x2a>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	490c      	ldr	r1, [pc, #48]	@ (8004780 <__NVIC_SetPriority+0x4c>)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	0112      	lsls	r2, r2, #4
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	440b      	add	r3, r1
 8004758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800475c:	e00a      	b.n	8004774 <__NVIC_SetPriority+0x40>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4908      	ldr	r1, [pc, #32]	@ (8004784 <__NVIC_SetPriority+0x50>)
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	3b04      	subs	r3, #4
 800476c:	0112      	lsls	r2, r2, #4
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	440b      	add	r3, r1
 8004772:	761a      	strb	r2, [r3, #24]
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e100 	.word	0xe000e100
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <NVIC_EncodePriority>:
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	@ 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f1c3 0307 	rsb	r3, r3, #7
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	bf28      	it	cs
 80047a6:	2304      	movcs	r3, #4
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d902      	bls.n	80047b8 <NVIC_EncodePriority+0x30>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	3b03      	subs	r3, #3
 80047b6:	e000      	b.n	80047ba <NVIC_EncodePriority+0x32>
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	401a      	ands	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	409a      	lsls	r2, r3
 80047d0:	f04f 31ff 	mov.w	r1, #4294967295
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	43d9      	mvns	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	400b      	ands	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	@ 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <SysTick_Config>:
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047fc:	d301      	bcc.n	8004802 <SysTick_Config+0x16>
 80047fe:	2301      	movs	r3, #1
 8004800:	e00f      	b.n	8004822 <SysTick_Config+0x36>
 8004802:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <SysTick_Config+0x40>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	6053      	str	r3, [r2, #4]
 800480a:	210f      	movs	r1, #15
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	f7ff ff90 	bl	8004734 <__NVIC_SetPriority>
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <SysTick_Config+0x40>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <SysTick_Config+0x40>)
 800481c:	2207      	movs	r2, #7
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	e000e010 	.word	0xe000e010

08004830 <HAL_NVIC_SetPriorityGrouping>:
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff49 	bl	80046d0 <__NVIC_SetPriorityGrouping>
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_SetPriority>:
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	f7ff ff5e 	bl	8004718 <__NVIC_GetPriorityGrouping>
 800485c:	6178      	str	r0, [r7, #20]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f7ff ff90 	bl	8004788 <NVIC_EncodePriority>
 8004868:	4602      	mov	r2, r0
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff5f 	bl	8004734 <__NVIC_SetPriority>
 8004876:	bf00      	nop
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SYSTICK_Config>:
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ffb0 	bl	80047ec <SysTick_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_RCC_OscConfig>:
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e272      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8087 	beq.w	80049c6 <HAL_RCC_OscConfig+0x12e>
 80048b8:	4b92      	ldr	r3, [pc, #584]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x46>
 80048c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
 80048d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
 80048de:	4b89      	ldr	r3, [pc, #548]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x12c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d168      	bne.n	80049c4 <HAL_RCC_OscConfig+0x12c>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e24c      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x76>
 8004900:	4b80      	ldr	r3, [pc, #512]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7f      	ldr	r2, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b7b      	ldr	r3, [pc, #492]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b78      	ldr	r3, [pc, #480]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a77      	ldr	r2, [pc, #476]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xbc>
 800493a:	4b72      	ldr	r3, [pc, #456]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a71      	ldr	r2, [pc, #452]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 8004954:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6a      	ldr	r2, [pc, #424]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b68      	ldr	r3, [pc, #416]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a67      	ldr	r2, [pc, #412]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0x104>
 8004974:	f7ff fea2 	bl	80046bc <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xf6>
 800497c:	f7ff fe9e 	bl	80046bc <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xf6>
 800498a:	2303      	movs	r3, #3
 800498c:	e200      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 800498e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xe4>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x12e>
 800499c:	f7ff fe8e 	bl	80046bc <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x11e>
 80049a4:	f7ff fe8a 	bl	80046bc <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x11e>
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1ec      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 80049b6:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x10c>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x12e>
 80049c4:	bf00      	nop
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_OscConfig+0x202>
 80049d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x15e>
 80049de:	4b49      	ldr	r3, [pc, #292]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x18c>
 80049ea:	4b46      	ldr	r3, [pc, #280]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x18c>
 80049f6:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x176>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x176>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1c0      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4939      	ldr	r1, [pc, #228]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e03a      	b.n	8004a9a <HAL_RCC_OscConfig+0x202>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1d6>
 8004a2c:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	f7ff fe43 	bl	80046bc <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x1b4>
 8004a3a:	f7ff fe3f 	bl	80046bc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x1b4>
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1a1      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1a2>
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4927      	ldr	r1, [pc, #156]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x202>
 8004a6e:	4b26      	ldr	r3, [pc, #152]	@ (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f7ff fe22 	bl	80046bc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x1f6>
 8004a7c:	f7ff fe1e 	bl	80046bc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x1f6>
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e180      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x1e4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d03a      	beq.n	8004b1c <HAL_RCC_OscConfig+0x284>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d019      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x24a>
 8004aae:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f7ff fe02 	bl	80046bc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x236>
 8004abc:	f7ff fdfe 	bl	80046bc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x236>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e160      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x224>
 8004ada:	2001      	movs	r0, #1
 8004adc:	f000 fa9c 	bl	8005018 <RCC_Delay>
 8004ae0:	e01c      	b.n	8004b1c <HAL_RCC_OscConfig+0x284>
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f7ff fde8 	bl	80046bc <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]
 8004aee:	e00f      	b.n	8004b10 <HAL_RCC_OscConfig+0x278>
 8004af0:	f7ff fde4 	bl	80046bc <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d908      	bls.n	8004b10 <HAL_RCC_OscConfig+0x278>
 8004afe:	2303      	movs	r3, #3
 8004b00:	e146      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	42420000 	.word	0x42420000
 8004b0c:	42420480 	.word	0x42420480
 8004b10:	4b92      	ldr	r3, [pc, #584]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e9      	bne.n	8004af0 <HAL_RCC_OscConfig+0x258>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80a6 	beq.w	8004c76 <HAL_RCC_OscConfig+0x3de>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_RCC_OscConfig+0x2be>
 8004b3a:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4a87      	ldr	r2, [pc, #540]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	61d3      	str	r3, [r2, #28]
 8004b46:	4b85      	ldr	r3, [pc, #532]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
 8004b56:	4b82      	ldr	r3, [pc, #520]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d118      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2fc>
 8004b62:	4b7f      	ldr	r3, [pc, #508]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	f7ff fda5 	bl	80046bc <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b76:	f7ff fda1 	bl	80046bc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b64      	cmp	r3, #100	@ 0x64
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b84:	2303      	movs	r3, #3
 8004b86:	e103      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004b88:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2de>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6213      	str	r3, [r2, #32]
 8004ba8:	e02d      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x334>
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4a69      	ldr	r2, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6213      	str	r3, [r2, #32]
 8004bbe:	4b67      	ldr	r3, [pc, #412]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4a66      	ldr	r2, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	6213      	str	r3, [r2, #32]
 8004bca:	e01c      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_OscConfig+0x356>
 8004bd4:	4b61      	ldr	r3, [pc, #388]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a60      	ldr	r2, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6213      	str	r3, [r2, #32]
 8004bec:	e00b      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004bee:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6213      	str	r3, [r2, #32]
 8004bfa:	4b58      	ldr	r3, [pc, #352]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4a57      	ldr	r2, [pc, #348]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	6213      	str	r3, [r2, #32]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d015      	beq.n	8004c3a <HAL_RCC_OscConfig+0x3a2>
 8004c0e:	f7ff fd55 	bl	80046bc <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x394>
 8004c16:	f7ff fd51 	bl	80046bc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x394>
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0b1      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ee      	beq.n	8004c16 <HAL_RCC_OscConfig+0x37e>
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x3cc>
 8004c3a:	f7ff fd3f 	bl	80046bc <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
 8004c42:	f7ff fd3b 	bl	80046bc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
 8004c54:	2303      	movs	r3, #3
 8004c56:	e09b      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004c58:	4b40      	ldr	r3, [pc, #256]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ee      	bne.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3de>
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	61d3      	str	r3, [r2, #28]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8087 	beq.w	8004d8e <HAL_RCC_OscConfig+0x4f6>
 8004c80:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d061      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4b8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d146      	bne.n	8004d22 <HAL_RCC_OscConfig+0x48a>
 8004c94:	4b33      	ldr	r3, [pc, #204]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f7ff fd0f 	bl	80046bc <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
 8004ca2:	f7ff fd0b 	bl	80046bc <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e06d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004cb4:	4b29      	ldr	r3, [pc, #164]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x40a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCC_OscConfig+0x444>
 8004cca:	4b24      	ldr	r3, [pc, #144]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4921      	ldr	r1, [pc, #132]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a19      	ldr	r1, [r3, #32]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	430b      	orrs	r3, r1
 8004cee:	491b      	ldr	r1, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f7ff fcdf 	bl	80046bc <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x47c>
 8004d02:	f7ff fcdb 	bl	80046bc <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x47c>
 8004d10:	2303      	movs	r3, #3
 8004d12:	e03d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46a>
 8004d20:	e035      	b.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f7ff fcc8 	bl	80046bc <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x4aa>
 8004d30:	f7ff fcc4 	bl	80046bc <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x4aa>
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e026      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x498>
 8004d4e:	e01e      	b.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4d0>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e019      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42420060 	.word	0x42420060
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x4f2>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_RCC_ClockConfig>:
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x14>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0d0      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004db0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d910      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x44>
 8004dbe:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 0207 	bic.w	r2, r3, #7
 8004dc6:	4965      	ldr	r1, [pc, #404]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
 8004dce:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x44>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x92>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x68>
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e02:	6053      	str	r3, [r2, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x80>
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e1a:	6053      	str	r3, [r2, #4]
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d040      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x120>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xb6>
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d115      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xce>
 8004e5a:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e073      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e06b      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004e7a:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4936      	ldr	r1, [pc, #216]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
 8004e8c:	f7ff fc16 	bl	80046bc <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
 8004e94:	f7ff fc12 	bl	80046bc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e053      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf8>
 8004ebc:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d210      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x150>
 8004eca:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 0207 	bic.w	r2, r3, #7
 8004ed2:	4922      	ldr	r1, [pc, #136]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x150>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x16e>
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x18e>
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	604b      	str	r3, [r1, #4]
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1cc>)
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x1d0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fb74 	bl	8004638 <HAL_InitTick>
 8004f50:	2300      	movs	r3, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40021000 	.word	0x40021000
 8004f64:	080050c4 	.word	0x080050c4
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	20000004 	.word	0x20000004

08004f70 <HAL_RCC_GetSysClockFreq>:
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8004f9e:	e027      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x80>
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e027      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x86>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0c9b      	lsrs	r3, r3, #18
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a17      	ldr	r2, [pc, #92]	@ (800500c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x70>
 8004fbe:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	0c5b      	lsrs	r3, r3, #17
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	4a11      	ldr	r2, [pc, #68]	@ (8005010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fca:	5cd3      	ldrb	r3, [r2, r3]
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e004      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x7a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e002      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x86>
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	bf00      	nop
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	007a1200 	.word	0x007a1200
 800500c:	080050d4 	.word	0x080050d4
 8005010:	080050e4 	.word	0x080050e4
 8005014:	003d0900 	.word	0x003d0900

08005018 <RCC_Delay>:
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <RCC_Delay+0x34>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <RCC_Delay+0x38>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0a5b      	lsrs	r3, r3, #9
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	bf00      	nop
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	60fa      	str	r2, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f9      	bne.n	8005034 <RCC_Delay+0x1c>
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	20000000 	.word	0x20000000
 8005050:	10624dd3 	.word	0x10624dd3

08005054 <memset>:
 8005054:	4603      	mov	r3, r0
 8005056:	4402      	add	r2, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	d100      	bne.n	800505e <memset+0xa>
 800505c:	4770      	bx	lr
 800505e:	f803 1b01 	strb.w	r1, [r3], #1
 8005062:	e7f9      	b.n	8005058 <memset+0x4>

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	2600      	movs	r6, #0
 8005068:	4d0c      	ldr	r5, [pc, #48]	@ (800509c <__libc_init_array+0x38>)
 800506a:	4c0d      	ldr	r4, [pc, #52]	@ (80050a0 <__libc_init_array+0x3c>)
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	f000 f81a 	bl	80050ac <_init>
 8005078:	2600      	movs	r6, #0
 800507a:	4d0a      	ldr	r5, [pc, #40]	@ (80050a4 <__libc_init_array+0x40>)
 800507c:	4c0a      	ldr	r4, [pc, #40]	@ (80050a8 <__libc_init_array+0x44>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	080050e8 	.word	0x080050e8
 80050a0:	080050e8 	.word	0x080050e8
 80050a4:	080050e8 	.word	0x080050e8
 80050a8:	080050ec 	.word	0x080050ec

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr
