
APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef4  0800410c  0800410c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005000  08005000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005024  08005024  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005024  08005024  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00002024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005028  08005028  00002028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800502c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08005038  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08005038  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002884  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000da3  00000000  00000000  000058b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  00006660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002aa  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001578d  00000000  00000000  00006cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004178  00000000  00000000  0001c44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ba8c  00000000  00000000  000205c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce8  00000000  00000000  0009c098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0009cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	@ (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	00000000 	.word	0x00000000
 800412c:	08004fe8 	.word	0x08004fe8

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	@ (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	@ (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000010 	.word	0x20000010
 8004148:	08004fe8 	.word	0x08004fe8

0800414c <GPIO_init>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void GPIO_init(void) {
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN;  // Enable GPIOA clock
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <GPIO_init+0x60>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <GPIO_init+0x60>)
 8004156:	f043 030c 	orr.w	r3, r3, #12
 800415a:	6193      	str	r3, [r2, #24]
    // PA0 as floating input
    GPIOA->CRL &= ~(0xF << (BUTTON_PIN * 4));  // Clear MODE/CNF
 800415c:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <GPIO_init+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <GPIO_init+0x64>)
 8004162:	f023 030f 	bic.w	r3, r3, #15
 8004166:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (0b1000 << (BUTTON_PIN * 4));  // CNF = 01 (floating input), MODE = 00
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <GPIO_init+0x64>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a10      	ldr	r2, [pc, #64]	@ (80041b0 <GPIO_init+0x64>)
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6013      	str	r3, [r2, #0]
    GPIOA->ODR&=~(1<<BUTTON_PIN);
 8004174:	4b0e      	ldr	r3, [pc, #56]	@ (80041b0 <GPIO_init+0x64>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a0d      	ldr	r2, [pc, #52]	@ (80041b0 <GPIO_init+0x64>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	60d3      	str	r3, [r2, #12]
    // PB0 as push-pull output, 2 MHz
    // PB2 as output push-pull, 2 MHz
    GPIOB->CRL &= ~(0xF << (LED_PIN * 4));
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <GPIO_init+0x68>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0b      	ldr	r2, [pc, #44]	@ (80041b4 <GPIO_init+0x68>)
 8004186:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800418a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |=  (0x2 << (LED_PIN * 4));     // MODE=10 (2 MHz), CNF=00
 800418c:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <GPIO_init+0x68>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <GPIO_init+0x68>)
 8004192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004196:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~(1 << LED_PIN);
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <GPIO_init+0x68>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a05      	ldr	r2, [pc, #20]	@ (80041b4 <GPIO_init+0x68>)
 800419e:	f023 0304 	bic.w	r3, r3, #4
 80041a2:	60d3      	str	r3, [r2, #12]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40010800 	.word	0x40010800
 80041b4:	40010c00 	.word	0x40010c00

080041b8 <read_button>:
uint8_t read_button(void) {
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    return ((GPIOA->IDR & (1 << BUTTON_PIN)) != 0);  // HIGH = pressed
 80041bc:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <read_button+0x20>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010800 	.word	0x40010800

080041dc <SysTick_Init>:
// Initialize SysTick to trigger every 1ms
void SysTick_Init(void) {
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
    // SystemCoreClock should be 72 MHz (set in startup or defined globally)
    SysTick->LOAD  = (72000000 / 1000) - 1;  // 72,000 - 1 = 71,999
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <SysTick_Init+0x20>)
 80041e2:	4a07      	ldr	r2, [pc, #28]	@ (8004200 <SysTick_Init+0x24>)
 80041e4:	605a      	str	r2, [r3, #4]
    SysTick->VAL   = 0;                             // Clear current value
 80041e6:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <SysTick_Init+0x20>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |   // Use processor clock
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <SysTick_Init+0x20>)
 80041ee:	2207      	movs	r2, #7
 80041f0:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_TICKINT_Msk   |   // Enable SysTick interrupt
                     SysTick_CTRL_ENABLE_Msk;       // Enable SysTick
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000e010 	.word	0xe000e010
 8004200:	0001193f 	.word	0x0001193f

08004204 <led_on>:
// Turn LED ON
void led_on(void) {
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << LED_PIN);
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <led_on+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a03      	ldr	r2, [pc, #12]	@ (800421c <led_on+0x18>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	60d3      	str	r3, [r2, #12]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40010c00 	.word	0x40010c00

08004220 <led_off>:
// Turn LED OFF
void led_off(void) {
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << LED_PIN);
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <led_off+0x18>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a03      	ldr	r2, [pc, #12]	@ (8004238 <led_off+0x18>)
 800422a:	f023 0304 	bic.w	r3, r3, #4
 800422e:	60d3      	str	r3, [r2, #12]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40010c00 	.word	0x40010c00

0800423c <recurse>:
    __set_MSP(boot_stack);
    // 4. Jump to the application's Reset Handler
    void (*boot_entry)(void) = (void*)boot_reset;
    boot_entry();
}
void recurse(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
	recurse();
 8004240:	f7ff fffc 	bl	800423c <recurse>
}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}

08004248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
uint32_t last_debounce=0;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
uint8_t last_read=0,current_read=0,button_state=0;
 8004252:	2300      	movs	r3, #0
 8004254:	76fb      	strb	r3, [r7, #27]
 8004256:	2300      	movs	r3, #0
 8004258:	767b      	strb	r3, [r7, #25]
 800425a:	2300      	movs	r3, #0
 800425c:	76bb      	strb	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800425e:	f000 f973 	bl	8004548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004262:	f000 f86d 	bl	8004340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004266:	f000 f8b1 	bl	80043cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  check_for_bootloader_flag();
  GPIO_init();
 800426a:	f7ff ff6f 	bl	800414c <GPIO_init>
  SysTick_Init();
 800426e:	f7ff ffb5 	bl	80041dc <SysTick_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
current_read=read_button();
 8004272:	f7ff ffa1 	bl	80041b8 <read_button>
 8004276:	4603      	mov	r3, r0
 8004278:	767b      	strb	r3, [r7, #25]
if(current_read!=last_read){
 800427a:	7e7a      	ldrb	r2, [r7, #25]
 800427c:	7efb      	ldrb	r3, [r7, #27]
 800427e:	429a      	cmp	r2, r3
 8004280:	d002      	beq.n	8004288 <main+0x40>
	last_debounce=mytick;
 8004282:	4b2b      	ldr	r3, [pc, #172]	@ (8004330 <main+0xe8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61fb      	str	r3, [r7, #28]
}
if((mytick-last_debounce)>DEBOUNCE_TIME){
 8004288:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <main+0xe8>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b32      	cmp	r3, #50	@ 0x32
 8004292:	d94a      	bls.n	800432a <main+0xe2>
	if(button_state!=current_read){
 8004294:	7eba      	ldrb	r2, [r7, #26]
 8004296:	7e7b      	ldrb	r3, [r7, #25]
 8004298:	429a      	cmp	r2, r3
 800429a:	d046      	beq.n	800432a <main+0xe2>
		button_state=current_read;
 800429c:	7e7b      	ldrb	r3, [r7, #25]
 800429e:	76bb      	strb	r3, [r7, #26]
		if(button_state){
 80042a0:	7ebb      	ldrb	r3, [r7, #26]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03f      	beq.n	8004326 <main+0xde>
			cnt++;
 80042a6:	4b23      	ldr	r3, [pc, #140]	@ (8004334 <main+0xec>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b21      	ldr	r3, [pc, #132]	@ (8004334 <main+0xec>)
 80042b0:	701a      	strb	r2, [r3, #0]
			led_on();
 80042b2:	f7ff ffa7 	bl	8004204 <led_on>
			if(cnt==6){// Enable UsageFault and division-by-zero trap
 80042b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004334 <main+0xec>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d110      	bne.n	80042e0 <main+0x98>
				SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;    // Enable UsageFault
 80042be:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <main+0xf0>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <main+0xf0>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c8:	6253      	str	r3, [r2, #36]	@ 0x24
				SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;          // Trap divide-by-zero
 80042ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <main+0xf0>)
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004338 <main+0xf0>)
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	6153      	str	r3, [r2, #20]
                int a=(1/0);
 80042d6:	2201      	movs	r2, #1
 80042d8:	2300      	movs	r3, #0
 80042da:	fb92 f3f3 	sdiv	r3, r2, r3
 80042de:	617b      	str	r3, [r7, #20]
			}
			if(cnt==7){//stack over flow/corruption
 80042e0:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <main+0xec>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b07      	cmp	r3, #7
 80042e6:	d101      	bne.n	80042ec <main+0xa4>
				recurse();  // eventually triggers Hard Fault
 80042e8:	f7ff ffa8 	bl	800423c <recurse>
			}
			if(cnt==8){//executing code from invalid memory
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <main+0xec>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d104      	bne.n	80042fe <main+0xb6>
				void (*invalid_code)(void) = (void *)0xFFFFFFF1;
 80042f4:	f06f 030e 	mvn.w	r3, #14
 80042f8:	613b      	str	r3, [r7, #16]
				invalid_code();  // crashes
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4798      	blx	r3
			}
			if(cnt==9){//dereferenceing null pointer
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <main+0xec>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b09      	cmp	r3, #9
 8004304:	d104      	bne.n	8004310 <main+0xc8>
				volatile uint32_t *ptr = (uint32_t *)0x00000000;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
				*ptr = 0x12345678;  // causes Hard Fault
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <main+0xf4>)
 800430e:	601a      	str	r2, [r3, #0]
			}
			if(cnt==10){//unaligned memory access
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <main+0xec>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b0a      	cmp	r3, #10
 8004316:	d108      	bne.n	800432a <main+0xe2>
				volatile uint32_t *bad = (uint32_t*)0xFFFFFFF0; // Invalid address
 8004318:	f06f 030f 	mvn.w	r3, #15
 800431c:	60bb      	str	r3, [r7, #8]
				uint32_t val = *bad;  // Will cause HardFault
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e001      	b.n	800432a <main+0xe2>
			}
		}else{
			led_off();
 8004326:	f7ff ff7b 	bl	8004220 <led_off>
		}
	}
}
last_read = current_read;
 800432a:	7e7b      	ldrb	r3, [r7, #25]
 800432c:	76fb      	strb	r3, [r7, #27]
current_read=read_button();
 800432e:	e7a0      	b.n	8004272 <main+0x2a>
 8004330:	20000028 	.word	0x20000028
 8004334:	2000002c 	.word	0x2000002c
 8004338:	e000ed00 	.word	0xe000ed00
 800433c:	12345678 	.word	0x12345678

08004340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b090      	sub	sp, #64	@ 0x40
 8004344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004346:	f107 0318 	add.w	r3, r7, #24
 800434a:	2228      	movs	r2, #40	@ 0x28
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fe1e 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004362:	2301      	movs	r3, #1
 8004364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800436a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800436c:	2300      	movs	r3, #0
 800436e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004370:	2301      	movs	r3, #1
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004374:	2302      	movs	r3, #2
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004378:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800437e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004384:	f107 0318 	add.w	r3, r7, #24
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fa23 	bl	80047d4 <HAL_RCC_OscConfig>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004394:	f000 f830 	bl	80043f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004398:	230f      	movs	r3, #15
 800439a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800439c:	2302      	movs	r3, #2
 800439e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fc90 	bl	8004cd8 <HAL_RCC_ClockConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80043be:	f000 f81b 	bl	80043f8 <Error_Handler>
  }
}
 80043c2:	bf00      	nop
 80043c4:	3740      	adds	r7, #64	@ 0x40
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <MX_GPIO_Init+0x28>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4a07      	ldr	r2, [pc, #28]	@ (80043f4 <MX_GPIO_Init+0x28>)
 80043d8:	f043 0320 	orr.w	r3, r3, #32
 80043dc:	6193      	str	r3, [r2, #24]
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <MX_GPIO_Init+0x28>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40021000 	.word	0x40021000

080043f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043fc:	b672      	cpsid	i
}
 80043fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <Error_Handler+0x8>

08004404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800440a:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <HAL_MspInit+0x5c>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <HAL_MspInit+0x5c>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6193      	str	r3, [r2, #24]
 8004416:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_MspInit+0x5c>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <HAL_MspInit+0x5c>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <HAL_MspInit+0x5c>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442c:	61d3      	str	r3, [r2, #28]
 800442e:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <HAL_MspInit+0x5c>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <HAL_MspInit+0x60>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <HAL_MspInit+0x60>)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr
 8004460:	40021000 	.word	0x40021000
 8004464:	40010000 	.word	0x40010000

08004468 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800446c:	f3bf 8f4f 	dsb	sy
}
 8004470:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <__NVIC_SystemReset+0x24>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800447a:	4904      	ldr	r1, [pc, #16]	@ (800448c <__NVIC_SystemReset+0x24>)
 800447c:	4b04      	ldr	r3, [pc, #16]	@ (8004490 <__NVIC_SystemReset+0x28>)
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004482:	f3bf 8f4f 	dsb	sy
}
 8004486:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <__NVIC_SystemReset+0x20>
 800448c:	e000ed00 	.word	0xe000ed00
 8004490:	05fa0004 	.word	0x05fa0004

08004494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
		NVIC_SystemReset();
 8004498:	f7ff ffe6 	bl	8004468 <__NVIC_SystemReset>

0800449c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		NVIC_SystemReset();
 80044a0:	f7ff ffe2 	bl	8004468 <__NVIC_SystemReset>

080044a4 <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
		NVIC_SystemReset();
 80044a8:	f7ff ffde 	bl	8004468 <__NVIC_SystemReset>

080044ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
		NVIC_SystemReset();
 80044b0:	f7ff ffda 	bl	8004468 <__NVIC_SystemReset>

080044b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
		NVIC_SystemReset();
 80044b8:	f7ff ffd6 	bl	8004468 <__NVIC_SystemReset>

080044bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
	NVIC_SystemReset();
 80044c0:	f7ff ffd2 	bl	8004468 <__NVIC_SystemReset>

080044c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
	NVIC_SystemReset();
 80044c8:	f7ff ffce 	bl	8004468 <__NVIC_SystemReset>

080044cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
	NVIC_SystemReset();
 80044d0:	f7ff ffca 	bl	8004468 <__NVIC_SystemReset>

080044d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	mytick++;
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <SysTick_Handler+0x18>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	4a03      	ldr	r2, [pc, #12]	@ (80044ec <SysTick_Handler+0x18>)
 80044e0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e2:	f000 f877 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000028 	.word	0x20000028

080044f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044fc:	f7ff fff8 	bl	80044f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004500:	480b      	ldr	r0, [pc, #44]	@ (8004530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004502:	490c      	ldr	r1, [pc, #48]	@ (8004534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004504:	4a0c      	ldr	r2, [pc, #48]	@ (8004538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004508:	e002      	b.n	8004510 <LoopCopyDataInit>

0800450a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800450a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800450c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800450e:	3304      	adds	r3, #4

08004510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004514:	d3f9      	bcc.n	800450a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004516:	4a09      	ldr	r2, [pc, #36]	@ (800453c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004518:	4c09      	ldr	r4, [pc, #36]	@ (8004540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800451a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800451c:	e001      	b.n	8004522 <LoopFillZerobss>

0800451e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800451e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004520:	3204      	adds	r2, #4

08004522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004524:	d3fb      	bcc.n	800451e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004526:	f000 fd3b 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800452a:	f7ff fe8d 	bl	8004248 <main>
  bx lr
 800452e:	4770      	bx	lr
  ldr r0, =_sdata
 8004530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004538:	0800502c 	.word	0x0800502c
  ldr r2, =_sbss
 800453c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004540:	20000034 	.word	0x20000034

08004544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004544:	e7fe      	b.n	8004544 <ADC1_2_IRQHandler>
	...

08004548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800454c:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <HAL_Init+0x28>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a07      	ldr	r2, [pc, #28]	@ (8004570 <HAL_Init+0x28>)
 8004552:	f043 0310 	orr.w	r3, r3, #16
 8004556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004558:	2003      	movs	r0, #3
 800455a:	f000 f907 	bl	800476c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455e:	200f      	movs	r0, #15
 8004560:	f000 f808 	bl	8004574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004564:	f7ff ff4e 	bl	8004404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000

08004574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_InitTick+0x54>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_InitTick+0x58>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800458a:	fbb3 f3f1 	udiv	r3, r3, r1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f911 	bl	80047ba <HAL_SYSTICK_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00e      	b.n	80045c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d80a      	bhi.n	80045be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	f000 f8e7 	bl	8004782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b4:	4a06      	ldr	r2, [pc, #24]	@ (80045d0 <HAL_InitTick+0x5c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000008 	.word	0x20000008
 80045d0:	20000004 	.word	0x20000004

080045d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <HAL_IncTick+0x1c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_IncTick+0x20>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a03      	ldr	r2, [pc, #12]	@ (80045f4 <HAL_IncTick+0x20>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000008 	.word	0x20000008
 80045f4:	20000030 	.word	0x20000030

080045f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return uwTick;
 80045fc:	4b02      	ldr	r3, [pc, #8]	@ (8004608 <HAL_GetTick+0x10>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	20000030 	.word	0x20000030

0800460c <__NVIC_SetPriorityGrouping>:
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463e:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60d3      	str	r3, [r2, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_GetPriorityGrouping>:
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__NVIC_GetPriorityGrouping+0x18>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_SetPriority>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	2b00      	cmp	r3, #0
 8004682:	db0a      	blt.n	800469a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	490c      	ldr	r1, [pc, #48]	@ (80046bc <__NVIC_SetPriority+0x4c>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	440b      	add	r3, r1
 8004694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004698:	e00a      	b.n	80046b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4908      	ldr	r1, [pc, #32]	@ (80046c0 <__NVIC_SetPriority+0x50>)
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	3b04      	subs	r3, #4
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	440b      	add	r3, r1
 80046ae:	761a      	strb	r2, [r3, #24]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e100 	.word	0xe000e100
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <NVIC_EncodePriority>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	bf28      	it	cs
 80046e2:	2304      	movcs	r3, #4
 80046e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d902      	bls.n	80046f4 <NVIC_EncodePriority+0x30>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3b03      	subs	r3, #3
 80046f2:	e000      	b.n	80046f6 <NVIC_EncodePriority+0x32>
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	401a      	ands	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	43d9      	mvns	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	4313      	orrs	r3, r2
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	@ 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004738:	d301      	bcc.n	800473e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800473a:	2301      	movs	r3, #1
 800473c:	e00f      	b.n	800475e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473e:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <SysTick_Config+0x40>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004746:	210f      	movs	r1, #15
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	f7ff ff90 	bl	8004670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <SysTick_Config+0x40>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004756:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <SysTick_Config+0x40>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e000e010 	.word	0xe000e010

0800476c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff49 	bl	800460c <__NVIC_SetPriorityGrouping>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004794:	f7ff ff5e 	bl	8004654 <__NVIC_GetPriorityGrouping>
 8004798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	6978      	ldr	r0, [r7, #20]
 80047a0:	f7ff ff90 	bl	80046c4 <NVIC_EncodePriority>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff5f 	bl	8004670 <__NVIC_SetPriority>
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff ffb0 	bl	8004728 <SysTick_Config>
 80047c8:	4603      	mov	r3, r0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e272      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8087 	beq.w	8004902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f4:	4b92      	ldr	r3, [pc, #584]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d00c      	beq.n	800481a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004800:	4b8f      	ldr	r3, [pc, #572]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d112      	bne.n	8004832 <HAL_RCC_OscConfig+0x5e>
 800480c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004818:	d10b      	bne.n	8004832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481a:	4b89      	ldr	r3, [pc, #548]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06c      	beq.n	8004900 <HAL_RCC_OscConfig+0x12c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d168      	bne.n	8004900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e24c      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x76>
 800483c:	4b80      	ldr	r3, [pc, #512]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a7f      	ldr	r2, [pc, #508]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e02e      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b7b      	ldr	r3, [pc, #492]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7a      	ldr	r2, [pc, #488]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b78      	ldr	r3, [pc, #480]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a77      	ldr	r2, [pc, #476]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e01d      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0xbc>
 8004876:	4b72      	ldr	r3, [pc, #456]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a71      	ldr	r2, [pc, #452]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800487c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b6f      	ldr	r3, [pc, #444]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6e      	ldr	r2, [pc, #440]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 8004890:	4b6b      	ldr	r3, [pc, #428]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a6a      	ldr	r2, [pc, #424]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b68      	ldr	r3, [pc, #416]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a67      	ldr	r2, [pc, #412]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7ff fea2 	bl	80045f8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7ff fe9e 	bl	80045f8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	@ 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e200      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe4>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7ff fe8e 	bl	80045f8 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e0:	f7ff fe8a 	bl	80045f8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	@ 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e1ec      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x10c>
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d063      	beq.n	80049d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800490e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800491a:	4b49      	ldr	r3, [pc, #292]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b08      	cmp	r3, #8
 8004924:	d11c      	bne.n	8004960 <HAL_RCC_OscConfig+0x18c>
 8004926:	4b46      	ldr	r3, [pc, #280]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d116      	bne.n	8004960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004932:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_RCC_OscConfig+0x176>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d001      	beq.n	800494a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e1c0      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4939      	ldr	r1, [pc, #228]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	e03a      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d020      	beq.n	80049aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004968:	4b36      	ldr	r3, [pc, #216]	@ (8004a44 <HAL_RCC_OscConfig+0x270>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7ff fe43 	bl	80045f8 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004976:	f7ff fe3f 	bl	80045f8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e1a1      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	4b2d      	ldr	r3, [pc, #180]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004994:	4b2a      	ldr	r3, [pc, #168]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4927      	ldr	r1, [pc, #156]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
 80049a8:	e015      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <HAL_RCC_OscConfig+0x270>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7ff fe22 	bl	80045f8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b8:	f7ff fe1e 	bl	80045f8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e180      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d03a      	beq.n	8004a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <HAL_RCC_OscConfig+0x274>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f0:	f7ff fe02 	bl	80045f8 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7ff fdfe 	bl	80045f8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e160      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a16:	2001      	movs	r0, #1
 8004a18:	f000 fa9c 	bl	8004f54 <RCC_Delay>
 8004a1c:	e01c      	b.n	8004a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <HAL_RCC_OscConfig+0x274>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7ff fde8 	bl	80045f8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2a:	e00f      	b.n	8004a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7ff fde4 	bl	80045f8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d908      	bls.n	8004a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e146      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	42420000 	.word	0x42420000
 8004a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b92      	ldr	r3, [pc, #584]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e9      	bne.n	8004a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a6 	beq.w	8004bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	4b88      	ldr	r3, [pc, #544]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4a87      	ldr	r2, [pc, #540]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	61d3      	str	r3, [r2, #28]
 8004a82:	4b85      	ldr	r3, [pc, #532]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a92:	4b82      	ldr	r3, [pc, #520]	@ (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d118      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aaa:	f7ff fda5 	bl	80045f8 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab2:	f7ff fda1 	bl	80045f8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	@ 0x64
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e103      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	4b75      	ldr	r3, [pc, #468]	@ (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x312>
 8004ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4a6e      	ldr	r2, [pc, #440]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6213      	str	r3, [r2, #32]
 8004ae4:	e02d      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x334>
 8004aee:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4a69      	ldr	r2, [pc, #420]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6213      	str	r3, [r2, #32]
 8004afa:	4b67      	ldr	r3, [pc, #412]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4a66      	ldr	r2, [pc, #408]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	e01c      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_OscConfig+0x356>
 8004b10:	4b61      	ldr	r3, [pc, #388]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4a60      	ldr	r2, [pc, #384]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	6213      	str	r3, [r2, #32]
 8004b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4a5d      	ldr	r2, [pc, #372]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6213      	str	r3, [r2, #32]
 8004b28:	e00b      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	6213      	str	r3, [r2, #32]
 8004b36:	4b58      	ldr	r3, [pc, #352]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	4a57      	ldr	r2, [pc, #348]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d015      	beq.n	8004b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4a:	f7ff fd55 	bl	80045f8 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7ff fd51 	bl	80045f8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0b1      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	4b4b      	ldr	r3, [pc, #300]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ee      	beq.n	8004b52 <HAL_RCC_OscConfig+0x37e>
 8004b74:	e014      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b76:	f7ff fd3f 	bl	80045f8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7ff fd3b 	bl	80045f8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e09b      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	4b40      	ldr	r3, [pc, #256]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4a3b      	ldr	r2, [pc, #236]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8087 	beq.w	8004cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bbc:	4b36      	ldr	r3, [pc, #216]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d061      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d146      	bne.n	8004c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b33      	ldr	r3, [pc, #204]	@ (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7ff fd0f 	bl	80045f8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7ff fd0b 	bl	80045f8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e06d      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf0:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d108      	bne.n	8004c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4921      	ldr	r1, [pc, #132]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c18:	4b1f      	ldr	r3, [pc, #124]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a19      	ldr	r1, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	491b      	ldr	r1, [pc, #108]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7ff fcdf 	bl	80045f8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7ff fcdb 	bl	80045f8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03d      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c50:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x46a>
 8004c5c:	e035      	b.n	8004cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7ff fcc8 	bl	80045f8 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7ff fcc4 	bl	80045f8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e026      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x498>
 8004c8a:	e01e      	b.n	8004cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e019      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_OscConfig+0x500>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000

08004cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0d0      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b67      	ldr	r3, [pc, #412]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 0207 	bic.w	r2, r3, #7
 8004d02:	4965      	ldr	r1, [pc, #404]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0b8      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d34:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a58      	ldr	r2, [pc, #352]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d4c:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a52      	ldr	r2, [pc, #328]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d58:	4b50      	ldr	r3, [pc, #320]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	494d      	ldr	r1, [pc, #308]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d040      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b47      	ldr	r3, [pc, #284]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d115      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d96:	4b41      	ldr	r3, [pc, #260]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e073      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06b      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db6:	4b39      	ldr	r3, [pc, #228]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4936      	ldr	r1, [pc, #216]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc8:	f7ff fc16 	bl	80045f8 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7ff fc12 	bl	80045f8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e053      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 020c 	and.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1eb      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d210      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b24      	ldr	r3, [pc, #144]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 0207 	bic.w	r2, r3, #7
 8004e0e:	4922      	ldr	r1, [pc, #136]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e032      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4916      	ldr	r1, [pc, #88]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e52:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f821 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fb74 	bl	8004574 <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	08005000 	.word	0x08005000
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	20000004 	.word	0x20000004

08004eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d002      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x30>
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8004eda:	e027      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004edc:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ede:	613b      	str	r3, [r7, #16]
      break;
 8004ee0:	e027      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	0c9b      	lsrs	r3, r3, #18
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
 8004eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d010      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004efa:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0c5b      	lsrs	r3, r3, #17
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	4a11      	ldr	r2, [pc, #68]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f0e:	fb03 f202 	mul.w	r2, r3, r2
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e004      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	613b      	str	r3, [r7, #16]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f2e:	613b      	str	r3, [r7, #16]
      break;
 8004f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f32:	693b      	ldr	r3, [r7, #16]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	007a1200 	.word	0x007a1200
 8004f48:	08005010 	.word	0x08005010
 8004f4c:	08005020 	.word	0x08005020
 8004f50:	003d0900 	.word	0x003d0900

08004f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <RCC_Delay+0x34>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	@ (8004f8c <RCC_Delay+0x38>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0a5b      	lsrs	r3, r3, #9
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f70:	bf00      	nop
  }
  while (Delay --);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1e5a      	subs	r2, r3, #1
 8004f76:	60fa      	str	r2, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f9      	bne.n	8004f70 <RCC_Delay+0x1c>
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <memset>:
 8004f90:	4603      	mov	r3, r0
 8004f92:	4402      	add	r2, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	4d0c      	ldr	r5, [pc, #48]	@ (8004fd8 <__libc_init_array+0x38>)
 8004fa6:	4c0d      	ldr	r4, [pc, #52]	@ (8004fdc <__libc_init_array+0x3c>)
 8004fa8:	1b64      	subs	r4, r4, r5
 8004faa:	10a4      	asrs	r4, r4, #2
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	f000 f81a 	bl	8004fe8 <_init>
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	4d0a      	ldr	r5, [pc, #40]	@ (8004fe0 <__libc_init_array+0x40>)
 8004fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004fe4 <__libc_init_array+0x44>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	08005024 	.word	0x08005024
 8004fdc:	08005024 	.word	0x08005024
 8004fe0:	08005024 	.word	0x08005024
 8004fe4:	08005028 	.word	0x08005028

08004fe8 <_init>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_fini>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr
